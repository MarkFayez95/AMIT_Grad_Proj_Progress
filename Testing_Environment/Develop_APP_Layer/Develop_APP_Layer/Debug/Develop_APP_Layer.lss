
Develop_APP_Layer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d0  00800060  0000038e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016b5  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000910  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082a  00000000  00000000  00002815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a19  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000839  00000000  00000000  00003c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 33       	cpi	r26, 0x30	; 48
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a0 e3       	ldi	r26, 0x30	; 48
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  8a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDir>:
	Port->DDR |= ((Dir<<Pin) & (1<<Pin));
}

void DIO_SetPortValue(volatile PORT_REG* Port, uint8 Value)
{
	Port->PORT = Value;
  92:	fc 01       	movw	r30, r24
  94:	94 2f       	mov	r25, r20
  96:	81 81       	ldd	r24, Z+1	; 0x01
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	9a 01       	movw	r18, r20
  9e:	06 2e       	mov	r0, r22
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_SetPinDir+0x14>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_SetPinDir+0x10>
  aa:	32 2f       	mov	r19, r18
  ac:	30 95       	com	r19
  ae:	83 23       	and	r24, r19
  b0:	81 83       	std	Z+1, r24	; 0x01
  b2:	81 81       	ldd	r24, Z+1	; 0x01
  b4:	49 2f       	mov	r20, r25
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x2c>
  ba:	44 0f       	add	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x28>
  c2:	42 23       	and	r20, r18
  c4:	48 2b       	or	r20, r24
  c6:	41 83       	std	Z+1, r20	; 0x01
  c8:	08 95       	ret

000000ca <DIO_SetPinValue>:
}
void DIO_SetPinValue(volatile PORT_REG* Port, uint8 Pin, uint8 Value)
{
  ca:	fc 01       	movw	r30, r24
  cc:	94 2f       	mov	r25, r20
	Port->PORT &= ~(1<<Pin);
  ce:	82 81       	ldd	r24, Z+2	; 0x02
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	9a 01       	movw	r18, r20
  d6:	06 2e       	mov	r0, r22
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinValue+0x14>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinValue+0x10>
  e2:	32 2f       	mov	r19, r18
  e4:	30 95       	com	r19
  e6:	83 23       	and	r24, r19
  e8:	82 83       	std	Z+2, r24	; 0x02
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
  ea:	82 81       	ldd	r24, Z+2	; 0x02
  ec:	49 2f       	mov	r20, r25
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_SetPinValue+0x2c>
  f2:	44 0f       	add	r20, r20
  f4:	55 1f       	adc	r21, r21
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_SetPinValue+0x28>
  fa:	42 23       	and	r20, r18
  fc:	48 2b       	or	r20, r24
  fe:	42 83       	std	Z+2, r20	; 0x02
 100:	08 95       	ret

00000102 <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 102:	cf 93       	push	r28
 104:	c8 2f       	mov	r28, r24
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	86 e3       	ldi	r24, 0x36	; 54
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	86 e3       	ldi	r24, 0x36	; 54
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	63 e0       	ldi	r22, 0x03	; 3
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	9c 2f       	mov	r25, r28
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 2b       	or	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	86 e3       	ldi	r24, 0x36	; 54
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 142:	8f e9       	ldi	r24, 0x9F	; 159
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_WriteCommand+0x44>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_WriteCommand+0x4a>
 14c:	00 00       	nop
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	63 e0       	ldi	r22, 0x03	; 3
 152:	86 e3       	ldi	r24, 0x36	; 54
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 15a:	20 e1       	ldi	r18, 0x10	; 16
 15c:	c2 9f       	mul	r28, r18
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	9b b3       	in	r25, 0x1b	; 27
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	89 2b       	or	r24, r25
 168:	8b bb       	out	0x1b, r24	; 27
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	86 e3       	ldi	r24, 0x36	; 54
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_WriteCommand+0x78>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_WriteCommand+0x7e>
 180:	00 00       	nop
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	86 e3       	ldi	r24, 0x36	; 54
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_WriteCommand+0x90>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_WriteCommand+0x96>
 198:	00 00       	nop
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <LCD_Init>:
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	86 e3       	ldi	r24, 0x36	; 54
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	86 e3       	ldi	r24, 0x36	; 54
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	64 e0       	ldi	r22, 0x04	; 4
 1c6:	89 e3       	ldi	r24, 0x39	; 57
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	65 e0       	ldi	r22, 0x05	; 5
 1d2:	89 e3       	ldi	r24, 0x39	; 57
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	66 e0       	ldi	r22, 0x06	; 6
 1de:	89 e3       	ldi	r24, 0x39	; 57
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	67 e0       	ldi	r22, 0x07	; 7
 1ea:	89 e3       	ldi	r24, 0x39	; 57
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDir>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	81 ee       	ldi	r24, 0xE1	; 225
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <LCD_Init+0x5a>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_Init+0x64>
 202:	00 00       	nop
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 20a:	82 e3       	ldi	r24, 0x32	; 50
 20c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 22e:	08 95       	ret

00000230 <LCD_WriteChar>:
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	86 e3       	ldi	r24, 0x36	; 54
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	86 e3       	ldi	r24, 0x36	; 54
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	86 e3       	ldi	r24, 0x36	; 54
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 258:	8b b3       	in	r24, 0x1b	; 27
 25a:	9c 2f       	mov	r25, r28
 25c:	90 7f       	andi	r25, 0xF0	; 240
 25e:	8f 70       	andi	r24, 0x0F	; 15
 260:	89 2b       	or	r24, r25
 262:	8b bb       	out	0x1b, r24	; 27
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	86 e3       	ldi	r24, 0x36	; 54
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_WriteChar+0x44>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_WriteChar+0x4a>
 27a:	00 00       	nop
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	86 e3       	ldi	r24, 0x36	; 54
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 288:	20 e1       	ldi	r18, 0x10	; 16
 28a:	c2 9f       	mul	r28, r18
 28c:	c0 01       	movw	r24, r0
 28e:	11 24       	eor	r1, r1
 290:	9b b3       	in	r25, 0x1b	; 27
 292:	9f 70       	andi	r25, 0x0F	; 15
 294:	89 2b       	or	r24, r25
 296:	8b bb       	out	0x1b, r24	; 27
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	86 e3       	ldi	r24, 0x36	; 54
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_WriteChar+0x78>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_WriteChar+0x7e>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	86 e3       	ldi	r24, 0x36	; 54
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 65 00 	call	0xca	; 0xca <DIO_SetPinValue>
 2bc:	8f e1       	ldi	r24, 0x1F	; 31
 2be:	9e e4       	ldi	r25, 0x4E	; 78
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_WriteChar+0x90>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_WriteChar+0x96>
 2c6:	00 00       	nop
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 2d8:	0e 94 18 01 	call	0x230	; 0x230 <LCD_WriteChar>
		Str_count++;
 2dc:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 2de:	f8 01       	movw	r30, r16
 2e0:	ec 0f       	add	r30, r28
 2e2:	f1 1d       	adc	r31, r1
 2e4:	80 81       	ld	r24, Z
 2e6:	81 11       	cpse	r24, r1
 2e8:	f7 cf       	rjmp	.-18     	; 0x2d8 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <LCD_GoToLocation+0x6>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 2fc:	90 e8       	ldi	r25, 0x80	; 128
 2fe:	99 83       	std	Y+1, r25	; 0x01
 300:	90 ec       	ldi	r25, 0xC0	; 192
 302:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 304:	e1 e0       	ldi	r30, 0x01	; 1
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ec 0f       	add	r30, r28
 30a:	fd 1f       	adc	r31, r29
 30c:	e8 0f       	add	r30, r24
 30e:	f1 1d       	adc	r31, r1
 310:	80 81       	ld	r24, Z
 312:	86 0f       	add	r24, r22
 314:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
	
}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 81 00 	call	0x102	; 0x102 <LCD_WriteCommand>
 328:	08 95       	ret

0000032a <main>:
//#include "Smart_Home.h"
#include "Status_FollowUp.h"

int main(void)
{
	Status_FollowUp_Init();
 32a:	0e 94 9c 01 	call	0x338	; 0x338 <Status_FollowUp_Init>
	
	Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 32e:	6b e0       	ldi	r22, 0x0B	; 11
 330:	84 e2       	ldi	r24, 0x24	; 36
 332:	0e 94 9f 01 	call	0x33e	; 0x33e <Status_Disp_LCD>
 336:	ff cf       	rjmp	.-2      	; 0x336 <main+0xc>

00000338 <Status_FollowUp_Init>:
    "Invalid Operation Requested!"
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 338:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Init>
 33c:	08 95       	ret

0000033e <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d8 2f       	mov	r29, r24
 344:	c6 2f       	mov	r28, r22
    LCD_Clear();
 346:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 34a:	20 e1       	ldi	r18, 0x10	; 16
 34c:	d2 9f       	mul	r29, r18
 34e:	c0 01       	movw	r24, r0
 350:	11 24       	eor	r1, r1
 352:	80 5a       	subi	r24, 0xA0	; 160
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 362:	20 e1       	ldi	r18, 0x10	; 16
 364:	c2 9f       	mul	r28, r18
 366:	c0 01       	movw	r24, r0
 368:	11 24       	eor	r1, r1
 36a:	80 5a       	subi	r24, 0xA0	; 160
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	96 e1       	ldi	r25, 0x16	; 22
 376:	21 e1       	ldi	r18, 0x11	; 17
 378:	81 50       	subi	r24, 0x01	; 1
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	20 40       	sbci	r18, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <Status_Disp_LCD+0x3a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <Status_Disp_LCD+0x44>
 382:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
