
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000804  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d0  00800060  00000804  00000898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800330  00800330  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dfd  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010bf  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a1  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  000061e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e8f  00000000  00000000  0000678c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131b  00000000  00000000  0000761b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008936  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 33       	cpi	r26, 0x30	; 48
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a0 e3       	ldi	r26, 0x30	; 48
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 33       	cpi	r26, 0x33	; 51
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 11 03 	call	0x622	; 0x622 <main>
  8a:	0c 94 00 04 	jmp	0x800	; 0x800 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    UART_TxString(Data_Stream);
}
  92:	0e 94 dd 03 	call	0x7ba	; 0x7ba <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
    uint8 Data_byte_counter = 0;
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <Bluetooth_Mod_Seq_Rx+0xc>
  f4:	c0 e0       	ldi	r28, 0x00	; 0
    
    do
    {
        Data_Stream[Data_byte_counter] = UART_Rx();
  f6:	78 01       	movw	r14, r16
  f8:	ec 0e       	add	r14, r28
  fa:	f1 1c       	adc	r15, r1
  fc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Rx>
 100:	f7 01       	movw	r30, r14
 102:	80 83       	st	Z, r24
        Data_byte_counter++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
    }
    while(Data_Stream[Data_byte_counter-1] != BT_END_PACKET_CODE);
 106:	ec 2f       	mov	r30, r28
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 81       	ld	r24, Z
 112:	8d 30       	cpi	r24, 0x0D	; 13
 114:	81 f7       	brne	.-32     	; 0xf6 <Bluetooth_Mod_Seq_Rx+0x16>
    Data_Stream[Data_byte_counter-1] = 0x00;
 116:	10 82       	st	Z, r1
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	08 95       	ret

00000124 <CMD_Bus_HandShake>:
            SPI_Master_TermTrans();
        #endif /* SPI_ROLE */

        return RECEIVED;
    }
}
 124:	cf 93       	push	r28
 126:	0e 94 86 03 	call	0x70c	; 0x70c <SPI_Master_InitTrans>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	86 e7       	ldi	r24, 0x76	; 118
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <CMD_Bus_HandShake+0xc>
 138:	00 c0       	rjmp	.+0      	; 0x13a <CMD_Bus_HandShake+0x16>
 13a:	00 00       	nop
 13c:	80 ea       	ldi	r24, 0xA0	; 160
 13e:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_Transiver>
 142:	c8 2f       	mov	r28, r24
 144:	88 23       	and	r24, r24
 146:	89 f3       	breq	.-30     	; 0x12a <CMD_Bus_HandShake+0x6>
 148:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_TermTrans>
 14c:	c0 3b       	cpi	r28, 0xB0	; 176
 14e:	11 f4       	brne	.+4      	; 0x154 <CMD_Bus_HandShake+0x30>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	01 c0       	rjmp	.+2      	; 0x156 <CMD_Bus_HandShake+0x32>
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <CMD_Bus_Master_Init>:
 15a:	0e 94 55 03 	call	0x6aa	; 0x6aa <SPI_Master_Init>
 15e:	08 95       	ret

00000160 <CMD_Bus_Write>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	d8 2f       	mov	r29, r24
 166:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	61 f0       	breq	.+24     	; 0x186 <CMD_Bus_Write+0x26>
 16e:	0e 94 86 03 	call	0x70c	; 0x70c <SPI_Master_InitTrans>
 172:	8d 2f       	mov	r24, r29
 174:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_Transiver>
 178:	c8 2f       	mov	r28, r24
 17a:	88 23       	and	r24, r24
 17c:	d1 f3       	breq	.-12     	; 0x172 <CMD_Bus_Write+0x12>
 17e:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_TermTrans>
 182:	8c 2f       	mov	r24, r28
 184:	01 c0       	rjmp	.+2      	; 0x188 <CMD_Bus_Write+0x28>
 186:	8b e0       	ldi	r24, 0x0B	; 11
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <CMD_Bus_Req_Ack>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
    if(CMD_Bus_HandShake() == INVALID_PEER)
 194:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	71 f0       	breq	.+28     	; 0x1b8 <CMD_Bus_Req_Ack+0x2a>
        return PEER_UNAVAILABLE;
    else 
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 19c:	0e 94 86 03 	call	0x70c	; 0x70c <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Ack_Req_Response = SPI_Transiver(REQUEST_ACK);
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 9d 03 	call	0x73a	; 0x73a <SPI_Transiver>
 1a6:	88 83       	st	Y, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 1a8:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
 1ac:	88 81       	ld	r24, Y
 1ae:	87 50       	subi	r24, 0x07	; 7
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	20 f4       	brcc	.+8      	; 0x1bc <CMD_Bus_Req_Ack+0x2e>
            return RECEIVED;
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <CMD_Bus_Req_Ack+0x30>
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
    if(CMD_Bus_HandShake() == INVALID_PEER)
        return PEER_UNAVAILABLE;
 1b8:	8b e0       	ldi	r24, 0x0B	; 11
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <CMD_Bus_Req_Ack+0x30>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
            return RECEIVED;
        else 
            return INVALID_ACK_RESPONSE;
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
    }
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <Comm_Bridge_Init>:
{
#if ECU_ROLE == CONTROL_ECU
    Bluetooth_Mod_Tx(ECU_PUID);
    Bluetooth_Mod_Seq_Tx(data_stream);
#endif /* ECU_ROLE */
}
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <Comm_Bridge_Init+0xe>
 1ca:	6e e0       	ldi	r22, 0x0E	; 14
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 1d2:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1d6:	88 23       	and	r24, r24
 1d8:	c1 f3       	breq	.-16     	; 0x1ca <Comm_Bridge_Init+0x6>
 1da:	6f e0       	ldi	r22, 0x0F	; 15
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 1e2:	0e 94 ad 00 	call	0x15a	; 0x15a <CMD_Bus_Master_Init>
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <Comm_Bridge_Init+0x2c>
 1e8:	6c e0       	ldi	r22, 0x0C	; 12
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 1f0:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c1 f3       	breq	.-16     	; 0x1e8 <Comm_Bridge_Init+0x24>
 1f8:	6d e0       	ldi	r22, 0x0D	; 13
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 200:	08 95       	ret

00000202 <Comm_Bridge_BT_Read>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
 208:	04 c0       	rjmp	.+8      	; 0x212 <Comm_Bridge_BT_Read+0x10>
 20a:	6e e0       	ldi	r22, 0x0E	; 14
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 212:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 216:	88 23       	and	r24, r24
 218:	c1 f3       	breq	.-16     	; 0x20a <Comm_Bridge_BT_Read+0x8>
 21a:	61 e1       	ldi	r22, 0x11	; 17
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 222:	ce 01       	movw	r24, r28
 224:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Rx>
 228:	88 81       	ld	r24, Y
 22a:	88 3a       	cpi	r24, 0xA8	; 168
 22c:	59 f4       	brne	.+22     	; 0x244 <Comm_Bridge_BT_Read+0x42>
 22e:	66 e0       	ldi	r22, 0x06	; 6
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 83       	st	Y, r24
 23a:	62 e1       	ldi	r22, 0x12	; 18
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 242:	05 c0       	rjmp	.+10     	; 0x24e <Comm_Bridge_BT_Read+0x4c>
 244:	6c e2       	ldi	r22, 0x2C	; 44
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 24c:	e6 cf       	rjmp	.-52     	; 0x21a <Comm_Bridge_BT_Read+0x18>
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <Comm_Bridge_BT_Send>:
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
 258:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 25c:	c8 30       	cpi	r28, 0x08	; 8
 25e:	29 f4       	brne	.+10     	; 0x26a <Comm_Bridge_BT_Send+0x16>
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 268:	0b c0       	rjmp	.+22     	; 0x280 <Comm_Bridge_BT_Send+0x2c>
 26a:	ca 30       	cpi	r28, 0x0A	; 10
 26c:	29 f4       	brne	.+10     	; 0x278 <Comm_Bridge_BT_Send+0x24>
 26e:	63 e1       	ldi	r22, 0x13	; 19
 270:	88 e0       	ldi	r24, 0x08	; 8
 272:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 276:	04 c0       	rjmp	.+8      	; 0x280 <Comm_Bridge_BT_Send+0x2c>
 278:	64 e1       	ldi	r22, 0x14	; 20
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <Comm_Bridge_CMD_Req>:
* Outputs: ...
* Returns: ...
* Author: Mark Fayez
**/
uint8 Comm_Bridge_CMD_Req(uint8* Request_Command)
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	1f 92       	push	r1
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	8c 01       	movw	r16, r24
#if ECU_ROLE == CONTROL_ECU
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
 294:	8a e0       	ldi	r24, 0x0A	; 10
 296:	89 83       	std	Y+1, r24	; 0x01
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 298:	f8 01       	movw	r30, r16
 29a:	80 81       	ld	r24, Z
 29c:	0e 94 b0 00 	call	0x160	; 0x160 <CMD_Bus_Write>
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <Comm_Bridge_CMD_Req+0x40>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 2a2:	65 e1       	ldi	r22, 0x15	; 21
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>

        ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 2aa:	f8 01       	movw	r30, r16
 2ac:	80 81       	ld	r24, Z
 2ae:	0e 94 b0 00 	call	0x160	; 0x160 <CMD_Bus_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	ff ef       	ldi	r31, 0xFF	; 255
 2b4:	26 e7       	ldi	r18, 0x76	; 118
 2b6:	31 e0       	ldi	r19, 0x01	; 1
 2b8:	f1 50       	subi	r31, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	30 40       	sbci	r19, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <Comm_Bridge_CMD_Req+0x34>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <Comm_Bridge_CMD_Req+0x3e>
 2c2:	00 00       	nop
#if ECU_ROLE == CONTROL_ECU
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 2c4:	8b 30       	cpi	r24, 0x0B	; 11
 2c6:	69 f3       	breq	.-38     	; 0x2a2 <Comm_Bridge_CMD_Req+0x1e>
        Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);

        return SEND_FAILED;
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	09 f0       	breq	.+2      	; 0x2ce <Comm_Bridge_CMD_Req+0x4a>
 2cc:	48 c0       	rjmp	.+144    	; 0x35e <Comm_Bridge_CMD_Req+0xda>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	97 ea       	ldi	r25, 0xA7	; 167
 2d2:	e1 e6       	ldi	r30, 0x61	; 97
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e0 40       	sbci	r30, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <Comm_Bridge_CMD_Req+0x50>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <Comm_Bridge_CMD_Req+0x5a>
 2de:	00 00       	nop

    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	0e 94 c7 00 	call	0x18e	; 0x18e <CMD_Bus_Req_Ack>
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 2e8:	11 c0       	rjmp	.+34     	; 0x30c <Comm_Bridge_CMD_Req+0x88>
    {
        if(Ack_Validity == PEER_UNAVAILABLE)
 2ea:	8b 30       	cpi	r24, 0x0B	; 11
 2ec:	29 f4       	brne	.+10     	; 0x2f8 <Comm_Bridge_CMD_Req+0x74>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 2ee:	65 e1       	ldi	r22, 0x15	; 21
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 2f6:	06 c0       	rjmp	.+12     	; 0x304 <Comm_Bridge_CMD_Req+0x80>
        }
        else if (Ack_Validity == INVALID_ACK_RESPONSE)
 2f8:	8a 30       	cpi	r24, 0x0A	; 10
 2fa:	21 f4       	brne	.+8      	; 0x304 <Comm_Bridge_CMD_Req+0x80>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Invalid Response'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
 2fc:	67 e1       	ldi	r22, 0x17	; 23
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	0e 94 c7 00 	call	0x18e	; 0x18e <CMD_Bus_Req_Ack>
    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 30c:	96 ef       	ldi	r25, 0xF6	; 246
 30e:	98 0f       	add	r25, r24
 310:	92 30       	cpi	r25, 0x02	; 2
 312:	58 f3       	brcs	.-42     	; 0x2ea <Comm_Bridge_CMD_Req+0x66>
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    }
    if(Ack_Response == ACK_RES)
 314:	19 81       	ldd	r17, Y+1	; 0x01
 316:	18 30       	cpi	r17, 0x08	; 8
 318:	29 f4       	brne	.+10     	; 0x324 <Comm_Bridge_CMD_Req+0xa0>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Request Done!' ''
        Status_Disp_LCD(LCD_ROW_TXT_REQUEST_DONE,LCD_ROW_TXT_NONE);
 31a:	6c e2       	ldi	r22, 0x2C	; 44
 31c:	87 e0       	ldi	r24, 0x07	; 7
 31e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>

        return REQ_DONE;
 322:	20 c0       	rjmp	.+64     	; 0x364 <Comm_Bridge_CMD_Req+0xe0>
    }
    else if(Ack_Response == NACK_RES)
 324:	17 30       	cpi	r17, 0x07	; 7
 326:	e9 f4       	brne	.+58     	; 0x362 <Comm_Bridge_CMD_Req+0xde>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);
 328:	68 e1       	ldi	r22, 0x18	; 24
 32a:	8a e0       	ldi	r24, 0x0A	; 10
 32c:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 330:	89 e0       	ldi	r24, 0x09	; 9
 332:	0e 94 b0 00 	call	0x160	; 0x160 <CMD_Bus_Write>
 336:	89 83       	std	Y+1, r24	; 0x01
        while(Ack_Response == PEER_UNAVAILABLE)
 338:	0e c0       	rjmp	.+28     	; 0x356 <Comm_Bridge_CMD_Req+0xd2>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 33a:	65 e1       	ldi	r22, 0x15	; 21
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>

            Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 342:	89 e0       	ldi	r24, 0x09	; 9
 344:	0e 94 b0 00 	call	0x160	; 0x160 <CMD_Bus_Write>
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	8f e3       	ldi	r24, 0x3F	; 63
 34c:	9c e9       	ldi	r25, 0x9C	; 156
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <Comm_Bridge_CMD_Req+0xca>
 352:	00 c0       	rjmp	.+0      	; 0x354 <Comm_Bridge_CMD_Req+0xd0>
 354:	00 00       	nop
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
        while(Ack_Response == PEER_UNAVAILABLE)
 356:	19 81       	ldd	r17, Y+1	; 0x01
 358:	1b 30       	cpi	r17, 0x0B	; 11
 35a:	79 f3       	breq	.-34     	; 0x33a <Comm_Bridge_CMD_Req+0xb6>
 35c:	03 c0       	rjmp	.+6      	; 0x364 <Comm_Bridge_CMD_Req+0xe0>
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
        return SEND_FAILED;
 35e:	17 e0       	ldi	r17, 0x07	; 7
 360:	01 c0       	rjmp	.+2      	; 0x364 <Comm_Bridge_CMD_Req+0xe0>
        
        // Return the received code (reason for NACK) - as it is - to caller function
        return Ack_Response;
    }
    else
        return OUT_OF_SYNC;
 362:	1c e0       	ldi	r17, 0x0C	; 12
#endif	/* ECU_ROLE */
}
 364:	81 2f       	mov	r24, r17
 366:	0f 90       	pop	r0
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 372:	fc 01       	movw	r30, r24
 374:	94 2f       	mov	r25, r20
 376:	81 81       	ldd	r24, Z+1	; 0x01
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	9a 01       	movw	r18, r20
 37e:	06 2e       	mov	r0, r22
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinDir+0x14>
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinDir+0x10>
 38a:	32 2f       	mov	r19, r18
 38c:	30 95       	com	r19
 38e:	83 23       	and	r24, r19
 390:	81 83       	std	Z+1, r24	; 0x01
 392:	81 81       	ldd	r24, Z+1	; 0x01
 394:	49 2f       	mov	r20, r25
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinDir+0x2c>
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinDir+0x28>
 3a2:	42 23       	and	r20, r18
 3a4:	48 2b       	or	r20, r24
 3a6:	41 83       	std	Z+1, r20	; 0x01
 3a8:	08 95       	ret

000003aa <DIO_SetPinValue>:
 3aa:	fc 01       	movw	r30, r24
 3ac:	94 2f       	mov	r25, r20
 3ae:	82 81       	ldd	r24, Z+2	; 0x02
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	9a 01       	movw	r18, r20
 3b6:	06 2e       	mov	r0, r22
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_SetPinValue+0x14>
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	0a 94       	dec	r0
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_SetPinValue+0x10>
 3c2:	32 2f       	mov	r19, r18
 3c4:	30 95       	com	r19
 3c6:	83 23       	and	r24, r19
 3c8:	82 83       	std	Z+2, r24	; 0x02
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	49 2f       	mov	r20, r25
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_SetPinValue+0x2c>
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_SetPinValue+0x28>
 3da:	42 23       	and	r20, r18
 3dc:	48 2b       	or	r20, r24
 3de:	42 83       	std	Z+2, r20	; 0x02
 3e0:	08 95       	ret

000003e2 <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_ReadPinValue+0xc>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_ReadPinValue+0x8>
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	fa 01       	movw	r30, r20
 3f6:	80 83       	st	Z, r24
 3f8:	08 95       	ret

000003fa <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 3fa:	cf 93       	push	r28
 3fc:	c8 2f       	mov	r28, r24
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	86 e3       	ldi	r24, 0x36	; 54
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	86 e3       	ldi	r24, 0x36	; 54
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	86 e3       	ldi	r24, 0x36	; 54
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 422:	8b b3       	in	r24, 0x1b	; 27
 424:	9c 2f       	mov	r25, r28
 426:	90 7f       	andi	r25, 0xF0	; 240
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	89 2b       	or	r24, r25
 42c:	8b bb       	out	0x1b, r24	; 27
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	63 e0       	ldi	r22, 0x03	; 3
 432:	86 e3       	ldi	r24, 0x36	; 54
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 43a:	8f e9       	ldi	r24, 0x9F	; 159
 43c:	9f e0       	ldi	r25, 0x0F	; 15
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	86 e3       	ldi	r24, 0x36	; 54
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 452:	20 e1       	ldi	r18, 0x10	; 16
 454:	c2 9f       	mul	r28, r18
 456:	c0 01       	movw	r24, r0
 458:	11 24       	eor	r1, r1
 45a:	9b b3       	in	r25, 0x1b	; 27
 45c:	9f 70       	andi	r25, 0x0F	; 15
 45e:	89 2b       	or	r24, r25
 460:	8b bb       	out	0x1b, r24	; 27
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	86 e3       	ldi	r24, 0x36	; 54
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 46e:	8f e9       	ldi	r24, 0x9F	; 159
 470:	9f e0       	ldi	r25, 0x0F	; 15
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	86 e3       	ldi	r24, 0x36	; 54
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 486:	8f e1       	ldi	r24, 0x1F	; 31
 488:	9e e4       	ldi	r25, 0x4E	; 78
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCD_Init>:
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	86 e3       	ldi	r24, 0x36	; 54
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4a2:	41 e0       	ldi	r20, 0x01	; 1
 4a4:	62 e0       	ldi	r22, 0x02	; 2
 4a6:	86 e3       	ldi	r24, 0x36	; 54
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	86 e3       	ldi	r24, 0x36	; 54
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	64 e0       	ldi	r22, 0x04	; 4
 4be:	89 e3       	ldi	r24, 0x39	; 57
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	65 e0       	ldi	r22, 0x05	; 5
 4ca:	89 e3       	ldi	r24, 0x39	; 57
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	66 e0       	ldi	r22, 0x06	; 6
 4d6:	89 e3       	ldi	r24, 0x39	; 57
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	67 e0       	ldi	r22, 0x07	; 7
 4e2:	89 e3       	ldi	r24, 0x39	; 57
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	81 ee       	ldi	r24, 0xE1	; 225
 4ee:	94 e0       	ldi	r25, 0x04	; 4
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <LCD_Init+0x5a>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_Init+0x64>
 4fa:	00 00       	nop
 4fc:	83 e3       	ldi	r24, 0x33	; 51
 4fe:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 502:	82 e3       	ldi	r24, 0x32	; 50
 504:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 508:	88 e2       	ldi	r24, 0x28	; 40
 50a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 50e:	8c e0       	ldi	r24, 0x0C	; 12
 510:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 51a:	86 e0       	ldi	r24, 0x06	; 6
 51c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 526:	08 95       	ret

00000528 <LCD_WriteChar>:
 528:	cf 93       	push	r28
 52a:	c8 2f       	mov	r28, r24
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	86 e3       	ldi	r24, 0x36	; 54
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 538:	40 e0       	ldi	r20, 0x00	; 0
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	86 e3       	ldi	r24, 0x36	; 54
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	86 e3       	ldi	r24, 0x36	; 54
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 550:	8b b3       	in	r24, 0x1b	; 27
 552:	9c 2f       	mov	r25, r28
 554:	90 7f       	andi	r25, 0xF0	; 240
 556:	8f 70       	andi	r24, 0x0F	; 15
 558:	89 2b       	or	r24, r25
 55a:	8b bb       	out	0x1b, r24	; 27
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	63 e0       	ldi	r22, 0x03	; 3
 560:	86 e3       	ldi	r24, 0x36	; 54
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 568:	8f e9       	ldi	r24, 0x9F	; 159
 56a:	9f e0       	ldi	r25, 0x0F	; 15
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <LCD_WriteChar+0x44>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LCD_WriteChar+0x4a>
 572:	00 00       	nop
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	63 e0       	ldi	r22, 0x03	; 3
 578:	86 e3       	ldi	r24, 0x36	; 54
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 580:	20 e1       	ldi	r18, 0x10	; 16
 582:	c2 9f       	mul	r28, r18
 584:	c0 01       	movw	r24, r0
 586:	11 24       	eor	r1, r1
 588:	9b b3       	in	r25, 0x1b	; 27
 58a:	9f 70       	andi	r25, 0x0F	; 15
 58c:	89 2b       	or	r24, r25
 58e:	8b bb       	out	0x1b, r24	; 27
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	63 e0       	ldi	r22, 0x03	; 3
 594:	86 e3       	ldi	r24, 0x36	; 54
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 59c:	8f e9       	ldi	r24, 0x9F	; 159
 59e:	9f e0       	ldi	r25, 0x0F	; 15
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_WriteChar+0x78>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_WriteChar+0x7e>
 5a6:	00 00       	nop
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	86 e3       	ldi	r24, 0x36	; 54
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 5b4:	8f e1       	ldi	r24, 0x1F	; 31
 5b6:	9e e4       	ldi	r25, 0x4E	; 78
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_WriteChar+0x90>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCD_WriteChar+0x96>
 5be:	00 00       	nop
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 5c4:	0f 93       	push	r16
 5c6:	1f 93       	push	r17
 5c8:	cf 93       	push	r28
 5ca:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 5d0:	0e 94 94 02 	call	0x528	; 0x528 <LCD_WriteChar>
		Str_count++;
 5d4:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 5d6:	f8 01       	movw	r30, r16
 5d8:	ec 0f       	add	r30, r28
 5da:	f1 1d       	adc	r31, r1
 5dc:	80 81       	ld	r24, Z
 5de:	81 11       	cpse	r24, r1
 5e0:	f7 cf       	rjmp	.-18     	; 0x5d0 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	08 95       	ret

000005ea <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <LCD_GoToLocation+0x6>
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 5f4:	90 e8       	ldi	r25, 0x80	; 128
 5f6:	99 83       	std	Y+1, r25	; 0x01
 5f8:	90 ec       	ldi	r25, 0xC0	; 192
 5fa:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 5fc:	e1 e0       	ldi	r30, 0x01	; 1
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ec 0f       	add	r30, r28
 602:	fd 1f       	adc	r31, r29
 604:	e8 0f       	add	r30, r24
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	86 0f       	add	r24, r22
 60c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
	
}
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_WriteCommand>
 620:	08 95       	ret

00000622 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 622:	0e 94 43 03 	call	0x686	; 0x686 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 626:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Smart_Home_Run>
 62a:	fd cf       	rjmp	.-6      	; 0x626 <main+0x4>

0000062c <Smart_Home_User_Selection>:


static void Smart_Home_User_Selection(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Comm_Bridge_BT_Read(User_Selection);
 62c:	80 e3       	ldi	r24, 0x30	; 48
 62e:	93 e0       	ldi	r25, 0x03	; 3
 630:	0e 94 01 01 	call	0x202	; 0x202 <Comm_Bridge_BT_Read>

		Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 634:	6c e2       	ldi	r22, 0x2C	; 44
 636:	8b e1       	ldi	r24, 0x1B	; 27
 638:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 63c:	08 95       	ret

0000063e <Smart_Home_Process_N_Respond>:
		#endif /* COMMAND_BYTE_LENGTH */
	#endif /* ECU_ROLE */
}
#if ECU_ROLE == CONTROL_ECU
static void Smart_Home_Process_N_Respond(void)
{
 63e:	cf 93       	push	r28
	uint8 Selection_Validity = SEND_FAILED;
	
	Selection_Validity = Comm_Bridge_CMD_Req(User_Selection);
 640:	80 e3       	ldi	r24, 0x30	; 48
 642:	93 e0       	ldi	r25, 0x03	; 3
 644:	0e 94 42 01 	call	0x284	; 0x284 <Comm_Bridge_CMD_Req>
 648:	c8 2f       	mov	r28, r24
	
	if(Selection_Validity == REQ_DONE)
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	29 f4       	brne	.+10     	; 0x658 <Smart_Home_Process_N_Respond+0x1a>
	{
		Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 64e:	68 e2       	ldi	r22, 0x28	; 40
 650:	87 e2       	ldi	r24, 0x27	; 39
 652:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 656:	12 c0       	rjmp	.+36     	; 0x67c <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_DEV_SEL)
 658:	8a 30       	cpi	r24, 0x0A	; 10
 65a:	29 f4       	brne	.+10     	; 0x666 <Smart_Home_Process_N_Respond+0x28>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 65c:	63 e1       	ldi	r22, 0x13	; 19
 65e:	89 e2       	ldi	r24, 0x29	; 41
 660:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 664:	0b c0       	rjmp	.+22     	; 0x67c <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_OP_SEL)
 666:	8b 30       	cpi	r24, 0x0B	; 11
 668:	29 f4       	brne	.+10     	; 0x674 <Smart_Home_Process_N_Respond+0x36>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 66a:	64 e1       	ldi	r22, 0x14	; 20
 66c:	89 e2       	ldi	r24, 0x29	; 41
 66e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 672:	04 c0       	rjmp	.+8      	; 0x67c <Smart_Home_Process_N_Respond+0x3e>
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 674:	66 e1       	ldi	r22, 0x16	; 22
 676:	8b e2       	ldi	r24, 0x2B	; 43
 678:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
	}
	
	Comm_Bridge_BT_Send(Selection_Validity);
 67c:	8c 2f       	mov	r24, r28
 67e:	0e 94 2a 01 	call	0x254	; 0x254 <Comm_Bridge_BT_Send>
}
 682:	cf 91       	pop	r28
 684:	08 95       	ret

00000686 <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 686:	0e 94 b4 03 	call	0x768	; 0x768 <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 68a:	6b e0       	ldi	r22, 0x0B	; 11
 68c:	84 e2       	ldi	r24, 0x24	; 36
 68e:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 692:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 696:	6e e1       	ldi	r22, 0x1E	; 30
 698:	84 e2       	ldi	r24, 0x24	; 36
 69a:	0e 94 b7 03 	call	0x76e	; 0x76e <Status_Disp_LCD>
 69e:	08 95       	ret

000006a0 <Smart_Home_Run>:
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
 6a0:	0e 94 16 03 	call	0x62c	; 0x62c <Smart_Home_User_Selection>
		Smart_Home_Process_N_Respond();
 6a4:	0e 94 1f 03 	call	0x63e	; 0x63e <Smart_Home_Process_N_Respond>
 6a8:	08 95       	ret

000006aa <SPI_Master_Init>:
#include "SPI.h"

void SPI_Master_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
 6aa:	40 e0       	ldi	r20, 0x00	; 0
 6ac:	66 e0       	ldi	r22, 0x06	; 6
 6ae:	86 e3       	ldi	r24, 0x36	; 54
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	65 e0       	ldi	r22, 0x05	; 5
 6ba:	86 e3       	ldi	r24, 0x36	; 54
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	67 e0       	ldi	r22, 0x07	; 7
 6c6:	86 e3       	ldi	r24, 0x36	; 54
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	64 e0       	ldi	r22, 0x04	; 4
 6d2:	86 e3       	ldi	r24, 0x36	; 54
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 6da:	8d b1       	in	r24, 0x0d	; 13
 6dc:	84 61       	ori	r24, 0x14	; 20
 6de:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 6e0:	8d b1       	in	r24, 0x0d	; 13
 6e2:	83 60       	ori	r24, 0x03	; 3
 6e4:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 6e6:	8d b1       	in	r24, 0x0d	; 13
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	64 e0       	ldi	r22, 0x04	; 4
 6f0:	86 e3       	ldi	r24, 0x36	; 54
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	86 e7       	ldi	r24, 0x76	; 118
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <SPI_Master_Init+0x54>
 706:	00 c0       	rjmp	.+0      	; 0x708 <SPI_Master_Init+0x5e>
 708:	00 00       	nop
 70a:	08 95       	ret

0000070c <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	64 e0       	ldi	r22, 0x04	; 4
 710:	86 e3       	ldi	r24, 0x36	; 54
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	86 e7       	ldi	r24, 0x76	; 118
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <SPI_Master_InitTrans+0x12>
 726:	00 c0       	rjmp	.+0      	; 0x728 <SPI_Master_InitTrans+0x1c>
 728:	00 00       	nop
 72a:	08 95       	ret

0000072c <SPI_Master_TermTrans>:
}

void SPI_Master_TermTrans(void)
{
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	64 e0       	ldi	r22, 0x04	; 4
 730:	86 e3       	ldi	r24, 0x36	; 54
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_SetPinValue>
 738:	08 95       	ret

0000073a <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 73a:	cf 93       	push	r28
 73c:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	uint16 Trans_N_Started_counter = 1;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 73e:	0e 94 86 03 	call	0x70c	; 0x70c <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 742:	cf b9       	out	0x0f, r28	; 15
}

uint8 SPI_Transiver(uint8 data)
{
	uint8 Received_Data = 0;
	uint16 Trans_N_Started_counter = 1;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 748:	01 c0       	rjmp	.+2      	; 0x74c <SPI_Transiver+0x12>
			Trans_N_Started_counter++;
 74a:	01 96       	adiw	r24, 0x01	; 1
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 74c:	77 99       	sbic	0x0e, 7	; 14
 74e:	02 c0       	rjmp	.+4      	; 0x754 <SPI_Transiver+0x1a>
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	d9 f7       	brne	.-10     	; 0x74a <SPI_Transiver+0x10>
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
 754:	89 2b       	or	r24, r25
 756:	11 f0       	breq	.+4      	; 0x75c <SPI_Transiver+0x22>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
 758:	cf b1       	in	r28, 0x0f	; 15
 75a:	01 c0       	rjmp	.+2      	; 0x75e <SPI_Transiver+0x24>
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
			Received_Data = TRANS_FAILED;
 75c:	c0 e0       	ldi	r28, 0x00	; 0
		else
			Received_Data = SPI->SPDR;

		SPI_Master_TermTrans();
 75e:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_TermTrans>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
	#endif /* SPI_ROLE */
	return Received_Data;
}
 762:	8c 2f       	mov	r24, r28
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <Status_FollowUp_Init>:
    "Invalid Operation Requested!"
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 768:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_Init>
 76c:	08 95       	ret

0000076e <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	d8 2f       	mov	r29, r24
 774:	c6 2f       	mov	r28, r22
    LCD_Clear();
 776:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 77a:	20 e1       	ldi	r18, 0x10	; 16
 77c:	d2 9f       	mul	r29, r18
 77e:	c0 01       	movw	r24, r0
 780:	11 24       	eor	r1, r1
 782:	80 5a       	subi	r24, 0xA0	; 160
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 792:	20 e1       	ldi	r18, 0x10	; 16
 794:	c2 9f       	mul	r28, r18
 796:	c0 01       	movw	r24, r0
 798:	11 24       	eor	r1, r1
 79a:	80 5a       	subi	r24, 0xA0	; 160
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_WriteString>
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	96 e1       	ldi	r25, 0x16	; 22
 7a6:	21 e1       	ldi	r18, 0x11	; 17
 7a8:	81 50       	subi	r24, 0x01	; 1
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	20 40       	sbci	r18, 0x00	; 0
 7ae:	e1 f7       	brne	.-8      	; 0x7a8 <Status_Disp_LCD+0x3a>
 7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <Status_Disp_LCD+0x44>
 7b2:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <UART_Init>:


void UART_Init(void)
{
	// Set Tx Pin as output & Rx Pin as input
	DIO_SetPinDir(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	80 e3       	ldi	r24, 0x30	; 48
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	DIO_SetPinDir(UART_PORT,UART_RX_PIN, DIO_PIN_INPUT);
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	80 e3       	ldi	r24, 0x30	; 48
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_SetPinDir>
	
	// enable Tx and Rx
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 7d2:	8a b1       	in	r24, 0x0a	; 10
 7d4:	88 61       	ori	r24, 0x18	; 24
 7d6:	8a b9       	out	0x0a, r24	; 10
	
	// Choose UCSRC Register then set data size to be 8 bits
	UCSRC |= (1<<UCSRC_URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 7d8:	80 b5       	in	r24, 0x20	; 32
 7da:	86 68       	ori	r24, 0x86	; 134
 7dc:	80 bd       	out	0x20, r24	; 32
	
	// Set Baud Rate
	UBRRL = ( UART_Clk_Sor / (UART_Presc * Baud_Rate_Hundred) ) - 1;
 7de:	89 e1       	ldi	r24, 0x19	; 25
 7e0:	89 b9       	out	0x09, r24	; 9
 7e2:	08 95       	ret

000007e4 <UART_Tx>:
}

void UART_Tx(uint8 data)
{
	UDR = data;
 7e4:	8c b9       	out	0x0c, r24	; 12
	while ( GetBit(UCSRA,TXCIE) == UART_Flag_Down );
 7e6:	5e 9b       	sbis	0x0b, 6	; 11
 7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <UART_Tx+0x2>
	ClearBit(UCSRA,TXCIE);
 7ea:	8b b1       	in	r24, 0x0b	; 11
 7ec:	8f 7b       	andi	r24, 0xBF	; 191
 7ee:	8b b9       	out	0x0b, r24	; 11
 7f0:	08 95       	ret

000007f2 <UART_Rx>:
}

uint8 UART_Rx(void)
{
	while (GetBit(UCSRA,RXCIE) == UART_Flag_Down);
 7f2:	5f 9b       	sbis	0x0b, 7	; 11
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <UART_Rx>
	ClearBit(UCSRA,RXCIE);
 7f6:	8b b1       	in	r24, 0x0b	; 11
 7f8:	8f 77       	andi	r24, 0x7F	; 127
 7fa:	8b b9       	out	0x0b, r24	; 11
	return UDR;
 7fc:	8c b1       	in	r24, 0x0c	; 12
}
 7fe:	08 95       	ret

00000800 <_exit>:
 800:	f8 94       	cli

00000802 <__stop_program>:
 802:	ff cf       	rjmp	.-2      	; 0x802 <__stop_program>
