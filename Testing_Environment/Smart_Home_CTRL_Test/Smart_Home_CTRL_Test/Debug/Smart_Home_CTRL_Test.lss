
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000302  00800060  00000846  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800362  00800362  00000bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e73  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010af  00000000  00000000  00003d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001520  00000000  00000000  00004e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000634c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f54  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001416  00000000  00000000  000078ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 03 	call	0x650	; 0x650 <main>
  8a:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    UART_TxString(Data_Stream);
}
  92:	0e 94 fe 03 	call	0x7fc	; 0x7fc <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 08 02 	call	0x410	; 0x410 <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 13 04 	call	0x826	; 0x826 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
    uint8 Data_byte_counter = 0;
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <Bluetooth_Mod_Seq_Rx+0xc>
  f4:	c0 e0       	ldi	r28, 0x00	; 0
    
    do
    {
        Data_Stream[Data_byte_counter] = UART_Rx();
  f6:	78 01       	movw	r14, r16
  f8:	ec 0e       	add	r14, r28
  fa:	f1 1c       	adc	r15, r1
  fc:	0e 94 1a 04 	call	0x834	; 0x834 <UART_Rx>
 100:	f7 01       	movw	r30, r14
 102:	80 83       	st	Z, r24
        Data_byte_counter++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
    }
    while(Data_Stream[Data_byte_counter-1] != BT_END_PACKET_CODE);
 106:	ec 2f       	mov	r30, r28
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 81       	ld	r24, Z
 112:	8d 30       	cpi	r24, 0x0D	; 13
 114:	81 f7       	brne	.-32     	; 0xf6 <Bluetooth_Mod_Seq_Rx+0x16>
    Data_Stream[Data_byte_counter-1] = 0x00;
 116:	10 82       	st	Z, r1
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	08 95       	ret

00000124 <CMD_Bus_HandShake>:

    if (Response == REQUEST_ACK)
        return DELIVERED;
    else 
        return INVALID_ACK_REQUEST;
}
 124:	cf 93       	push	r28
 126:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_Master_InitTrans>
 12a:	80 ea       	ldi	r24, 0xA0	; 160
 12c:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_Transiver>
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 c1 03 	call	0x782	; 0x782 <SPI_Master_TermTrans>
 136:	c0 3b       	cpi	r28, 0xB0	; 176
 138:	11 f4       	brne	.+4      	; 0x13e <CMD_Bus_HandShake+0x1a>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <CMD_Bus_HandShake+0x1c>
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <CMD_Bus_Master_Init>:
 144:	0e 94 80 03 	call	0x700	; 0x700 <SPI_Master_Init>
 148:	08 95       	ret

0000014a <CMD_Bus_Req_Ack>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	8c 01       	movw	r16, r24
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_Master_InitTrans>
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_Transiver>
 162:	f8 01       	movw	r30, r16
 164:	80 83       	st	Z, r24
 166:	0e 94 c1 03 	call	0x782	; 0x782 <SPI_Master_TermTrans>
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	f8 01       	movw	r30, r16
 16e:	80 81       	ld	r24, Z
 170:	88 50       	subi	r24, 0x08	; 8
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	10 f0       	brcs	.+4      	; 0x17a <CMD_Bus_Req_Ack+0x30>
 176:	20 97       	sbiw	r28, 0x00	; 0
 178:	79 f7       	brne	.-34     	; 0x158 <CMD_Bus_Req_Ack+0xe>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	10 f4       	brcc	.+4      	; 0x182 <CMD_Bus_Req_Ack+0x38>
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	01 c0       	rjmp	.+2      	; 0x184 <CMD_Bus_Req_Ack+0x3a>
 182:	8b e0       	ldi	r24, 0x0B	; 11
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <CMD_Bus_Req_Reason_NACK>:
 * Outputs: Received code (0x04) if a valid Ack_Response code was received ||OR|| Invalid NACK Reason code (0x11) if not
 * Returns: uint8 (code indicating the status of the requested process)
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Reason_NACK(uint8* Nack_Res_Reason)
{
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	8c 01       	movw	r16, r24
    uint16 Iteration_counter = 0;
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
    do
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 19c:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Nack_Res_Reason = SPI_Transiver(NACK_REASON_REQ);
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	0e 94 c8 03 	call	0x790	; 0x790 <SPI_Transiver>
 1a6:	f8 01       	movw	r30, r16
 1a8:	80 83       	st	Z, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 1aa:	0e 94 c1 03 	call	0x782	; 0x782 <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */

        Iteration_counter ++;
 1ae:	21 96       	adiw	r28, 0x01	; 1
    }
    while((*Nack_Res_Reason != INV_DEV_SEL) && (*Nack_Res_Reason != INV_OP_SEL) && (Iteration_counter != 0));
 1b0:	f8 01       	movw	r30, r16
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 50       	subi	r24, 0x0F	; 15
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	10 f0       	brcs	.+4      	; 0x1be <CMD_Bus_Req_Reason_NACK+0x30>
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	79 f7       	brne	.-34     	; 0x19c <CMD_Bus_Req_Reason_NACK+0xe>
    

    if ((*Nack_Res_Reason == INV_DEV_SEL) || (*Nack_Res_Reason == INV_OP_SEL))
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	10 f4       	brcc	.+4      	; 0x1c6 <CMD_Bus_Req_Reason_NACK+0x38>
        return RECEIVED;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <CMD_Bus_Req_Reason_NACK+0x3a>
    else 
        return INVALID_NACK_REASON;
 1c6:	81 e1       	ldi	r24, 0x11	; 17
    
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <Comm_Bridge_Init>:
 * Outputs: replace the Ack response value by OUT_OF_SYNC if end of function reached without being able to send the data.
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 1d2:	6e e0       	ldi	r22, 0x0E	; 14
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 1da:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1de:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1e2:	88 23       	and	r24, r24
 1e4:	e1 f3       	breq	.-8      	; 0x1de <Comm_Bridge_Init+0xc>
 1e6:	6f e0       	ldi	r22, 0x0F	; 15
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 1ee:	0e 94 a2 00 	call	0x144	; 0x144 <CMD_Bus_Master_Init>
 1f2:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	29 f4       	brne	.+10     	; 0x204 <Comm_Bridge_Init+0x32>
 1fa:	6c e0       	ldi	r22, 0x0C	; 12
 1fc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 200:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	f1 f3       	breq	.-4      	; 0x204 <Comm_Bridge_Init+0x32>
 208:	6d e0       	ldi	r22, 0x0D	; 13
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 210:	08 95       	ret

00000212 <Comm_Bridge_BT_Read>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ec 01       	movw	r28, r24
 218:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 21c:	81 11       	cpse	r24, r1
 21e:	04 c0       	rjmp	.+8      	; 0x228 <Comm_Bridge_BT_Read+0x16>
 220:	6e e0       	ldi	r22, 0x0E	; 14
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 228:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 22c:	88 23       	and	r24, r24
 22e:	e1 f3       	breq	.-8      	; 0x228 <Comm_Bridge_BT_Read+0x16>
 230:	61 e1       	ldi	r22, 0x11	; 17
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Rx>
 23e:	88 81       	ld	r24, Y
 240:	88 3a       	cpi	r24, 0xA8	; 168
 242:	31 f0       	breq	.+12     	; 0x250 <Comm_Bridge_BT_Read+0x3e>
 244:	6f e2       	ldi	r22, 0x2F	; 47
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	01 c0       	rjmp	.+2      	; 0x252 <Comm_Bridge_BT_Read+0x40>
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	8c 30       	cpi	r24, 0x0C	; 12
 254:	69 f3       	breq	.-38     	; 0x230 <Comm_Bridge_BT_Read+0x1e>
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	88 83       	st	Y, r24
 25a:	62 e1       	ldi	r22, 0x12	; 18
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <Comm_Bridge_BT_Send>:
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24
 26c:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 270:	c2 31       	cpi	r28, 0x12	; 18
 272:	29 f4       	brne	.+10     	; 0x27e <Comm_Bridge_BT_Send+0x16>
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 27c:	0b c0       	rjmp	.+22     	; 0x294 <Comm_Bridge_BT_Send+0x2c>
 27e:	cf 30       	cpi	r28, 0x0F	; 15
 280:	29 f4       	brne	.+10     	; 0x28c <Comm_Bridge_BT_Send+0x24>
 282:	63 e1       	ldi	r22, 0x13	; 19
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 28a:	04 c0       	rjmp	.+8      	; 0x294 <Comm_Bridge_BT_Send+0x2c>
 28c:	64 e1       	ldi	r22, 0x14	; 20
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <Comm_Bridge_CMD_Req>:
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	1f 92       	push	r1
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	7c 01       	movw	r14, r24
 2aa:	8b e0       	ldi	r24, 0x0B	; 11
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	87 ea       	ldi	r24, 0xA7	; 167
 2b2:	91 e6       	ldi	r25, 0x61	; 97
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <Comm_Bridge_CMD_Req+0x1c>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <Comm_Bridge_CMD_Req+0x26>
 2be:	00 00       	nop
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	0e 94 a5 00 	call	0x14a	; 0x14a <CMD_Bus_Req_Ack>
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	10 c0       	rjmp	.+32     	; 0x2ec <Comm_Bridge_CMD_Req+0x54>
 2cc:	19 30       	cpi	r17, 0x09	; 9
 2ce:	49 f4       	brne	.+18     	; 0x2e2 <Comm_Bridge_CMD_Req+0x4a>
 2d0:	8b 30       	cpi	r24, 0x0B	; 11
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <Comm_Bridge_CMD_Req+0x4a>
 2d4:	66 e1       	ldi	r22, 0x16	; 22
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 2dc:	83 e1       	ldi	r24, 0x13	; 19
 2de:	f7 01       	movw	r30, r14
 2e0:	81 83       	std	Z+1, r24	; 0x01
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	0e 94 a5 00 	call	0x14a	; 0x14a <CMD_Bus_Req_Ack>
 2ea:	1f 5f       	subi	r17, 0xFF	; 255
 2ec:	8b 30       	cpi	r24, 0x0B	; 11
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <Comm_Bridge_CMD_Req+0x5c>
 2f0:	1a 30       	cpi	r17, 0x0A	; 10
 2f2:	60 f3       	brcs	.-40     	; 0x2cc <Comm_Bridge_CMD_Req+0x34>
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	89 30       	cpi	r24, 0x09	; 9
 2f8:	41 f4       	brne	.+16     	; 0x30a <Comm_Bridge_CMD_Req+0x72>
 2fa:	6f e2       	ldi	r22, 0x2F	; 47
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 302:	82 e1       	ldi	r24, 0x12	; 18
 304:	f7 01       	movw	r30, r14
 306:	81 83       	std	Z+1, r24	; 0x01
 308:	27 c0       	rjmp	.+78     	; 0x358 <Comm_Bridge_CMD_Req+0xc0>
 30a:	88 30       	cpi	r24, 0x08	; 8
 30c:	11 f5       	brne	.+68     	; 0x352 <Comm_Bridge_CMD_Req+0xba>
 30e:	68 e1       	ldi	r22, 0x18	; 24
 310:	8a e0       	ldi	r24, 0x0A	; 10
 312:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 c7 00 	call	0x18e	; 0x18e <CMD_Bus_Req_Reason_NACK>
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	10 c0       	rjmp	.+32     	; 0x342 <Comm_Bridge_CMD_Req+0xaa>
 322:	19 30       	cpi	r17, 0x09	; 9
 324:	49 f4       	brne	.+18     	; 0x338 <Comm_Bridge_CMD_Req+0xa0>
 326:	81 31       	cpi	r24, 0x11	; 17
 328:	39 f4       	brne	.+14     	; 0x338 <Comm_Bridge_CMD_Req+0xa0>
 32a:	66 e1       	ldi	r22, 0x16	; 22
 32c:	89 e0       	ldi	r24, 0x09	; 9
 32e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 332:	83 e1       	ldi	r24, 0x13	; 19
 334:	f7 01       	movw	r30, r14
 336:	81 83       	std	Z+1, r24	; 0x01
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 c7 00 	call	0x18e	; 0x18e <CMD_Bus_Req_Reason_NACK>
 340:	1f 5f       	subi	r17, 0xFF	; 255
 342:	81 31       	cpi	r24, 0x11	; 17
 344:	11 f4       	brne	.+4      	; 0x34a <Comm_Bridge_CMD_Req+0xb2>
 346:	1a 30       	cpi	r17, 0x0A	; 10
 348:	60 f3       	brcs	.-40     	; 0x322 <Comm_Bridge_CMD_Req+0x8a>
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	f7 01       	movw	r30, r14
 34e:	81 83       	std	Z+1, r24	; 0x01
 350:	03 c0       	rjmp	.+6      	; 0x358 <Comm_Bridge_CMD_Req+0xc0>
 352:	83 e1       	ldi	r24, 0x13	; 19
 354:	f7 01       	movw	r30, r14
 356:	81 83       	std	Z+1, r24	; 0x01
 358:	0f 90       	pop	r0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	08 95       	ret

00000366 <Comm_Bridge_CMD_Bus_Re_Sync>:
 * Outputs: None
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Bus_Re_Sync(void)
{
 366:	cf 93       	push	r28
    uint8 Iteration_counter = 0;

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
 368:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	09 c0       	rjmp	.+18     	; 0x382 <Comm_Bridge_CMD_Bus_Re_Sync+0x1c>
    {
        if(ECUs_Comm_State == INVALID_PEER)
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	21 f4       	brne	.+8      	; 0x37c <Comm_Bridge_CMD_Bus_Re_Sync+0x16>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 374:	65 e1       	ldi	r22, 0x15	; 21
 376:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
            Iteration_counter = 0;
 37a:	c0 e0       	ldi	r28, 0x00	; 0
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
 37c:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 380:	cf 5f       	subi	r28, 0xFF	; 255
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	11 f4       	brne	.+4      	; 0x38a <Comm_Bridge_CMD_Bus_Re_Sync+0x24>
 386:	c8 30       	cpi	r28, 0x08	; 8
 388:	98 f3       	brcs	.-26     	; 0x370 <Comm_Bridge_CMD_Bus_Re_Sync+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	80 e7       	ldi	r24, 0x70	; 112
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <Comm_Bridge_CMD_Bus_Re_Sync+0x2a>
 398:	00 c0       	rjmp	.+0      	; 0x39a <Comm_Bridge_CMD_Bus_Re_Sync+0x34>
 39a:	00 00       	nop
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
    }

    _delay_ms(PRIOR_RE_SYNC_HANDSHAKES_DELAY_MS);
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 3a0:	fc 01       	movw	r30, r24
 3a2:	94 2f       	mov	r25, r20
 3a4:	81 81       	ldd	r24, Z+1	; 0x01
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	9a 01       	movw	r18, r20
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_SetPinDir+0x14>
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_SetPinDir+0x10>
 3b8:	32 2f       	mov	r19, r18
 3ba:	30 95       	com	r19
 3bc:	83 23       	and	r24, r19
 3be:	81 83       	std	Z+1, r24	; 0x01
 3c0:	81 81       	ldd	r24, Z+1	; 0x01
 3c2:	49 2f       	mov	r20, r25
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinDir+0x2c>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinDir+0x28>
 3d0:	42 23       	and	r20, r18
 3d2:	48 2b       	or	r20, r24
 3d4:	41 83       	std	Z+1, r20	; 0x01
 3d6:	08 95       	ret

000003d8 <DIO_SetPinValue>:
 3d8:	fc 01       	movw	r30, r24
 3da:	94 2f       	mov	r25, r20
 3dc:	82 81       	ldd	r24, Z+2	; 0x02
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	9a 01       	movw	r18, r20
 3e4:	06 2e       	mov	r0, r22
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_SetPinValue+0x14>
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_SetPinValue+0x10>
 3f0:	32 2f       	mov	r19, r18
 3f2:	30 95       	com	r19
 3f4:	83 23       	and	r24, r19
 3f6:	82 83       	std	Z+2, r24	; 0x02
 3f8:	82 81       	ldd	r24, Z+2	; 0x02
 3fa:	49 2f       	mov	r20, r25
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	42 23       	and	r20, r18
 40a:	48 2b       	or	r20, r24
 40c:	42 83       	std	Z+2, r20	; 0x02
 40e:	08 95       	ret

00000410 <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_ReadPinValue+0xc>
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_ReadPinValue+0x8>
 420:	81 70       	andi	r24, 0x01	; 1
 422:	fa 01       	movw	r30, r20
 424:	80 83       	st	Z, r24
 426:	08 95       	ret

00000428 <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	86 e3       	ldi	r24, 0x36	; 54
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	86 e3       	ldi	r24, 0x36	; 54
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 450:	8b b3       	in	r24, 0x1b	; 27
 452:	9c 2f       	mov	r25, r28
 454:	90 7f       	andi	r25, 0xF0	; 240
 456:	8f 70       	andi	r24, 0x0F	; 15
 458:	89 2b       	or	r24, r25
 45a:	8b bb       	out	0x1b, r24	; 27
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	86 e3       	ldi	r24, 0x36	; 54
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 468:	8f e9       	ldi	r24, 0x9F	; 159
 46a:	9f e0       	ldi	r25, 0x0F	; 15
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_WriteCommand+0x44>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_WriteCommand+0x4a>
 472:	00 00       	nop
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	86 e3       	ldi	r24, 0x36	; 54
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 480:	20 e1       	ldi	r18, 0x10	; 16
 482:	c2 9f       	mul	r28, r18
 484:	c0 01       	movw	r24, r0
 486:	11 24       	eor	r1, r1
 488:	9b b3       	in	r25, 0x1b	; 27
 48a:	9f 70       	andi	r25, 0x0F	; 15
 48c:	89 2b       	or	r24, r25
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	63 e0       	ldi	r22, 0x03	; 3
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 49c:	8f e9       	ldi	r24, 0x9F	; 159
 49e:	9f e0       	ldi	r25, 0x0F	; 15
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_WriteCommand+0x78>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_WriteCommand+0x7e>
 4a6:	00 00       	nop
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	86 e3       	ldi	r24, 0x36	; 54
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 4b4:	8f e1       	ldi	r24, 0x1F	; 31
 4b6:	9e e4       	ldi	r25, 0x4E	; 78
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_WriteCommand+0x90>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_WriteCommand+0x96>
 4be:	00 00       	nop
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <LCD_Init>:
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	86 e3       	ldi	r24, 0x36	; 54
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	62 e0       	ldi	r22, 0x02	; 2
 4d4:	86 e3       	ldi	r24, 0x36	; 54
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	86 e3       	ldi	r24, 0x36	; 54
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	64 e0       	ldi	r22, 0x04	; 4
 4ec:	89 e3       	ldi	r24, 0x39	; 57
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	65 e0       	ldi	r22, 0x05	; 5
 4f8:	89 e3       	ldi	r24, 0x39	; 57
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	66 e0       	ldi	r22, 0x06	; 6
 504:	89 e3       	ldi	r24, 0x39	; 57
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	67 e0       	ldi	r22, 0x07	; 7
 510:	89 e3       	ldi	r24, 0x39	; 57
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
 518:	2f ef       	ldi	r18, 0xFF	; 255
 51a:	81 ee       	ldi	r24, 0xE1	; 225
 51c:	94 e0       	ldi	r25, 0x04	; 4
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <LCD_Init+0x5a>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_Init+0x64>
 528:	00 00       	nop
 52a:	83 e3       	ldi	r24, 0x33	; 51
 52c:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 530:	82 e3       	ldi	r24, 0x32	; 50
 532:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 536:	88 e2       	ldi	r24, 0x28	; 40
 538:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 53c:	8c e0       	ldi	r24, 0x0C	; 12
 53e:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 554:	08 95       	ret

00000556 <LCD_WriteChar>:
 556:	cf 93       	push	r28
 558:	c8 2f       	mov	r28, r24
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	86 e3       	ldi	r24, 0x36	; 54
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	62 e0       	ldi	r22, 0x02	; 2
 56a:	86 e3       	ldi	r24, 0x36	; 54
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	63 e0       	ldi	r22, 0x03	; 3
 576:	86 e3       	ldi	r24, 0x36	; 54
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 57e:	8b b3       	in	r24, 0x1b	; 27
 580:	9c 2f       	mov	r25, r28
 582:	90 7f       	andi	r25, 0xF0	; 240
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	89 2b       	or	r24, r25
 588:	8b bb       	out	0x1b, r24	; 27
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	86 e3       	ldi	r24, 0x36	; 54
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 596:	8f e9       	ldi	r24, 0x9F	; 159
 598:	9f e0       	ldi	r25, 0x0F	; 15
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_WriteChar+0x44>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_WriteChar+0x4a>
 5a0:	00 00       	nop
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	63 e0       	ldi	r22, 0x03	; 3
 5a6:	86 e3       	ldi	r24, 0x36	; 54
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 5ae:	20 e1       	ldi	r18, 0x10	; 16
 5b0:	c2 9f       	mul	r28, r18
 5b2:	c0 01       	movw	r24, r0
 5b4:	11 24       	eor	r1, r1
 5b6:	9b b3       	in	r25, 0x1b	; 27
 5b8:	9f 70       	andi	r25, 0x0F	; 15
 5ba:	89 2b       	or	r24, r25
 5bc:	8b bb       	out	0x1b, r24	; 27
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	63 e0       	ldi	r22, 0x03	; 3
 5c2:	86 e3       	ldi	r24, 0x36	; 54
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 5ca:	8f e9       	ldi	r24, 0x9F	; 159
 5cc:	9f e0       	ldi	r25, 0x0F	; 15
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <LCD_WriteChar+0x78>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <LCD_WriteChar+0x7e>
 5d4:	00 00       	nop
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	63 e0       	ldi	r22, 0x03	; 3
 5da:	86 e3       	ldi	r24, 0x36	; 54
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 5e2:	8f e1       	ldi	r24, 0x1F	; 31
 5e4:	9e e4       	ldi	r25, 0x4E	; 78
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_WriteChar+0x90>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_WriteChar+0x96>
 5ec:	00 00       	nop
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 5fa:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 5fe:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_WriteChar>
		Str_count++;
 602:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 604:	f8 01       	movw	r30, r16
 606:	ec 0f       	add	r30, r28
 608:	f1 1d       	adc	r31, r1
 60a:	80 81       	ld	r24, Z
 60c:	81 11       	cpse	r24, r1
 60e:	f7 cf       	rjmp	.-18     	; 0x5fe <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	00 d0       	rcall	.+0      	; 0x61e <LCD_GoToLocation+0x6>
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 622:	90 e8       	ldi	r25, 0x80	; 128
 624:	99 83       	std	Y+1, r25	; 0x01
 626:	90 ec       	ldi	r25, 0xC0	; 192
 628:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 62a:	e1 e0       	ldi	r30, 0x01	; 1
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	ec 0f       	add	r30, r28
 630:	fd 1f       	adc	r31, r29
 632:	e8 0f       	add	r30, r24
 634:	f1 1d       	adc	r31, r1
 636:	80 81       	ld	r24, Z
 638:	86 0f       	add	r24, r22
 63a:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
	
}
 63e:	0f 90       	pop	r0
 640:	0f 90       	pop	r0
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 14 02 	call	0x428	; 0x428 <LCD_WriteCommand>
 64e:	08 95       	ret

00000650 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 650:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 654:	0e 94 71 03 	call	0x6e2	; 0x6e2 <Smart_Home_Run>
 658:	fd cf       	rjmp	.-6      	; 0x654 <main+0x4>

0000065a <Smart_Home_User_Selection>:


static void Smart_Home_User_Selection(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Comm_Bridge_BT_Read(User_Selection);
 65a:	82 e6       	ldi	r24, 0x62	; 98
 65c:	93 e0       	ldi	r25, 0x03	; 3
 65e:	0e 94 09 01 	call	0x212	; 0x212 <Comm_Bridge_BT_Read>

		Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 662:	6f e2       	ldi	r22, 0x2F	; 47
 664:	8b e1       	ldi	r24, 0x1B	; 27
 666:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 66a:	08 95       	ret

0000066c <Smart_Home_Process_N_Respond>:
		}
	#endif /* ECU_ROLE */
}
#if ECU_ROLE == CONTROL_ECU
static void Smart_Home_Process_N_Respond(void)
{
 66c:	cf 93       	push	r28
	uint8 Selection_Validity = SEND_FAILED;

	Comm_Bridge_CMD_Req(User_Selection);
 66e:	82 e6       	ldi	r24, 0x62	; 98
 670:	93 e0       	ldi	r25, 0x03	; 3
 672:	0e 94 4c 01 	call	0x298	; 0x298 <Comm_Bridge_CMD_Req>

	Selection_Validity = User_Selection[RESPONSE_DATA_BYTE];
 676:	c0 91 63 03 	lds	r28, 0x0363	; 0x800363 <__data_end+0x1>
	
	if(Selection_Validity == REQ_DONE)
 67a:	c2 31       	cpi	r28, 0x12	; 18
 67c:	41 f4       	brne	.+16     	; 0x68e <Smart_Home_Process_N_Respond+0x22>
	{
		Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 67e:	68 e2       	ldi	r22, 0x28	; 40
 680:	87 e2       	ldi	r24, 0x27	; 39
 682:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
		Comm_Bridge_BT_Send(Selection_Validity);
 686:	8c 2f       	mov	r24, r28
 688:	0e 94 34 01 	call	0x268	; 0x268 <Comm_Bridge_BT_Send>
 68c:	1b c0       	rjmp	.+54     	; 0x6c4 <Smart_Home_Process_N_Respond+0x58>
	}
	else if(Selection_Validity == INV_DEV_SEL)
 68e:	cf 30       	cpi	r28, 0x0F	; 15
 690:	41 f4       	brne	.+16     	; 0x6a2 <Smart_Home_Process_N_Respond+0x36>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 692:	63 e1       	ldi	r22, 0x13	; 19
 694:	89 e2       	ldi	r24, 0x29	; 41
 696:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
		Comm_Bridge_BT_Send(Selection_Validity);
 69a:	8c 2f       	mov	r24, r28
 69c:	0e 94 34 01 	call	0x268	; 0x268 <Comm_Bridge_BT_Send>
 6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <Smart_Home_Process_N_Respond+0x58>
	}
	else if(Selection_Validity == INV_OP_SEL)
 6a2:	c0 31       	cpi	r28, 0x10	; 16
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <Smart_Home_Process_N_Respond+0x4a>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 6a6:	64 e1       	ldi	r22, 0x14	; 20
 6a8:	89 e2       	ldi	r24, 0x29	; 41
 6aa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
		Comm_Bridge_BT_Send(Selection_Validity);
 6ae:	8c 2f       	mov	r24, r28
 6b0:	0e 94 34 01 	call	0x268	; 0x268 <Comm_Bridge_BT_Send>
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <Smart_Home_Process_N_Respond+0x58>
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 6b6:	66 e1       	ldi	r22, 0x16	; 22
 6b8:	8b e2       	ldi	r24, 0x2B	; 43
 6ba:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
		Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
 6be:	83 e1       	ldi	r24, 0x13	; 19
 6c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 6c8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 6cc:	6b e0       	ldi	r22, 0x0B	; 11
 6ce:	84 e2       	ldi	r24, 0x24	; 36
 6d0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 6d4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 6d8:	6e e1       	ldi	r22, 0x1E	; 30
 6da:	84 e2       	ldi	r24, 0x24	; 36
 6dc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Status_Disp_LCD>
 6e0:	08 95       	ret

000006e2 <Smart_Home_Run>:
		
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	if(Smart_Home_Sys_Sync_Flag == OUT_OF_SYNC)
 6e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6e6:	83 31       	cpi	r24, 0x13	; 19
 6e8:	11 f4       	brne	.+4      	; 0x6ee <Smart_Home_Run+0xc>
	{
		// Force sync on CMD_Bus by NUM_OF_RESYNC_HANDSHAKES consecutive successfull handshakes.
		Comm_Bridge_CMD_Bus_Re_Sync();
 6ea:	0e 94 b3 01 	call	0x366	; 0x366 <Comm_Bridge_CMD_Bus_Re_Sync>
	}	
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
 6ee:	0e 94 2d 03 	call	0x65a	; 0x65a <Smart_Home_User_Selection>
		if(Smart_Home_Sys_Sync_Flag == IN_SYNC)
 6f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6f6:	84 31       	cpi	r24, 0x14	; 20
 6f8:	11 f4       	brne	.+4      	; 0x6fe <Smart_Home_Run+0x1c>
		{
			Smart_Home_Process_N_Respond();
 6fa:	0e 94 36 03 	call	0x66c	; 0x66c <Smart_Home_Process_N_Respond>
 6fe:	08 95       	ret

00000700 <SPI_Master_Init>:
#include "SPI.h"

void SPI_Master_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
 700:	40 e0       	ldi	r20, 0x00	; 0
 702:	66 e0       	ldi	r22, 0x06	; 6
 704:	86 e3       	ldi	r24, 0x36	; 54
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	65 e0       	ldi	r22, 0x05	; 5
 710:	86 e3       	ldi	r24, 0x36	; 54
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 718:	41 e0       	ldi	r20, 0x01	; 1
 71a:	67 e0       	ldi	r22, 0x07	; 7
 71c:	86 e3       	ldi	r24, 0x36	; 54
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	64 e0       	ldi	r22, 0x04	; 4
 728:	86 e3       	ldi	r24, 0x36	; 54
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 730:	8d b1       	in	r24, 0x0d	; 13
 732:	84 61       	ori	r24, 0x14	; 20
 734:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 736:	8d b1       	in	r24, 0x0d	; 13
 738:	83 60       	ori	r24, 0x03	; 3
 73a:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 73c:	8d b1       	in	r24, 0x0d	; 13
 73e:	80 64       	ori	r24, 0x40	; 64
 740:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	64 e0       	ldi	r22, 0x04	; 4
 746:	86 e3       	ldi	r24, 0x36	; 54
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 74e:	2f ef       	ldi	r18, 0xFF	; 255
 750:	86 e7       	ldi	r24, 0x76	; 118
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	21 50       	subi	r18, 0x01	; 1
 756:	80 40       	sbci	r24, 0x00	; 0
 758:	90 40       	sbci	r25, 0x00	; 0
 75a:	e1 f7       	brne	.-8      	; 0x754 <SPI_Master_Init+0x54>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <SPI_Master_Init+0x5e>
 75e:	00 00       	nop
 760:	08 95       	ret

00000762 <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	64 e0       	ldi	r22, 0x04	; 4
 766:	86 e3       	ldi	r24, 0x36	; 54
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 76e:	2f ef       	ldi	r18, 0xFF	; 255
 770:	86 e7       	ldi	r24, 0x76	; 118
 772:	91 e0       	ldi	r25, 0x01	; 1
 774:	21 50       	subi	r18, 0x01	; 1
 776:	80 40       	sbci	r24, 0x00	; 0
 778:	90 40       	sbci	r25, 0x00	; 0
 77a:	e1 f7       	brne	.-8      	; 0x774 <SPI_Master_InitTrans+0x12>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <SPI_Master_InitTrans+0x1c>
 77e:	00 00       	nop
 780:	08 95       	ret

00000782 <SPI_Master_TermTrans>:
}

void SPI_Master_TermTrans(void)
{
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 782:	41 e0       	ldi	r20, 0x01	; 1
 784:	64 e0       	ldi	r22, 0x04	; 4
 786:	86 e3       	ldi	r24, 0x36	; 54
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_SetPinValue>
 78e:	08 95       	ret

00000790 <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 790:	cf 93       	push	r28
 792:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 794:	0e 94 b1 03 	call	0x762	; 0x762 <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 798:	cf b9       	out	0x0f, r28	; 15
		
		while(GetBit(SPI->SPSR,SPIF) == 0);
 79a:	77 9b       	sbis	0x0e, 7	; 14
 79c:	fe cf       	rjmp	.-4      	; 0x79a <SPI_Transiver+0xa>
		
		Received_Data = SPI->SPDR;
 79e:	cf b1       	in	r28, 0x0f	; 15

		SPI_Master_TermTrans();
 7a0:	0e 94 c1 03 	call	0x782	; 0x782 <SPI_Master_TermTrans>
		while(GetBit(SPI->SPSR,SPIF) == 0);

		Received_Data = SPI->SPDR;
	#endif /* SPI_ROLE */
	return Received_Data;
}
 7a4:	8c 2f       	mov	r24, r28
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <Status_FollowUp_Init>:
    '\0'
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 7aa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LCD_Init>
 7ae:	08 95       	ret

000007b0 <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	d8 2f       	mov	r29, r24
 7b6:	c6 2f       	mov	r28, r22
    LCD_Clear();
 7b8:	0e 94 24 03 	call	0x648	; 0x648 <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 7bc:	20 e1       	ldi	r18, 0x10	; 16
 7be:	d2 9f       	mul	r29, r18
 7c0:	c0 01       	movw	r24, r0
 7c2:	11 24       	eor	r1, r1
 7c4:	8f 59       	subi	r24, 0x9F	; 159
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	c2 9f       	mul	r28, r18
 7d8:	c0 01       	movw	r24, r0
 7da:	11 24       	eor	r1, r1
 7dc:	8f 59       	subi	r24, 0x9F	; 159
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <LCD_WriteString>
 7e4:	8f ef       	ldi	r24, 0xFF	; 255
 7e6:	94 e3       	ldi	r25, 0x34	; 52
 7e8:	2c e0       	ldi	r18, 0x0C	; 12
 7ea:	81 50       	subi	r24, 0x01	; 1
 7ec:	90 40       	sbci	r25, 0x00	; 0
 7ee:	20 40       	sbci	r18, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <Status_Disp_LCD+0x3a>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <Status_Disp_LCD+0x44>
 7f4:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <UART_Init>:


void UART_Init(void)
{
	// Set Tx Pin as output & Rx Pin as input
	DIO_SetPinDir(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	80 e3       	ldi	r24, 0x30	; 48
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	DIO_SetPinDir(UART_PORT,UART_RX_PIN, DIO_PIN_INPUT);
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	61 e0       	ldi	r22, 0x01	; 1
 80c:	80 e3       	ldi	r24, 0x30	; 48
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <DIO_SetPinDir>
	
	// enable Tx and Rx
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 814:	8a b1       	in	r24, 0x0a	; 10
 816:	88 61       	ori	r24, 0x18	; 24
 818:	8a b9       	out	0x0a, r24	; 10
	
	// Choose UCSRC Register then set data size to be 8 bits
	UCSRC |= (1<<UCSRC_URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 81a:	80 b5       	in	r24, 0x20	; 32
 81c:	86 68       	ori	r24, 0x86	; 134
 81e:	80 bd       	out	0x20, r24	; 32
	
	// Set Baud Rate
	UBRRL = ( UART_Clk_Sor / (UART_Presc * Baud_Rate_Hundred) ) - 1;
 820:	89 e1       	ldi	r24, 0x19	; 25
 822:	89 b9       	out	0x09, r24	; 9
 824:	08 95       	ret

00000826 <UART_Tx>:
}

void UART_Tx(uint8 data)
{
	UDR = data;
 826:	8c b9       	out	0x0c, r24	; 12
	while ( GetBit(UCSRA,TXCIE) == UART_Flag_Down );
 828:	5e 9b       	sbis	0x0b, 6	; 11
 82a:	fe cf       	rjmp	.-4      	; 0x828 <UART_Tx+0x2>
	ClearBit(UCSRA,TXCIE);
 82c:	8b b1       	in	r24, 0x0b	; 11
 82e:	8f 7b       	andi	r24, 0xBF	; 191
 830:	8b b9       	out	0x0b, r24	; 11
 832:	08 95       	ret

00000834 <UART_Rx>:
}

uint8 UART_Rx(void)
{
	while (GetBit(UCSRA,RXCIE) == UART_Flag_Down);
 834:	5f 9b       	sbis	0x0b, 7	; 11
 836:	fe cf       	rjmp	.-4      	; 0x834 <UART_Rx>
	ClearBit(UCSRA,RXCIE);
 838:	8b b1       	in	r24, 0x0b	; 11
 83a:	8f 77       	andi	r24, 0x7F	; 127
 83c:	8b b9       	out	0x0b, r24	; 11
	return UDR;
 83e:	8c b1       	in	r24, 0x0c	; 12
}
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
