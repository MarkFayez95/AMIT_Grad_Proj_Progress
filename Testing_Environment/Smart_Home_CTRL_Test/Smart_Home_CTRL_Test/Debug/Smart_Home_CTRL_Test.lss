
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000032a  00800060  00000838  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080038a  0080038a  00000bf6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eaf  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001085  00000000  00000000  00003dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001424  00000000  00000000  00004e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  0000626c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee0  00000000  00000000  00006814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013fe  00000000  00000000  000076f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
  8a:	0c 94 1a 04 	jmp	0x834	; 0x834 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
uint8 Bluetooth_Mod_Rx(void)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    return UART_Rx();
}
  92:	0e 94 c4 03 	call	0x788	; 0x788 <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Tx>:
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  ea:	88 23       	and	r24, r24
  ec:	e1 f3       	breq	.-8      	; 0xe6 <Bluetooth_Mod_Seq_Tx+0x6>
    UART_TxString(Data_Stream);
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 07 04 	call	0x80e	; 0x80e <UART_TxString>
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 104:	88 23       	and	r24, r24
 106:	e1 f3       	breq	.-8      	; 0x100 <Bluetooth_Mod_Seq_Rx+0x6>
    UART_RxString(Data_Stream);
 108:	ce 01       	movw	r24, r28
 10a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <UART_RxString>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <CMD_Bus_HandShake>:
            SPI_Master_TermTrans();
        #endif /* SPI_ROLE */

        return RECEIVED;
    }
}
 114:	cf 93       	push	r28
 116:	0e 94 65 03 	call	0x6ca	; 0x6ca <SPI_Master_InitTrans>
 11a:	80 ea       	ldi	r24, 0xA0	; 160
 11c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_Transiver>
 120:	c8 2f       	mov	r28, r24
 122:	88 23       	and	r24, r24
 124:	d1 f3       	breq	.-12     	; 0x11a <CMD_Bus_HandShake+0x6>
 126:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_Master_TermTrans>
 12a:	c0 3b       	cpi	r28, 0xB0	; 176
 12c:	11 f4       	brne	.+4      	; 0x132 <CMD_Bus_HandShake+0x1e>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <CMD_Bus_HandShake+0x20>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <CMD_Bus_Master_Init>:
 138:	0e 94 3a 03 	call	0x674	; 0x674 <SPI_Master_Init>
 13c:	08 95       	ret

0000013e <CMD_Bus_Write>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	d8 2f       	mov	r29, r24
 144:	0e 94 8a 00 	call	0x114	; 0x114 <CMD_Bus_HandShake>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	61 f0       	breq	.+24     	; 0x164 <CMD_Bus_Write+0x26>
 14c:	0e 94 65 03 	call	0x6ca	; 0x6ca <SPI_Master_InitTrans>
 150:	8d 2f       	mov	r24, r29
 152:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_Transiver>
 156:	c8 2f       	mov	r28, r24
 158:	88 23       	and	r24, r24
 15a:	d1 f3       	breq	.-12     	; 0x150 <CMD_Bus_Write+0x12>
 15c:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_Master_TermTrans>
 160:	8c 2f       	mov	r24, r28
 162:	01 c0       	rjmp	.+2      	; 0x166 <CMD_Bus_Write+0x28>
 164:	8b e0       	ldi	r24, 0x0B	; 11
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <CMD_Bus_Req_Ack>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
    if(CMD_Bus_HandShake() == INVALID_PEER)
 172:	0e 94 8a 00 	call	0x114	; 0x114 <CMD_Bus_HandShake>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	71 f0       	breq	.+28     	; 0x196 <CMD_Bus_Req_Ack+0x2a>
        return PEER_UNAVAILABLE;
    else 
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 17a:	0e 94 65 03 	call	0x6ca	; 0x6ca <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Ack_Req_Response = SPI_Transiver(REQUEST_ACK);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <SPI_Transiver>
 184:	88 83       	st	Y, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 186:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
 18a:	88 81       	ld	r24, Y
 18c:	87 50       	subi	r24, 0x07	; 7
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	20 f4       	brcc	.+8      	; 0x19a <CMD_Bus_Req_Ack+0x2e>
            return RECEIVED;
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	03 c0       	rjmp	.+6      	; 0x19c <CMD_Bus_Req_Ack+0x30>
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
    if(CMD_Bus_HandShake() == INVALID_PEER)
        return PEER_UNAVAILABLE;
 196:	8b e0       	ldi	r24, 0x0B	; 11
 198:	01 c0       	rjmp	.+2      	; 0x19c <CMD_Bus_Req_Ack+0x30>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
            return RECEIVED;
        else 
            return INVALID_ACK_RESPONSE;
 19a:	8a e0       	ldi	r24, 0x0A	; 10
    }
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <Comm_Bridge_Init>:
    */    
    void Comm_Bridge_BT_SendStream(uint8* data_stream)
	{
		Bluetooth_Mod_Tx(ECU_PUID);
		Bluetooth_Mod_Seq_Tx(data_stream);
	}
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <Comm_Bridge_Init+0xe>
 1a8:	6e e0       	ldi	r22, 0x0E	; 14
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1b4:	88 23       	and	r24, r24
 1b6:	c1 f3       	breq	.-16     	; 0x1a8 <Comm_Bridge_Init+0x6>
 1b8:	6f e0       	ldi	r22, 0x0F	; 15
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1c0:	0e 94 9c 00 	call	0x138	; 0x138 <CMD_Bus_Master_Init>
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <Comm_Bridge_Init+0x2c>
 1c6:	6c e0       	ldi	r22, 0x0C	; 12
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1ce:	0e 94 8a 00 	call	0x114	; 0x114 <CMD_Bus_HandShake>
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	c1 f3       	breq	.-16     	; 0x1c6 <Comm_Bridge_Init+0x24>
 1d6:	6d e0       	ldi	r22, 0x0D	; 13
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1de:	08 95       	ret

000001e0 <Comm_Bridge_BT_Read>:
 1e0:	ec 01       	movw	r28, r24
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <Comm_Bridge_BT_Read+0xc>
 1e4:	6e e0       	ldi	r22, 0x0E	; 14
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1f0:	88 23       	and	r24, r24
 1f2:	c1 f3       	breq	.-16     	; 0x1e4 <Comm_Bridge_BT_Read+0x4>
 1f4:	61 e1       	ldi	r22, 0x11	; 17
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 1fc:	ce 01       	movw	r24, r28
 1fe:	0e 94 7d 00 	call	0xfa	; 0xfa <Bluetooth_Mod_Seq_Rx>
 202:	88 81       	ld	r24, Y
 204:	88 3a       	cpi	r24, 0xA8	; 168
 206:	b1 f3       	breq	.-20     	; 0x1f4 <Comm_Bridge_BT_Read+0x14>
 208:	6c e2       	ldi	r22, 0x2C	; 44
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 210:	f1 cf       	rjmp	.-30     	; 0x1f4 <Comm_Bridge_BT_Read+0x14>

00000212 <Comm_Bridge_BT_Send>:
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
 216:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 21a:	c8 30       	cpi	r28, 0x08	; 8
 21c:	41 f4       	brne	.+16     	; 0x22e <Comm_Bridge_BT_Send+0x1c>
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 bb 03 	call	0x776	; 0x776 <Status_Send_BT>
 224:	67 e0       	ldi	r22, 0x07	; 7
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 22c:	11 c0       	rjmp	.+34     	; 0x250 <Comm_Bridge_BT_Send+0x3e>
 22e:	ca 30       	cpi	r28, 0x0A	; 10
 230:	41 f4       	brne	.+16     	; 0x242 <Comm_Bridge_BT_Send+0x30>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 bb 03 	call	0x776	; 0x776 <Status_Send_BT>
 238:	63 e1       	ldi	r22, 0x13	; 19
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 240:	07 c0       	rjmp	.+14     	; 0x250 <Comm_Bridge_BT_Send+0x3e>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 bb 03 	call	0x776	; 0x776 <Status_Send_BT>
 248:	64 e1       	ldi	r22, 0x14	; 20
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <Comm_Bridge_CMD_Req>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
uint8 Comm_Bridge_CMD_Req(uint8* Request_Command)
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	1f 92       	push	r1
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	8c 01       	movw	r16, r24
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	89 83       	std	Y+1, r24	; 0x01
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 268:	f8 01       	movw	r30, r16
 26a:	80 81       	ld	r24, Z
 26c:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_Write>
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 270:	0e c0       	rjmp	.+28     	; 0x28e <Comm_Bridge_CMD_Req+0x3a>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 272:	65 e1       	ldi	r22, 0x15	; 21
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>

        ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 27a:	f8 01       	movw	r30, r16
 27c:	80 81       	ld	r24, Z
 27e:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	ef e5       	ldi	r30, 0x5F	; 95
 284:	fa ee       	ldi	r31, 0xEA	; 234
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Comm_Bridge_CMD_Req+0x32>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Comm_Bridge_CMD_Req+0x38>
 28c:	00 00       	nop
{
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 28e:	8b 30       	cpi	r24, 0x0B	; 11
 290:	81 f3       	breq	.-32     	; 0x272 <Comm_Bridge_CMD_Req+0x1e>
        Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);

        return SEND_FAILED;
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	09 f0       	breq	.+2      	; 0x298 <Comm_Bridge_CMD_Req+0x44>
 296:	48 c0       	rjmp	.+144    	; 0x328 <Comm_Bridge_CMD_Req+0xd4>
 298:	ff ef       	ldi	r31, 0xFF	; 255
 29a:	20 e7       	ldi	r18, 0x70	; 112
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	f1 50       	subi	r31, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <Comm_Bridge_CMD_Req+0x4a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Comm_Bridge_CMD_Req+0x54>
 2a8:	00 00       	nop

    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 b6 00 	call	0x16c	; 0x16c <CMD_Bus_Req_Ack>
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <Comm_Bridge_CMD_Req+0x82>
    {
        if(Ack_Validity == PEER_UNAVAILABLE)
 2b4:	8b 30       	cpi	r24, 0x0B	; 11
 2b6:	29 f4       	brne	.+10     	; 0x2c2 <Comm_Bridge_CMD_Req+0x6e>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 2b8:	65 e1       	ldi	r22, 0x15	; 21
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <Comm_Bridge_CMD_Req+0x7a>
        }
        else if (Ack_Validity == INVALID_ACK_RESPONSE)
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	21 f4       	brne	.+8      	; 0x2ce <Comm_Bridge_CMD_Req+0x7a>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Invalid Response'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
 2c6:	67 e1       	ldi	r22, 0x17	; 23
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 2ce:	ce 01       	movw	r24, r28
 2d0:	01 96       	adiw	r24, 0x01	; 1
 2d2:	0e 94 b6 00 	call	0x16c	; 0x16c <CMD_Bus_Req_Ack>
    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 2d6:	96 ef       	ldi	r25, 0xF6	; 246
 2d8:	98 0f       	add	r25, r24
 2da:	92 30       	cpi	r25, 0x02	; 2
 2dc:	58 f3       	brcs	.-42     	; 0x2b4 <Comm_Bridge_CMD_Req+0x60>
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    }
    if(Ack_Response == ACK_RES)
 2de:	19 81       	ldd	r17, Y+1	; 0x01
 2e0:	18 30       	cpi	r17, 0x08	; 8
 2e2:	29 f4       	brne	.+10     	; 0x2ee <Comm_Bridge_CMD_Req+0x9a>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Request Done!' ''
        Status_Disp_LCD(LCD_ROW_TXT_REQUEST_DONE,LCD_ROW_TXT_NONE);
 2e4:	6c e2       	ldi	r22, 0x2C	; 44
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>

        return REQ_DONE;
 2ec:	20 c0       	rjmp	.+64     	; 0x32e <Comm_Bridge_CMD_Req+0xda>
    }
    else if(Ack_Response == NACK_RES)
 2ee:	17 30       	cpi	r17, 0x07	; 7
 2f0:	e9 f4       	brne	.+58     	; 0x32c <Comm_Bridge_CMD_Req+0xd8>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);
 2f2:	68 e1       	ldi	r22, 0x18	; 24
 2f4:	8a e0       	ldi	r24, 0x0A	; 10
 2f6:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 2fa:	89 e0       	ldi	r24, 0x09	; 9
 2fc:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_Write>
 300:	89 83       	std	Y+1, r24	; 0x01
        while(Ack_Response == PEER_UNAVAILABLE)
 302:	0e c0       	rjmp	.+28     	; 0x320 <Comm_Bridge_CMD_Req+0xcc>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 304:	65 e1       	ldi	r22, 0x15	; 21
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>

            Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 30c:	89 e0       	ldi	r24, 0x09	; 9
 30e:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_Write>
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	ef e3       	ldi	r30, 0x3F	; 63
 316:	fc e9       	ldi	r31, 0x9C	; 156
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <Comm_Bridge_CMD_Req+0xc4>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Comm_Bridge_CMD_Req+0xca>
 31e:	00 00       	nop
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
        while(Ack_Response == PEER_UNAVAILABLE)
 320:	19 81       	ldd	r17, Y+1	; 0x01
 322:	1b 30       	cpi	r17, 0x0B	; 11
 324:	79 f3       	breq	.-34     	; 0x304 <Comm_Bridge_CMD_Req+0xb0>
 326:	03 c0       	rjmp	.+6      	; 0x32e <Comm_Bridge_CMD_Req+0xda>
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
        return SEND_FAILED;
 328:	17 e0       	ldi	r17, 0x07	; 7
 32a:	01 c0       	rjmp	.+2      	; 0x32e <Comm_Bridge_CMD_Req+0xda>
        
        // Return the received code (reason for NACK) - as it is - to caller function
        return Ack_Response;
    }
	else
		return OUT_OF_SYNC;
 32c:	1c e0       	ldi	r17, 0x0C	; 12
}
 32e:	81 2f       	mov	r24, r17
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 33c:	fc 01       	movw	r30, r24
 33e:	94 2f       	mov	r25, r20
 340:	81 81       	ldd	r24, Z+1	; 0x01
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	9a 01       	movw	r18, r20
 348:	06 2e       	mov	r0, r22
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_SetPinDir+0x14>
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_SetPinDir+0x10>
 354:	32 2f       	mov	r19, r18
 356:	30 95       	com	r19
 358:	83 23       	and	r24, r19
 35a:	81 83       	std	Z+1, r24	; 0x01
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	49 2f       	mov	r20, r25
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinDir+0x2c>
 364:	44 0f       	add	r20, r20
 366:	55 1f       	adc	r21, r21
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinDir+0x28>
 36c:	42 23       	and	r20, r18
 36e:	48 2b       	or	r20, r24
 370:	41 83       	std	Z+1, r20	; 0x01
 372:	08 95       	ret

00000374 <DIO_SetPinValue>:
 374:	fc 01       	movw	r30, r24
 376:	94 2f       	mov	r25, r20
 378:	82 81       	ldd	r24, Z+2	; 0x02
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	9a 01       	movw	r18, r20
 380:	06 2e       	mov	r0, r22
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPinValue+0x14>
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPinValue+0x10>
 38c:	32 2f       	mov	r19, r18
 38e:	30 95       	com	r19
 390:	83 23       	and	r24, r19
 392:	82 83       	std	Z+2, r24	; 0x02
 394:	82 81       	ldd	r24, Z+2	; 0x02
 396:	49 2f       	mov	r20, r25
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPinValue+0x2c>
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPinValue+0x28>
 3a4:	42 23       	and	r20, r18
 3a6:	48 2b       	or	r20, r24
 3a8:	42 83       	std	Z+2, r20	; 0x02
 3aa:	08 95       	ret

000003ac <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_ReadPinValue+0xc>
 3b4:	95 95       	asr	r25
 3b6:	87 95       	ror	r24
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_ReadPinValue+0x8>
 3bc:	81 70       	andi	r24, 0x01	; 1
 3be:	fa 01       	movw	r30, r20
 3c0:	80 83       	st	Z, r24
 3c2:	08 95       	ret

000003c4 <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	86 e3       	ldi	r24, 0x36	; 54
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	86 e3       	ldi	r24, 0x36	; 54
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	86 e3       	ldi	r24, 0x36	; 54
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 3ec:	8b b3       	in	r24, 0x1b	; 27
 3ee:	9c 2f       	mov	r25, r28
 3f0:	90 7f       	andi	r25, 0xF0	; 240
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	89 2b       	or	r24, r25
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	86 e3       	ldi	r24, 0x36	; 54
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 404:	8f e9       	ldi	r24, 0x9F	; 159
 406:	9f e0       	ldi	r25, 0x0F	; 15
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	86 e3       	ldi	r24, 0x36	; 54
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 41c:	20 e1       	ldi	r18, 0x10	; 16
 41e:	c2 9f       	mul	r28, r18
 420:	c0 01       	movw	r24, r0
 422:	11 24       	eor	r1, r1
 424:	9b b3       	in	r25, 0x1b	; 27
 426:	9f 70       	andi	r25, 0x0F	; 15
 428:	89 2b       	or	r24, r25
 42a:	8b bb       	out	0x1b, r24	; 27
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	86 e3       	ldi	r24, 0x36	; 54
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 438:	8f e9       	ldi	r24, 0x9F	; 159
 43a:	9f e0       	ldi	r25, 0x0F	; 15
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 450:	8f e1       	ldi	r24, 0x1F	; 31
 452:	9e e4       	ldi	r25, 0x4E	; 78
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <LCD_Init>:
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	86 e3       	ldi	r24, 0x36	; 54
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	62 e0       	ldi	r22, 0x02	; 2
 470:	86 e3       	ldi	r24, 0x36	; 54
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	63 e0       	ldi	r22, 0x03	; 3
 47c:	86 e3       	ldi	r24, 0x36	; 54
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	89 e3       	ldi	r24, 0x39	; 57
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	65 e0       	ldi	r22, 0x05	; 5
 494:	89 e3       	ldi	r24, 0x39	; 57
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	89 e3       	ldi	r24, 0x39	; 57
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	67 e0       	ldi	r22, 0x07	; 7
 4ac:	89 e3       	ldi	r24, 0x39	; 57
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	81 ee       	ldi	r24, 0xE1	; 225
 4b8:	94 e0       	ldi	r25, 0x04	; 4
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	80 40       	sbci	r24, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <LCD_Init+0x5a>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LCD_Init+0x64>
 4c4:	00 00       	nop
 4c6:	83 e3       	ldi	r24, 0x33	; 51
 4c8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4cc:	82 e3       	ldi	r24, 0x32	; 50
 4ce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4d2:	88 e2       	ldi	r24, 0x28	; 40
 4d4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4d8:	8c e0       	ldi	r24, 0x0C	; 12
 4da:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 4f0:	08 95       	ret

000004f2 <LCD_WriteChar>:
 4f2:	cf 93       	push	r28
 4f4:	c8 2f       	mov	r28, r24
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	86 e3       	ldi	r24, 0x36	; 54
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	62 e0       	ldi	r22, 0x02	; 2
 506:	86 e3       	ldi	r24, 0x36	; 54
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	63 e0       	ldi	r22, 0x03	; 3
 512:	86 e3       	ldi	r24, 0x36	; 54
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 51a:	8b b3       	in	r24, 0x1b	; 27
 51c:	9c 2f       	mov	r25, r28
 51e:	90 7f       	andi	r25, 0xF0	; 240
 520:	8f 70       	andi	r24, 0x0F	; 15
 522:	89 2b       	or	r24, r25
 524:	8b bb       	out	0x1b, r24	; 27
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	63 e0       	ldi	r22, 0x03	; 3
 52a:	86 e3       	ldi	r24, 0x36	; 54
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 532:	8f e9       	ldi	r24, 0x9F	; 159
 534:	9f e0       	ldi	r25, 0x0F	; 15
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <LCD_WriteChar+0x44>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_WriteChar+0x4a>
 53c:	00 00       	nop
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	86 e3       	ldi	r24, 0x36	; 54
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 54a:	20 e1       	ldi	r18, 0x10	; 16
 54c:	c2 9f       	mul	r28, r18
 54e:	c0 01       	movw	r24, r0
 550:	11 24       	eor	r1, r1
 552:	9b b3       	in	r25, 0x1b	; 27
 554:	9f 70       	andi	r25, 0x0F	; 15
 556:	89 2b       	or	r24, r25
 558:	8b bb       	out	0x1b, r24	; 27
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	86 e3       	ldi	r24, 0x36	; 54
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 566:	8f e9       	ldi	r24, 0x9F	; 159
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_WriteChar+0x78>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_WriteChar+0x7e>
 570:	00 00       	nop
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	63 e0       	ldi	r22, 0x03	; 3
 576:	86 e3       	ldi	r24, 0x36	; 54
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 57e:	8f e1       	ldi	r24, 0x1F	; 31
 580:	9e e4       	ldi	r25, 0x4E	; 78
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <LCD_WriteChar+0x90>
 586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_WriteChar+0x96>
 588:	00 00       	nop
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 596:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 59a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_WriteChar>
		Str_count++;
 59e:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 5a0:	f8 01       	movw	r30, r16
 5a2:	ec 0f       	add	r30, r28
 5a4:	f1 1d       	adc	r31, r1
 5a6:	80 81       	ld	r24, Z
 5a8:	81 11       	cpse	r24, r1
 5aa:	f7 cf       	rjmp	.-18     	; 0x59a <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <LCD_GoToLocation+0x6>
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 5be:	90 e8       	ldi	r25, 0x80	; 128
 5c0:	99 83       	std	Y+1, r25	; 0x01
 5c2:	90 ec       	ldi	r25, 0xC0	; 192
 5c4:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 5c6:	e1 e0       	ldi	r30, 0x01	; 1
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	ec 0f       	add	r30, r28
 5cc:	fd 1f       	adc	r31, r29
 5ce:	e8 0f       	add	r30, r24
 5d0:	f1 1d       	adc	r31, r1
 5d2:	80 81       	ld	r24, Z
 5d4:	86 0f       	add	r24, r22
 5d6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
	
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_WriteCommand>
 5ea:	08 95       	ret

000005ec <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 5ec:	0e 94 28 03 	call	0x650	; 0x650 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 5f0:	0e 94 35 03 	call	0x66a	; 0x66a <Smart_Home_Run>
 5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <main+0x4>

000005f6 <Smart_Home_User_Selection>:
}

#if ECU_ROLE == CONTROL_ECU
static void Smart_Home_User_Selection(void)
{
	Comm_Bridge_BT_Read(User_Selection);
 5f6:	8a e8       	ldi	r24, 0x8A	; 138
 5f8:	93 e0       	ldi	r25, 0x03	; 3
 5fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Comm_Bridge_BT_Read>

	Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 5fe:	6c e2       	ldi	r22, 0x2C	; 44
 600:	8b e1       	ldi	r24, 0x1B	; 27
 602:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 606:	08 95       	ret

00000608 <Smart_Home_Process_N_Respond>:
}
static void Smart_Home_Process_N_Respond(void)
{
 608:	cf 93       	push	r28
	uint8 Selection_Validity = SEND_FAILED;
	
	Selection_Validity = Comm_Bridge_CMD_Req(User_Selection);
 60a:	8a e8       	ldi	r24, 0x8A	; 138
 60c:	93 e0       	ldi	r25, 0x03	; 3
 60e:	0e 94 2a 01 	call	0x254	; 0x254 <Comm_Bridge_CMD_Req>
 612:	c8 2f       	mov	r28, r24
	
	if(Selection_Validity == REQ_DONE)
 614:	88 30       	cpi	r24, 0x08	; 8
 616:	29 f4       	brne	.+10     	; 0x622 <Smart_Home_Process_N_Respond+0x1a>
	{
		Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 618:	68 e2       	ldi	r22, 0x28	; 40
 61a:	87 e2       	ldi	r24, 0x27	; 39
 61c:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 620:	12 c0       	rjmp	.+36     	; 0x646 <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_DEV_SEL)
 622:	8a 30       	cpi	r24, 0x0A	; 10
 624:	29 f4       	brne	.+10     	; 0x630 <Smart_Home_Process_N_Respond+0x28>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 626:	63 e1       	ldi	r22, 0x13	; 19
 628:	89 e2       	ldi	r24, 0x29	; 41
 62a:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 62e:	0b c0       	rjmp	.+22     	; 0x646 <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_OP_SEL)
 630:	8b 30       	cpi	r24, 0x0B	; 11
 632:	29 f4       	brne	.+10     	; 0x63e <Smart_Home_Process_N_Respond+0x36>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 634:	64 e1       	ldi	r22, 0x14	; 20
 636:	89 e2       	ldi	r24, 0x29	; 41
 638:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 63c:	04 c0       	rjmp	.+8      	; 0x646 <Smart_Home_Process_N_Respond+0x3e>
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 63e:	66 e1       	ldi	r22, 0x16	; 22
 640:	8b e2       	ldi	r24, 0x2B	; 43
 642:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
	}
	
	Comm_Bridge_BT_Send(Selection_Validity);
 646:	8c 2f       	mov	r24, r28
 648:	0e 94 09 01 	call	0x212	; 0x212 <Comm_Bridge_BT_Send>
}
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 650:	0e 94 92 03 	call	0x724	; 0x724 <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 654:	6b e0       	ldi	r22, 0x0B	; 11
 656:	84 e2       	ldi	r24, 0x24	; 36
 658:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 65c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 660:	6e e1       	ldi	r22, 0x1E	; 30
 662:	84 e2       	ldi	r24, 0x24	; 36
 664:	0e 94 95 03 	call	0x72a	; 0x72a <Status_Disp_LCD>
 668:	08 95       	ret

0000066a <Smart_Home_Run>:
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
 66a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Smart_Home_User_Selection>
		Smart_Home_Process_N_Respond();
 66e:	0e 94 04 03 	call	0x608	; 0x608 <Smart_Home_Process_N_Respond>
 672:	08 95       	ret

00000674 <SPI_Master_Init>:
void SPI_Master_Init(void)
{
	//MISO
	//DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 674:	41 e0       	ldi	r20, 0x01	; 1
 676:	65 e0       	ldi	r22, 0x05	; 5
 678:	86 e3       	ldi	r24, 0x36	; 54
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	67 e0       	ldi	r22, 0x07	; 7
 684:	86 e3       	ldi	r24, 0x36	; 54
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 68c:	41 e0       	ldi	r20, 0x01	; 1
 68e:	64 e0       	ldi	r22, 0x04	; 4
 690:	86 e3       	ldi	r24, 0x36	; 54
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 698:	8d b1       	in	r24, 0x0d	; 13
 69a:	84 61       	ori	r24, 0x14	; 20
 69c:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 69e:	8d b1       	in	r24, 0x0d	; 13
 6a0:	83 60       	ori	r24, 0x03	; 3
 6a2:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 6a4:	8d b1       	in	r24, 0x0d	; 13
 6a6:	80 64       	ori	r24, 0x40	; 64
 6a8:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 6aa:	41 e0       	ldi	r20, 0x01	; 1
 6ac:	64 e0       	ldi	r22, 0x04	; 4
 6ae:	86 e3       	ldi	r24, 0x36	; 54
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 6b6:	2f ef       	ldi	r18, 0xFF	; 255
 6b8:	86 e7       	ldi	r24, 0x76	; 118
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	80 40       	sbci	r24, 0x00	; 0
 6c0:	90 40       	sbci	r25, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <SPI_Master_Init+0x48>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <SPI_Master_Init+0x52>
 6c6:	00 00       	nop
 6c8:	08 95       	ret

000006ca <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	64 e0       	ldi	r22, 0x04	; 4
 6ce:	86 e3       	ldi	r24, 0x36	; 54
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 6d6:	2f ef       	ldi	r18, 0xFF	; 255
 6d8:	86 e7       	ldi	r24, 0x76	; 118
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <SPI_Master_InitTrans+0x12>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <SPI_Master_InitTrans+0x1c>
 6e6:	00 00       	nop
 6e8:	08 95       	ret

000006ea <SPI_Master_TermTrans>:
}

void SPI_Master_TermTrans(void)
{
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 6ea:	41 e0       	ldi	r20, 0x01	; 1
 6ec:	64 e0       	ldi	r22, 0x04	; 4
 6ee:	86 e3       	ldi	r24, 0x36	; 54
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_SetPinValue>
 6f6:	08 95       	ret

000006f8 <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 6f8:	cf 93       	push	r28
 6fa:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	uint8 Trans_N_Started_counter = 1;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 6fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 700:	cf b9       	out	0x0f, r28	; 15
}

uint8 SPI_Transiver(uint8 data)
{
	uint8 Received_Data = 0;
	uint8 Trans_N_Started_counter = 1;
 702:	81 e0       	ldi	r24, 0x01	; 1
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 704:	01 c0       	rjmp	.+2      	; 0x708 <SPI_Transiver+0x10>
			Trans_N_Started_counter++;
 706:	8f 5f       	subi	r24, 0xFF	; 255
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 708:	77 99       	sbic	0x0e, 7	; 14
 70a:	02 c0       	rjmp	.+4      	; 0x710 <SPI_Transiver+0x18>
 70c:	81 11       	cpse	r24, r1
 70e:	fb cf       	rjmp	.-10     	; 0x706 <SPI_Transiver+0xe>
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
 710:	88 23       	and	r24, r24
 712:	11 f0       	breq	.+4      	; 0x718 <SPI_Transiver+0x20>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
 714:	cf b1       	in	r28, 0x0f	; 15
 716:	01 c0       	rjmp	.+2      	; 0x71a <SPI_Transiver+0x22>
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
			Received_Data = TRANS_FAILED;
 718:	c0 e0       	ldi	r28, 0x00	; 0
		else
			Received_Data = SPI->SPDR;

		SPI_Master_TermTrans();
 71a:	0e 94 75 03 	call	0x6ea	; 0x6ea <SPI_Master_TermTrans>
			Received_Data = SPI->SPDR;
		
		
	#endif
	return Received_Data;
}
 71e:	8c 2f       	mov	r24, r28
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <Status_FollowUp_Init>:
	LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
	LCD_WriteInteger(Integer_Number);
	LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
	LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
	_delay_ms(LCD_DISP_DELAY_MS);
}
 724:	0e 94 30 02 	call	0x460	; 0x460 <LCD_Init>
 728:	08 95       	ret

0000072a <Status_Disp_LCD>:
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	d8 2f       	mov	r29, r24
 730:	c6 2f       	mov	r28, r22
 732:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
 736:	20 e1       	ldi	r18, 0x10	; 16
 738:	d2 9f       	mul	r29, r18
 73a:	c0 01       	movw	r24, r0
 73c:	11 24       	eor	r1, r1
 73e:	86 54       	subi	r24, 0x46	; 70
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_WriteString>
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_GoToLocation>
 74e:	20 e1       	ldi	r18, 0x10	; 16
 750:	c2 9f       	mul	r28, r18
 752:	c0 01       	movw	r24, r0
 754:	11 24       	eor	r1, r1
 756:	86 54       	subi	r24, 0x46	; 70
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_WriteString>
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	96 e1       	ldi	r25, 0x16	; 22
 762:	21 e1       	ldi	r18, 0x11	; 17
 764:	81 50       	subi	r24, 0x01	; 1
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	20 40       	sbci	r18, 0x00	; 0
 76a:	e1 f7       	brne	.-8      	; 0x764 <Status_Disp_LCD+0x3a>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <Status_Disp_LCD+0x44>
 76e:	00 00       	nop
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <Status_Send_BT>:
void Status_Send_BT(uint8 Text_Index)
{
    Bluetooth_Mod_Seq_Tx(BT_Text_Options[Text_Index]);
 776:	2e e1       	ldi	r18, 0x1E	; 30
 778:	82 9f       	mul	r24, r18
 77a:	c0 01       	movw	r24, r0
 77c:	11 24       	eor	r1, r1
 77e:	80 5a       	subi	r24, 0xA0	; 160
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Tx>
 786:	08 95       	ret

00000788 <UART_Init>:


void UART_Init(void)
{
	// Set Tx Pin as output & Rx Pin as input
	DIO_SetPinDir(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 788:	41 e0       	ldi	r20, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	80 e3       	ldi	r24, 0x30	; 48
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
	DIO_SetPinDir(UART_PORT,UART_RX_PIN, DIO_PIN_INPUT);
 794:	40 e0       	ldi	r20, 0x00	; 0
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	80 e3       	ldi	r24, 0x30	; 48
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 9e 01 	call	0x33c	; 0x33c <DIO_SetPinDir>
	
	// enable Tx and Rx
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 7a0:	8a b1       	in	r24, 0x0a	; 10
 7a2:	88 61       	ori	r24, 0x18	; 24
 7a4:	8a b9       	out	0x0a, r24	; 10
	
	// Choose UCSRC Register then set data size to be 8 bits
	UCSRC |= (1<<UCSRC_URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 7a6:	80 b5       	in	r24, 0x20	; 32
 7a8:	86 68       	ori	r24, 0x86	; 134
 7aa:	80 bd       	out	0x20, r24	; 32
	
	// Set Baud Rate
	UBRRL = ( UART_Clk_Sor / (UART_Presc * Baud_Rate_Hundred) ) - 1;
 7ac:	87 e6       	ldi	r24, 0x67	; 103
 7ae:	89 b9       	out	0x09, r24	; 9
 7b0:	08 95       	ret

000007b2 <UART_Tx>:
}

void UART_Tx(uint8 data)
{
	UDR = data;
 7b2:	8c b9       	out	0x0c, r24	; 12
	while ( GetBit(UCSRA,TXCIE) == UART_Flag_Down );
 7b4:	5e 9b       	sbis	0x0b, 6	; 11
 7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <UART_Tx+0x2>
	ClearBit(UCSRA,TXCIE);
 7b8:	8b b1       	in	r24, 0x0b	; 11
 7ba:	8f 7b       	andi	r24, 0xBF	; 191
 7bc:	8b b9       	out	0x0b, r24	; 11
 7be:	08 95       	ret

000007c0 <UART_Rx>:
}

uint8 UART_Rx(void)
{
	while (GetBit(UCSRA,RXCIE) == UART_Flag_Down);
 7c0:	5f 9b       	sbis	0x0b, 7	; 11
 7c2:	fe cf       	rjmp	.-4      	; 0x7c0 <UART_Rx>
	ClearBit(UCSRA,RXCIE);
 7c4:	8b b1       	in	r24, 0x0b	; 11
 7c6:	8f 77       	andi	r24, 0x7F	; 127
 7c8:	8b b9       	out	0x0b, r24	; 11
	return UDR;
 7ca:	8c b1       	in	r24, 0x0c	; 12
}
 7cc:	08 95       	ret

000007ce <UART_RxString>:
void UART_RxString(uint8* str)
{
 7ce:	ef 92       	push	r14
 7d0:	ff 92       	push	r15
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	8c 01       	movw	r16, r24
	uint8 Count = 0;
	str[Count]=UART_Rx();
 7da:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <UART_Rx>
 7de:	f8 01       	movw	r30, r16
 7e0:	80 83       	st	Z, r24
	ClearBit(UCSRA,RXCIE);
	return UDR;
}
void UART_RxString(uint8* str)
{
	uint8 Count = 0;
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
	str[Count]=UART_Rx();
	while(str[Count] != '\0')
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <UART_RxString+0x28>
	{
		Count++;
 7e6:	cf 5f       	subi	r28, 0xFF	; 255
		str[Count] = UART_Rx();
 7e8:	78 01       	movw	r14, r16
 7ea:	ec 0e       	add	r14, r28
 7ec:	f1 1c       	adc	r15, r1
 7ee:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <UART_Rx>
 7f2:	f7 01       	movw	r30, r14
 7f4:	80 83       	st	Z, r24
}
void UART_RxString(uint8* str)
{
	uint8 Count = 0;
	str[Count]=UART_Rx();
	while(str[Count] != '\0')
 7f6:	f8 01       	movw	r30, r16
 7f8:	ec 0f       	add	r30, r28
 7fa:	f1 1d       	adc	r31, r1
 7fc:	80 81       	ld	r24, Z
 7fe:	81 11       	cpse	r24, r1
 800:	f2 cf       	rjmp	.-28     	; 0x7e6 <UART_RxString+0x18>
	{
		Count++;
		str[Count] = UART_Rx();
	}
}
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	ff 90       	pop	r15
 80a:	ef 90       	pop	r14
 80c:	08 95       	ret

0000080e <UART_TxString>:

// Maximum characters for this function is 255 character
void UART_TxString(uint8* str)
{
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	8c 01       	movw	r16, r24
	uint8 count=0;
 816:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[count] != '\0')
 818:	03 c0       	rjmp	.+6      	; 0x820 <UART_TxString+0x12>
	{
		UART_Tx(str[count]);
 81a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <UART_Tx>
		count ++;
 81e:	cf 5f       	subi	r28, 0xFF	; 255
// Maximum characters for this function is 255 character
void UART_TxString(uint8* str)
{
	uint8 count=0;
	
	while(str[count] != '\0')
 820:	f8 01       	movw	r30, r16
 822:	ec 0f       	add	r30, r28
 824:	f1 1d       	adc	r31, r1
 826:	80 81       	ld	r24, Z
 828:	81 11       	cpse	r24, r1
 82a:	f7 cf       	rjmp	.-18     	; 0x81a <UART_TxString+0xc>
	{
		UART_Tx(str[count]);
		count ++;
	}
}
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <_exit>:
 834:	f8 94       	cli

00000836 <__stop_program>:
 836:	ff cf       	rjmp	.-2      	; 0x836 <__stop_program>
