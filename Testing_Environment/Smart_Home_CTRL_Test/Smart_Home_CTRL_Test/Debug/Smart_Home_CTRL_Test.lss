
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000032a  00800060  0000085c  000008f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080038a  0080038a  00000c1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dd7  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d0  00000000  00000000  00003d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  00004ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a8  00000000  00000000  0000627c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee6  00000000  00000000  00006824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131b  00000000  00000000  0000770a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00008a25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 27 03 	call	0x64e	; 0x64e <main>
  8a:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
uint8 Bluetooth_Mod_Rx(void)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    return UART_Rx();
}
  92:	0e 94 f6 03 	call	0x7ec	; 0x7ec <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 0b 04 	call	0x816	; 0x816 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Tx>:
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  ea:	88 23       	and	r24, r24
  ec:	e1 f3       	breq	.-8      	; 0xe6 <Bluetooth_Mod_Seq_Tx+0x6>
    UART_TxString(Data_Stream);
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 19 04 	call	0x832	; 0x832 <UART_TxString>
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	8c 01       	movw	r16, r24
    uint8 Data_byte_counter = 0;
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
 106:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 10a:	88 23       	and	r24, r24
 10c:	e1 f3       	breq	.-8      	; 0x106 <Bluetooth_Mod_Seq_Rx+0xc>
 10e:	c0 e0       	ldi	r28, 0x00	; 0
    
    do
    {
        Data_Stream[Data_byte_counter] = UART_Rx();
 110:	78 01       	movw	r14, r16
 112:	ec 0e       	add	r14, r28
 114:	f1 1c       	adc	r15, r1
 116:	0e 94 12 04 	call	0x824	; 0x824 <UART_Rx>
 11a:	f7 01       	movw	r30, r14
 11c:	80 83       	st	Z, r24
        Data_byte_counter++;
 11e:	cf 5f       	subi	r28, 0xFF	; 255
    }
    while(Data_Stream[Data_byte_counter-1] != BT_END_PACKET_CODE);
 120:	ec 2f       	mov	r30, r28
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	e0 0f       	add	r30, r16
 128:	f1 1f       	adc	r31, r17
 12a:	80 81       	ld	r24, Z
 12c:	8d 30       	cpi	r24, 0x0D	; 13
 12e:	81 f7       	brne	.-32     	; 0x110 <Bluetooth_Mod_Seq_Rx+0x16>
    Data_Stream[Data_byte_counter-1] = 0x00;
 130:	10 82       	st	Z, r1
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	08 95       	ret

0000013e <CMD_Bus_HandShake>:
            SPI_Master_TermTrans();
        #endif /* SPI_ROLE */

        return RECEIVED;
    }
}
 13e:	cf 93       	push	r28
 140:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_InitTrans>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	86 e7       	ldi	r24, 0x76	; 118
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <CMD_Bus_HandShake+0xc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <CMD_Bus_HandShake+0x16>
 154:	00 00       	nop
 156:	80 ea       	ldi	r24, 0xA0	; 160
 158:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_Transiver>
 15c:	c8 2f       	mov	r28, r24
 15e:	88 23       	and	r24, r24
 160:	89 f3       	breq	.-30     	; 0x144 <CMD_Bus_HandShake+0x6>
 162:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_Master_TermTrans>
 166:	c0 3b       	cpi	r28, 0xB0	; 176
 168:	11 f4       	brne	.+4      	; 0x16e <CMD_Bus_HandShake+0x30>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	01 c0       	rjmp	.+2      	; 0x170 <CMD_Bus_HandShake+0x32>
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <CMD_Bus_Master_Init>:
 174:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_Master_Init>
 178:	08 95       	ret

0000017a <CMD_Bus_Write>:
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	d8 2f       	mov	r29, r24
 180:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_HandShake>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	61 f0       	breq	.+24     	; 0x1a0 <CMD_Bus_Write+0x26>
 188:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_InitTrans>
 18c:	8d 2f       	mov	r24, r29
 18e:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_Transiver>
 192:	c8 2f       	mov	r28, r24
 194:	88 23       	and	r24, r24
 196:	d1 f3       	breq	.-12     	; 0x18c <CMD_Bus_Write+0x12>
 198:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_Master_TermTrans>
 19c:	8c 2f       	mov	r24, r28
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <CMD_Bus_Write+0x28>
 1a0:	8b e0       	ldi	r24, 0x0B	; 11
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <CMD_Bus_Req_Ack>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
    if(CMD_Bus_HandShake() == INVALID_PEER)
 1ae:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_HandShake>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	71 f0       	breq	.+28     	; 0x1d2 <CMD_Bus_Req_Ack+0x2a>
        return PEER_UNAVAILABLE;
    else 
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 1b6:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Ack_Req_Response = SPI_Transiver(REQUEST_ACK);
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_Transiver>
 1c0:	88 83       	st	Y, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 1c2:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
 1c6:	88 81       	ld	r24, Y
 1c8:	87 50       	subi	r24, 0x07	; 7
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <CMD_Bus_Req_Ack+0x2e>
            return RECEIVED;
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <CMD_Bus_Req_Ack+0x30>
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Ack(uint8* Ack_Req_Response)
{
    if(CMD_Bus_HandShake() == INVALID_PEER)
        return PEER_UNAVAILABLE;
 1d2:	8b e0       	ldi	r24, 0x0B	; 11
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <CMD_Bus_Req_Ack+0x30>
        #endif /* SPI_ROLE */

        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
            return RECEIVED;
        else 
            return INVALID_ACK_RESPONSE;
 1d6:	8a e0       	ldi	r24, 0x0A	; 10
    }
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <Comm_Bridge_Init>:
{
#if ECU_ROLE == CONTROL_ECU
    Bluetooth_Mod_Tx(ECU_PUID);
    Bluetooth_Mod_Seq_Tx(data_stream);
#endif /* ECU_ROLE */
}
 1de:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <Comm_Bridge_Init+0xe>
 1e4:	6e e0       	ldi	r22, 0x0E	; 14
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 1ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1f0:	88 23       	and	r24, r24
 1f2:	c1 f3       	breq	.-16     	; 0x1e4 <Comm_Bridge_Init+0x6>
 1f4:	6f e0       	ldi	r22, 0x0F	; 15
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 1fc:	0e 94 ba 00 	call	0x174	; 0x174 <CMD_Bus_Master_Init>
 200:	04 c0       	rjmp	.+8      	; 0x20a <Comm_Bridge_Init+0x2c>
 202:	6c e0       	ldi	r22, 0x0C	; 12
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 20a:	0e 94 9f 00 	call	0x13e	; 0x13e <CMD_Bus_HandShake>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	c1 f3       	breq	.-16     	; 0x202 <Comm_Bridge_Init+0x24>
 212:	6d e0       	ldi	r22, 0x0D	; 13
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 21a:	08 95       	ret

0000021c <Comm_Bridge_BT_Read>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
 222:	04 c0       	rjmp	.+8      	; 0x22c <Comm_Bridge_BT_Read+0x10>
 224:	6e e0       	ldi	r22, 0x0E	; 14
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 22c:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 230:	88 23       	and	r24, r24
 232:	c1 f3       	breq	.-16     	; 0x224 <Comm_Bridge_BT_Read+0x8>
 234:	61 e1       	ldi	r22, 0x11	; 17
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 7d 00 	call	0xfa	; 0xfa <Bluetooth_Mod_Seq_Rx>
 242:	88 81       	ld	r24, Y
 244:	88 3a       	cpi	r24, 0xA8	; 168
 246:	59 f4       	brne	.+22     	; 0x25e <Comm_Bridge_BT_Read+0x42>
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 83       	st	Y, r24
 254:	62 e1       	ldi	r22, 0x12	; 18
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 25c:	05 c0       	rjmp	.+10     	; 0x268 <Comm_Bridge_BT_Read+0x4c>
 25e:	6c e2       	ldi	r22, 0x2C	; 44
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 266:	e6 cf       	rjmp	.-52     	; 0x234 <Comm_Bridge_BT_Read+0x18>
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <Comm_Bridge_BT_Send>:
 26e:	cf 93       	push	r28
 270:	c8 2f       	mov	r28, r24
 272:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 276:	c8 30       	cpi	r28, 0x08	; 8
 278:	41 f4       	brne	.+16     	; 0x28a <Comm_Bridge_BT_Send+0x1c>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 ed 03 	call	0x7da	; 0x7da <Status_Send_BT>
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 288:	11 c0       	rjmp	.+34     	; 0x2ac <Comm_Bridge_BT_Send+0x3e>
 28a:	ca 30       	cpi	r28, 0x0A	; 10
 28c:	41 f4       	brne	.+16     	; 0x29e <Comm_Bridge_BT_Send+0x30>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 ed 03 	call	0x7da	; 0x7da <Status_Send_BT>
 294:	63 e1       	ldi	r22, 0x13	; 19
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <Comm_Bridge_BT_Send+0x3e>
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 ed 03 	call	0x7da	; 0x7da <Status_Send_BT>
 2a4:	64 e1       	ldi	r22, 0x14	; 20
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <Comm_Bridge_CMD_Req>:
* Outputs: ...
* Returns: ...
* Author: Mark Fayez
**/
uint8 Comm_Bridge_CMD_Req(uint8* Request_Command)
{
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	1f 92       	push	r1
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	8c 01       	movw	r16, r24
#if ECU_ROLE == CONTROL_ECU
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	89 83       	std	Y+1, r24	; 0x01
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 2c4:	f8 01       	movw	r30, r16
 2c6:	80 81       	ld	r24, Z
 2c8:	0e 94 bd 00 	call	0x17a	; 0x17a <CMD_Bus_Write>
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 2cc:	11 c0       	rjmp	.+34     	; 0x2f0 <Comm_Bridge_CMD_Req+0x40>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 2ce:	65 e1       	ldi	r22, 0x15	; 21
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>

        ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
 2d6:	f8 01       	movw	r30, r16
 2d8:	80 81       	ld	r24, Z
 2da:	0e 94 bd 00 	call	0x17a	; 0x17a <CMD_Bus_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	ff ef       	ldi	r31, 0xFF	; 255
 2e0:	26 e7       	ldi	r18, 0x76	; 118
 2e2:	31 e0       	ldi	r19, 0x01	; 1
 2e4:	f1 50       	subi	r31, 0x01	; 1
 2e6:	20 40       	sbci	r18, 0x00	; 0
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <Comm_Bridge_CMD_Req+0x34>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <Comm_Bridge_CMD_Req+0x3e>
 2ee:	00 00       	nop
#if ECU_ROLE == CONTROL_ECU
    uint8 ECUs_Comm_State = REQ_DROPPED;
    uint8 Ack_Validity = INVALID_ACK_RESPONSE;
    uint8 Ack_Response = INVALID_ACK_RESPONSE;
    ECUs_Comm_State = CMD_Bus_Write(Request_Command[CMD_DATA_BYTE]);
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 2f0:	8b 30       	cpi	r24, 0x0B	; 11
 2f2:	69 f3       	breq	.-38     	; 0x2ce <Comm_Bridge_CMD_Req+0x1e>
        Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);

        return SEND_FAILED;
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	09 f0       	breq	.+2      	; 0x2fa <Comm_Bridge_CMD_Req+0x4a>
 2f8:	48 c0       	rjmp	.+144    	; 0x38a <Comm_Bridge_CMD_Req+0xda>
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	97 ea       	ldi	r25, 0xA7	; 167
 2fe:	e1 e6       	ldi	r30, 0x61	; 97
 300:	81 50       	subi	r24, 0x01	; 1
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e0 40       	sbci	r30, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <Comm_Bridge_CMD_Req+0x50>
 308:	00 c0       	rjmp	.+0      	; 0x30a <Comm_Bridge_CMD_Req+0x5a>
 30a:	00 00       	nop

    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 30c:	ce 01       	movw	r24, r28
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CMD_Bus_Req_Ack>
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 314:	11 c0       	rjmp	.+34     	; 0x338 <Comm_Bridge_CMD_Req+0x88>
    {
        if(Ack_Validity == PEER_UNAVAILABLE)
 316:	8b 30       	cpi	r24, 0x0B	; 11
 318:	29 f4       	brne	.+10     	; 0x324 <Comm_Bridge_CMD_Req+0x74>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 31a:	65 e1       	ldi	r22, 0x15	; 21
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 322:	06 c0       	rjmp	.+12     	; 0x330 <Comm_Bridge_CMD_Req+0x80>
        }
        else if (Ack_Validity == INVALID_ACK_RESPONSE)
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	21 f4       	brne	.+8      	; 0x330 <Comm_Bridge_CMD_Req+0x80>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Invalid Response'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
 328:	67 e1       	ldi	r22, 0x17	; 23
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CMD_Bus_Req_Ack>
    _delay_ms(CMD_SEND_REQ_RECEIVE_ACK_DELAY_MS);

    //* Request Sent, Now confirm with with actuator status of performing the request.*//

    Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    while((Ack_Validity == PEER_UNAVAILABLE) || (Ack_Validity == INVALID_ACK_RESPONSE))
 338:	96 ef       	ldi	r25, 0xF6	; 246
 33a:	98 0f       	add	r25, r24
 33c:	92 30       	cpi	r25, 0x02	; 2
 33e:	58 f3       	brcs	.-42     	; 0x316 <Comm_Bridge_CMD_Req+0x66>
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_RESPONSE);
        }
        
        Ack_Validity = CMD_Bus_Req_Ack(&Ack_Response);
    }
    if(Ack_Response == ACK_RES)
 340:	19 81       	ldd	r17, Y+1	; 0x01
 342:	18 30       	cpi	r17, 0x08	; 8
 344:	29 f4       	brne	.+10     	; 0x350 <Comm_Bridge_CMD_Req+0xa0>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Request Done!' ''
        Status_Disp_LCD(LCD_ROW_TXT_REQUEST_DONE,LCD_ROW_TXT_NONE);
 346:	6c e2       	ldi	r22, 0x2C	; 44
 348:	87 e0       	ldi	r24, 0x07	; 7
 34a:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>

        return REQ_DONE;
 34e:	20 c0       	rjmp	.+64     	; 0x390 <Comm_Bridge_CMD_Req+0xe0>
    }
    else if(Ack_Response == NACK_RES)
 350:	17 30       	cpi	r17, 0x07	; 7
 352:	e9 f4       	brne	.+58     	; 0x38e <Comm_Bridge_CMD_Req+0xde>
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);
 354:	68 e1       	ldi	r22, 0x18	; 24
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 35c:	89 e0       	ldi	r24, 0x09	; 9
 35e:	0e 94 bd 00 	call	0x17a	; 0x17a <CMD_Bus_Write>
 362:	89 83       	std	Y+1, r24	; 0x01
        while(Ack_Response == PEER_UNAVAILABLE)
 364:	0e c0       	rjmp	.+28     	; 0x382 <Comm_Bridge_CMD_Req+0xd2>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 366:	65 e1       	ldi	r22, 0x15	; 21
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>

            Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
 36e:	89 e0       	ldi	r24, 0x09	; 9
 370:	0e 94 bd 00 	call	0x17a	; 0x17a <CMD_Bus_Write>
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	8f e3       	ldi	r24, 0x3F	; 63
 378:	9c e9       	ldi	r25, 0x9C	; 156
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <Comm_Bridge_CMD_Req+0xca>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <Comm_Bridge_CMD_Req+0xd0>
 380:	00 00       	nop
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'Invalid Request!' 'Requesting Reason'
        Status_Disp_LCD(LCD_ROW_TXT_INVALID_REQUEST,LCD_ROW_TXT_REQUESTING_REASON);

        Ack_Response = CMD_Bus_Write(NACK_REASON_REQ);
        while(Ack_Response == PEER_UNAVAILABLE)
 382:	19 81       	ldd	r17, Y+1	; 0x01
 384:	1b 30       	cpi	r17, 0x0B	; 11
 386:	79 f3       	breq	.-34     	; 0x366 <Comm_Bridge_CMD_Req+0xb6>
 388:	03 c0       	rjmp	.+6      	; 0x390 <Comm_Bridge_CMD_Req+0xe0>
    }
    #elif COMMAND_BYTE_LENGTH == 1
    if(ECUs_Comm_State != READING)
    {
        // Comm_Bridge_CMD_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
        return SEND_FAILED;
 38a:	17 e0       	ldi	r17, 0x07	; 7
 38c:	01 c0       	rjmp	.+2      	; 0x390 <Comm_Bridge_CMD_Req+0xe0>
        
        // Return the received code (reason for NACK) - as it is - to caller function
        return Ack_Response;
    }
    else
        return OUT_OF_SYNC;
 38e:	1c e0       	ldi	r17, 0x0C	; 12
#endif	/* ECU_ROLE */
}
 390:	81 2f       	mov	r24, r17
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	08 95       	ret

0000039e <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 39e:	fc 01       	movw	r30, r24
 3a0:	94 2f       	mov	r25, r20
 3a2:	81 81       	ldd	r24, Z+1	; 0x01
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	9a 01       	movw	r18, r20
 3aa:	06 2e       	mov	r0, r22
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_SetPinDir+0x14>
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_SetPinDir+0x10>
 3b6:	32 2f       	mov	r19, r18
 3b8:	30 95       	com	r19
 3ba:	83 23       	and	r24, r19
 3bc:	81 83       	std	Z+1, r24	; 0x01
 3be:	81 81       	ldd	r24, Z+1	; 0x01
 3c0:	49 2f       	mov	r20, r25
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_SetPinDir+0x2c>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_SetPinDir+0x28>
 3ce:	42 23       	and	r20, r18
 3d0:	48 2b       	or	r20, r24
 3d2:	41 83       	std	Z+1, r20	; 0x01
 3d4:	08 95       	ret

000003d6 <DIO_SetPinValue>:
 3d6:	fc 01       	movw	r30, r24
 3d8:	94 2f       	mov	r25, r20
 3da:	82 81       	ldd	r24, Z+2	; 0x02
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	9a 01       	movw	r18, r20
 3e2:	06 2e       	mov	r0, r22
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SetPinValue+0x14>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SetPinValue+0x10>
 3ee:	32 2f       	mov	r19, r18
 3f0:	30 95       	com	r19
 3f2:	83 23       	and	r24, r19
 3f4:	82 83       	std	Z+2, r24	; 0x02
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	49 2f       	mov	r20, r25
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_SetPinValue+0x28>
 406:	42 23       	and	r20, r18
 408:	48 2b       	or	r20, r24
 40a:	42 83       	std	Z+2, r20	; 0x02
 40c:	08 95       	ret

0000040e <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_ReadPinValue+0xc>
 416:	95 95       	asr	r25
 418:	87 95       	ror	r24
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_ReadPinValue+0x8>
 41e:	81 70       	andi	r24, 0x01	; 1
 420:	fa 01       	movw	r30, r20
 422:	80 83       	st	Z, r24
 424:	08 95       	ret

00000426 <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 426:	cf 93       	push	r28
 428:	c8 2f       	mov	r28, r24
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	86 e3       	ldi	r24, 0x36	; 54
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	86 e3       	ldi	r24, 0x36	; 54
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	86 e3       	ldi	r24, 0x36	; 54
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 44e:	8b b3       	in	r24, 0x1b	; 27
 450:	9c 2f       	mov	r25, r28
 452:	90 7f       	andi	r25, 0xF0	; 240
 454:	8f 70       	andi	r24, 0x0F	; 15
 456:	89 2b       	or	r24, r25
 458:	8b bb       	out	0x1b, r24	; 27
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	86 e3       	ldi	r24, 0x36	; 54
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <LCD_WriteCommand+0x44>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <LCD_WriteCommand+0x4a>
 470:	00 00       	nop
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	86 e3       	ldi	r24, 0x36	; 54
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 47e:	20 e1       	ldi	r18, 0x10	; 16
 480:	c2 9f       	mul	r28, r18
 482:	c0 01       	movw	r24, r0
 484:	11 24       	eor	r1, r1
 486:	9b b3       	in	r25, 0x1b	; 27
 488:	9f 70       	andi	r25, 0x0F	; 15
 48a:	89 2b       	or	r24, r25
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	86 e3       	ldi	r24, 0x36	; 54
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 49a:	8f e9       	ldi	r24, 0x9F	; 159
 49c:	9f e0       	ldi	r25, 0x0F	; 15
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_WriteCommand+0x78>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_WriteCommand+0x7e>
 4a4:	00 00       	nop
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	63 e0       	ldi	r22, 0x03	; 3
 4aa:	86 e3       	ldi	r24, 0x36	; 54
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 4b2:	8f e1       	ldi	r24, 0x1F	; 31
 4b4:	9e e4       	ldi	r25, 0x4E	; 78
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_WriteCommand+0x90>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <LCD_WriteCommand+0x96>
 4bc:	00 00       	nop
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <LCD_Init>:
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	86 e3       	ldi	r24, 0x36	; 54
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	62 e0       	ldi	r22, 0x02	; 2
 4d2:	86 e3       	ldi	r24, 0x36	; 54
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	63 e0       	ldi	r22, 0x03	; 3
 4de:	86 e3       	ldi	r24, 0x36	; 54
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	89 e3       	ldi	r24, 0x39	; 57
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	65 e0       	ldi	r22, 0x05	; 5
 4f6:	89 e3       	ldi	r24, 0x39	; 57
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	66 e0       	ldi	r22, 0x06	; 6
 502:	89 e3       	ldi	r24, 0x39	; 57
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 50a:	41 e0       	ldi	r20, 0x01	; 1
 50c:	67 e0       	ldi	r22, 0x07	; 7
 50e:	89 e3       	ldi	r24, 0x39	; 57
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	81 ee       	ldi	r24, 0xE1	; 225
 51a:	94 e0       	ldi	r25, 0x04	; 4
 51c:	21 50       	subi	r18, 0x01	; 1
 51e:	80 40       	sbci	r24, 0x00	; 0
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	e1 f7       	brne	.-8      	; 0x51c <LCD_Init+0x5a>
 524:	00 c0       	rjmp	.+0      	; 0x526 <LCD_Init+0x64>
 526:	00 00       	nop
 528:	83 e3       	ldi	r24, 0x33	; 51
 52a:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 52e:	82 e3       	ldi	r24, 0x32	; 50
 530:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 534:	88 e2       	ldi	r24, 0x28	; 40
 536:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 53a:	8c e0       	ldi	r24, 0x0C	; 12
 53c:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 552:	08 95       	ret

00000554 <LCD_WriteChar>:
 554:	cf 93       	push	r28
 556:	c8 2f       	mov	r28, r24
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	86 e3       	ldi	r24, 0x36	; 54
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	86 e3       	ldi	r24, 0x36	; 54
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	63 e0       	ldi	r22, 0x03	; 3
 574:	86 e3       	ldi	r24, 0x36	; 54
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 57c:	8b b3       	in	r24, 0x1b	; 27
 57e:	9c 2f       	mov	r25, r28
 580:	90 7f       	andi	r25, 0xF0	; 240
 582:	8f 70       	andi	r24, 0x0F	; 15
 584:	89 2b       	or	r24, r25
 586:	8b bb       	out	0x1b, r24	; 27
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	63 e0       	ldi	r22, 0x03	; 3
 58c:	86 e3       	ldi	r24, 0x36	; 54
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCD_WriteChar+0x44>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCD_WriteChar+0x4a>
 59e:	00 00       	nop
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	86 e3       	ldi	r24, 0x36	; 54
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 5ac:	20 e1       	ldi	r18, 0x10	; 16
 5ae:	c2 9f       	mul	r28, r18
 5b0:	c0 01       	movw	r24, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	9b b3       	in	r25, 0x1b	; 27
 5b6:	9f 70       	andi	r25, 0x0F	; 15
 5b8:	89 2b       	or	r24, r25
 5ba:	8b bb       	out	0x1b, r24	; 27
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	86 e3       	ldi	r24, 0x36	; 54
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 5c8:	8f e9       	ldi	r24, 0x9F	; 159
 5ca:	9f e0       	ldi	r25, 0x0F	; 15
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <LCD_WriteChar+0x78>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <LCD_WriteChar+0x7e>
 5d2:	00 00       	nop
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	63 e0       	ldi	r22, 0x03	; 3
 5d8:	86 e3       	ldi	r24, 0x36	; 54
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 5e0:	8f e1       	ldi	r24, 0x1F	; 31
 5e2:	9e e4       	ldi	r25, 0x4E	; 78
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <LCD_WriteChar+0x90>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_WriteChar+0x96>
 5ea:	00 00       	nop
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 5fc:	0e 94 aa 02 	call	0x554	; 0x554 <LCD_WriteChar>
		Str_count++;
 600:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 602:	f8 01       	movw	r30, r16
 604:	ec 0f       	add	r30, r28
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	81 11       	cpse	r24, r1
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 d0       	rcall	.+0      	; 0x61c <LCD_GoToLocation+0x6>
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 620:	90 e8       	ldi	r25, 0x80	; 128
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	90 ec       	ldi	r25, 0xC0	; 192
 626:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 628:	e1 e0       	ldi	r30, 0x01	; 1
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	ec 0f       	add	r30, r28
 62e:	fd 1f       	adc	r31, r29
 630:	e8 0f       	add	r30, r24
 632:	f1 1d       	adc	r31, r1
 634:	80 81       	ld	r24, Z
 636:	86 0f       	add	r24, r22
 638:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
	
}
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 13 02 	call	0x426	; 0x426 <LCD_WriteCommand>
 64c:	08 95       	ret

0000064e <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 64e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 652:	0e 94 66 03 	call	0x6cc	; 0x6cc <Smart_Home_Run>
 656:	fd cf       	rjmp	.-6      	; 0x652 <main+0x4>

00000658 <Smart_Home_User_Selection>:


static void Smart_Home_User_Selection(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Comm_Bridge_BT_Read(User_Selection);
 658:	8a e8       	ldi	r24, 0x8A	; 138
 65a:	93 e0       	ldi	r25, 0x03	; 3
 65c:	0e 94 0e 01 	call	0x21c	; 0x21c <Comm_Bridge_BT_Read>

		Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 660:	6c e2       	ldi	r22, 0x2C	; 44
 662:	8b e1       	ldi	r24, 0x1B	; 27
 664:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 668:	08 95       	ret

0000066a <Smart_Home_Process_N_Respond>:
		#endif /* COMMAND_BYTE_LENGTH */
	#endif /* ECU_ROLE */
}
#if ECU_ROLE == CONTROL_ECU
static void Smart_Home_Process_N_Respond(void)
{
 66a:	cf 93       	push	r28
	uint8 Selection_Validity = SEND_FAILED;
	
	Selection_Validity = Comm_Bridge_CMD_Req(User_Selection);
 66c:	8a e8       	ldi	r24, 0x8A	; 138
 66e:	93 e0       	ldi	r25, 0x03	; 3
 670:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Comm_Bridge_CMD_Req>
 674:	c8 2f       	mov	r28, r24
	
	if(Selection_Validity == REQ_DONE)
 676:	88 30       	cpi	r24, 0x08	; 8
 678:	29 f4       	brne	.+10     	; 0x684 <Smart_Home_Process_N_Respond+0x1a>
	{
		Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 67a:	68 e2       	ldi	r22, 0x28	; 40
 67c:	87 e2       	ldi	r24, 0x27	; 39
 67e:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 682:	12 c0       	rjmp	.+36     	; 0x6a8 <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_DEV_SEL)
 684:	8a 30       	cpi	r24, 0x0A	; 10
 686:	29 f4       	brne	.+10     	; 0x692 <Smart_Home_Process_N_Respond+0x28>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 688:	63 e1       	ldi	r22, 0x13	; 19
 68a:	89 e2       	ldi	r24, 0x29	; 41
 68c:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 690:	0b c0       	rjmp	.+22     	; 0x6a8 <Smart_Home_Process_N_Respond+0x3e>
	}
	else if(Selection_Validity == INV_OP_SEL)
 692:	8b 30       	cpi	r24, 0x0B	; 11
 694:	29 f4       	brne	.+10     	; 0x6a0 <Smart_Home_Process_N_Respond+0x36>
	{
		Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 696:	64 e1       	ldi	r22, 0x14	; 20
 698:	89 e2       	ldi	r24, 0x29	; 41
 69a:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 69e:	04 c0       	rjmp	.+8      	; 0x6a8 <Smart_Home_Process_N_Respond+0x3e>
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 6a0:	66 e1       	ldi	r22, 0x16	; 22
 6a2:	8b e2       	ldi	r24, 0x2B	; 43
 6a4:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
	}
	
	Comm_Bridge_BT_Send(Selection_Validity);
 6a8:	8c 2f       	mov	r24, r28
 6aa:	0e 94 37 01 	call	0x26e	; 0x26e <Comm_Bridge_BT_Send>
}
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 6b2:	0e 94 c4 03 	call	0x788	; 0x788 <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 6b6:	6b e0       	ldi	r22, 0x0B	; 11
 6b8:	84 e2       	ldi	r24, 0x24	; 36
 6ba:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 6be:	0e 94 ef 00 	call	0x1de	; 0x1de <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 6c2:	6e e1       	ldi	r22, 0x1E	; 30
 6c4:	84 e2       	ldi	r24, 0x24	; 36
 6c6:	0e 94 c7 03 	call	0x78e	; 0x78e <Status_Disp_LCD>
 6ca:	08 95       	ret

000006cc <Smart_Home_Run>:
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
 6cc:	0e 94 2c 03 	call	0x658	; 0x658 <Smart_Home_User_Selection>
		Smart_Home_Process_N_Respond();
 6d0:	0e 94 35 03 	call	0x66a	; 0x66a <Smart_Home_Process_N_Respond>
 6d4:	08 95       	ret

000006d6 <SPI_Master_Init>:
void SPI_Master_Init(void)
{
	//MISO
	//DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	65 e0       	ldi	r22, 0x05	; 5
 6da:	86 e3       	ldi	r24, 0x36	; 54
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	67 e0       	ldi	r22, 0x07	; 7
 6e6:	86 e3       	ldi	r24, 0x36	; 54
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	64 e0       	ldi	r22, 0x04	; 4
 6f2:	86 e3       	ldi	r24, 0x36	; 54
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 6fa:	8d b1       	in	r24, 0x0d	; 13
 6fc:	84 61       	ori	r24, 0x14	; 20
 6fe:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 700:	8d b1       	in	r24, 0x0d	; 13
 702:	83 60       	ori	r24, 0x03	; 3
 704:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 706:	8d b1       	in	r24, 0x0d	; 13
 708:	80 64       	ori	r24, 0x40	; 64
 70a:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 70c:	41 e0       	ldi	r20, 0x01	; 1
 70e:	64 e0       	ldi	r22, 0x04	; 4
 710:	86 e3       	ldi	r24, 0x36	; 54
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 718:	2f ef       	ldi	r18, 0xFF	; 255
 71a:	86 e7       	ldi	r24, 0x76	; 118
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	21 50       	subi	r18, 0x01	; 1
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e1 f7       	brne	.-8      	; 0x71e <SPI_Master_Init+0x48>
 726:	00 c0       	rjmp	.+0      	; 0x728 <SPI_Master_Init+0x52>
 728:	00 00       	nop
 72a:	08 95       	ret

0000072c <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	64 e0       	ldi	r22, 0x04	; 4
 730:	86 e3       	ldi	r24, 0x36	; 54
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	86 e7       	ldi	r24, 0x76	; 118
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <SPI_Master_InitTrans+0x12>
 746:	00 c0       	rjmp	.+0      	; 0x748 <SPI_Master_InitTrans+0x1c>
 748:	00 00       	nop
 74a:	08 95       	ret

0000074c <SPI_Master_TermTrans>:
}

void SPI_Master_TermTrans(void)
{
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	64 e0       	ldi	r22, 0x04	; 4
 750:	86 e3       	ldi	r24, 0x36	; 54
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DIO_SetPinValue>
 758:	08 95       	ret

0000075a <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 75a:	cf 93       	push	r28
 75c:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	uint16 Trans_N_Started_counter = 1;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 75e:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 762:	cf b9       	out	0x0f, r28	; 15
}

uint8 SPI_Transiver(uint8 data)
{
	uint8 Received_Data = 0;
	uint16 Trans_N_Started_counter = 1;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 768:	01 c0       	rjmp	.+2      	; 0x76c <SPI_Transiver+0x12>
			Trans_N_Started_counter++;
 76a:	01 96       	adiw	r24, 0x01	; 1
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 76c:	77 99       	sbic	0x0e, 7	; 14
 76e:	02 c0       	rjmp	.+4      	; 0x774 <SPI_Transiver+0x1a>
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	d9 f7       	brne	.-10     	; 0x76a <SPI_Transiver+0x10>
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
 774:	89 2b       	or	r24, r25
 776:	11 f0       	breq	.+4      	; 0x77c <SPI_Transiver+0x22>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
 778:	cf b1       	in	r28, 0x0f	; 15
 77a:	01 c0       	rjmp	.+2      	; 0x77e <SPI_Transiver+0x24>
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
			Received_Data = TRANS_FAILED;
 77c:	c0 e0       	ldi	r28, 0x00	; 0
		else
			Received_Data = SPI->SPDR;

		SPI_Master_TermTrans();
 77e:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_Master_TermTrans>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
	#endif /* SPI_ROLE */
	return Received_Data;
}
 782:	8c 2f       	mov	r24, r28
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <Status_FollowUp_Init>:
	LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
	LCD_WriteInteger(Integer_Number);
	LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
	LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
	_delay_ms(LCD_DISP_DELAY_MS);
}
 788:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LCD_Init>
 78c:	08 95       	ret

0000078e <Status_Disp_LCD>:
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	d8 2f       	mov	r29, r24
 794:	c6 2f       	mov	r28, r22
 796:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Clear>
 79a:	20 e1       	ldi	r18, 0x10	; 16
 79c:	d2 9f       	mul	r29, r18
 79e:	c0 01       	movw	r24, r0
 7a0:	11 24       	eor	r1, r1
 7a2:	86 54       	subi	r24, 0x46	; 70
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_WriteString>
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_GoToLocation>
 7b2:	20 e1       	ldi	r18, 0x10	; 16
 7b4:	c2 9f       	mul	r28, r18
 7b6:	c0 01       	movw	r24, r0
 7b8:	11 24       	eor	r1, r1
 7ba:	86 54       	subi	r24, 0x46	; 70
 7bc:	9f 4f       	sbci	r25, 0xFF	; 255
 7be:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_WriteString>
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	96 e1       	ldi	r25, 0x16	; 22
 7c6:	21 e1       	ldi	r18, 0x11	; 17
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	90 40       	sbci	r25, 0x00	; 0
 7cc:	20 40       	sbci	r18, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <Status_Disp_LCD+0x3a>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <Status_Disp_LCD+0x44>
 7d2:	00 00       	nop
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <Status_Send_BT>:
void Status_Send_BT(uint8 Text_Index)
{
    Bluetooth_Mod_Seq_Tx(BT_Text_Options[Text_Index]);
 7da:	2e e1       	ldi	r18, 0x1E	; 30
 7dc:	82 9f       	mul	r24, r18
 7de:	c0 01       	movw	r24, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	80 5a       	subi	r24, 0xA0	; 160
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Tx>
 7ea:	08 95       	ret

000007ec <UART_Init>:
	while(str[Count] != '\0')
	{
		Count++;
		str[Count] = UART_Rx();
	}
}
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	80 e3       	ldi	r24, 0x30	; 48
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	80 e3       	ldi	r24, 0x30	; 48
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_SetPinDir>
 804:	8a b1       	in	r24, 0x0a	; 10
 806:	88 61       	ori	r24, 0x18	; 24
 808:	8a b9       	out	0x0a, r24	; 10
 80a:	80 b5       	in	r24, 0x20	; 32
 80c:	86 68       	ori	r24, 0x86	; 134
 80e:	80 bd       	out	0x20, r24	; 32
 810:	89 e1       	ldi	r24, 0x19	; 25
 812:	89 b9       	out	0x09, r24	; 9
 814:	08 95       	ret

00000816 <UART_Tx>:
 816:	8c b9       	out	0x0c, r24	; 12
 818:	5e 9b       	sbis	0x0b, 6	; 11
 81a:	fe cf       	rjmp	.-4      	; 0x818 <UART_Tx+0x2>
 81c:	8b b1       	in	r24, 0x0b	; 11
 81e:	8f 7b       	andi	r24, 0xBF	; 191
 820:	8b b9       	out	0x0b, r24	; 11
 822:	08 95       	ret

00000824 <UART_Rx>:
 824:	5f 9b       	sbis	0x0b, 7	; 11
 826:	fe cf       	rjmp	.-4      	; 0x824 <UART_Rx>
 828:	8b b1       	in	r24, 0x0b	; 11
 82a:	8f 77       	andi	r24, 0x7F	; 127
 82c:	8b b9       	out	0x0b, r24	; 11
 82e:	8c b1       	in	r24, 0x0c	; 12
 830:	08 95       	ret

00000832 <UART_TxString>:

// Maximum characters for this function is 255 character
void UART_TxString(uint8* str)
{
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	8c 01       	movw	r16, r24
	uint8 count=0;
 83a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[count] != '\0')
 83c:	03 c0       	rjmp	.+6      	; 0x844 <UART_TxString+0x12>
	{
		UART_Tx(str[count]);
 83e:	0e 94 0b 04 	call	0x816	; 0x816 <UART_Tx>
		count ++;
 842:	cf 5f       	subi	r28, 0xFF	; 255
// Maximum characters for this function is 255 character
void UART_TxString(uint8* str)
{
	uint8 count=0;
	
	while(str[count] != '\0')
 844:	f8 01       	movw	r30, r16
 846:	ec 0f       	add	r30, r28
 848:	f1 1d       	adc	r31, r1
 84a:	80 81       	ld	r24, Z
 84c:	81 11       	cpse	r24, r1
 84e:	f7 cf       	rjmp	.-18     	; 0x83e <UART_TxString+0xc>
	{
		UART_Tx(str[count]);
		count ++;
	}
}
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
