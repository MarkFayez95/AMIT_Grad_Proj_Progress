
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000302  00800060  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800362  00800362  00000c26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eeb  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107b  00000000  00000000  00003e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001549  00000000  00000000  00004ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  0000640c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f9d  00000000  00000000  00006a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001435  00000000  00000000  0000799d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00008dd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 03 	call	0x668	; 0x668 <main>
  8a:	0c 94 46 04 	jmp	0x88c	; 0x88c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    UART_TxString(Data_Stream);
}
  92:	0e 94 23 04 	call	0x846	; 0x846 <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 14 02 	call	0x428	; 0x428 <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 38 04 	call	0x870	; 0x870 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
    uint8 Data_byte_counter = 0;
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <Bluetooth_Mod_Seq_Rx+0xc>
  f4:	c0 e0       	ldi	r28, 0x00	; 0
    
    do
    {
        Data_Stream[Data_byte_counter] = UART_Rx();
  f6:	78 01       	movw	r14, r16
  f8:	ec 0e       	add	r14, r28
  fa:	f1 1c       	adc	r15, r1
  fc:	0e 94 3f 04 	call	0x87e	; 0x87e <UART_Rx>
 100:	f7 01       	movw	r30, r14
 102:	80 83       	st	Z, r24
        Data_byte_counter++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
    }
    while(Data_Stream[Data_byte_counter-1] != BT_END_PACKET_CODE);
 106:	ec 2f       	mov	r30, r28
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 81       	ld	r24, Z
 112:	8d 30       	cpi	r24, 0x0D	; 13
 114:	81 f7       	brne	.-32     	; 0xf6 <Bluetooth_Mod_Seq_Rx+0x16>
    Data_Stream[Data_byte_counter-1] = 0x00;
 116:	10 82       	st	Z, r1
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	08 95       	ret

00000124 <CMD_Bus_HandShake>:
    
    if (Response == REQUEST_ACK)
        return DELIVERED;
    else 
        return INVALID_ACK_REQUEST;
}
 124:	cf 93       	push	r28
 126:	0e 94 cd 03 	call	0x79a	; 0x79a <SPI_Master_InitTrans>
 12a:	80 ea       	ldi	r24, 0xA0	; 160
 12c:	0e 94 ed 03 	call	0x7da	; 0x7da <SPI_Transiver>
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_Master_TermTrans>
 136:	cf 3f       	cpi	r28, 0xFF	; 255
 138:	b1 f3       	breq	.-20     	; 0x126 <CMD_Bus_HandShake+0x2>
 13a:	c0 3b       	cpi	r28, 0xB0	; 176
 13c:	11 f4       	brne	.+4      	; 0x142 <CMD_Bus_HandShake+0x1e>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <CMD_Bus_HandShake+0x20>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <CMD_Bus_Master_Init>:
 148:	0e 94 9c 03 	call	0x738	; 0x738 <SPI_Master_Init>
 14c:	08 95       	ret

0000014e <CMD_Bus_Write>:
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	d8 2f       	mov	r29, r24
 154:	0e 94 cd 03 	call	0x79a	; 0x79a <SPI_Master_InitTrans>
 158:	8d 2f       	mov	r24, r29
 15a:	0e 94 ed 03 	call	0x7da	; 0x7da <SPI_Transiver>
 15e:	c8 2f       	mov	r28, r24
 160:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_Master_TermTrans>
 164:	cf 3f       	cpi	r28, 0xFF	; 255
 166:	b1 f3       	breq	.-20     	; 0x154 <CMD_Bus_Write+0x6>
 168:	c3 30       	cpi	r28, 0x03	; 3
 16a:	11 f0       	breq	.+4      	; 0x170 <CMD_Bus_Write+0x22>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	01 c0       	rjmp	.+2      	; 0x172 <CMD_Bus_Write+0x24>
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <CMD_Bus_Req_Ack>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
 17e:	0e 94 cd 03 	call	0x79a	; 0x79a <SPI_Master_InitTrans>
 182:	87 e0       	ldi	r24, 0x07	; 7
 184:	0e 94 ed 03 	call	0x7da	; 0x7da <SPI_Transiver>
 188:	88 83       	st	Y, r24
 18a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_Master_TermTrans>
 18e:	88 81       	ld	r24, Y
 190:	8f 3f       	cpi	r24, 0xFF	; 255
 192:	a9 f3       	breq	.-22     	; 0x17e <CMD_Bus_Req_Ack+0x6>
 194:	88 50       	subi	r24, 0x08	; 8
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	10 f4       	brcc	.+4      	; 0x19e <CMD_Bus_Req_Ack+0x26>
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <CMD_Bus_Req_Ack+0x28>
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <CMD_Bus_Req_Reason_NACK>:
 * Outputs: Received code (0x04) if a valid Ack_Response code was received ||OR|| Invalid NACK Reason code (0x11) if not
 * Returns: uint8 (code indicating the status of the requested process)
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Reason_NACK(uint8* Nack_Res_Reason)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
    do
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 1ac:	0e 94 cd 03 	call	0x79a	; 0x79a <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Nack_Res_Reason = SPI_Transiver(NACK_REASON_REQ);
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	0e 94 ed 03 	call	0x7da	; 0x7da <SPI_Transiver>
 1b6:	88 83       	st	Y, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 1b8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */
    }
    while(*Nack_Res_Reason == PEER_DROPPED);
 1bc:	88 81       	ld	r24, Y
 1be:	8f 3f       	cpi	r24, 0xFF	; 255
 1c0:	a9 f3       	breq	.-22     	; 0x1ac <CMD_Bus_Req_Reason_NACK+0x6>

    if ((*Nack_Res_Reason == INV_DEV_SEL) || (*Nack_Res_Reason == INV_OP_SEL))
 1c2:	8f 50       	subi	r24, 0x0F	; 15
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	10 f4       	brcc	.+4      	; 0x1cc <CMD_Bus_Req_Reason_NACK+0x26>
        return RECEIVED;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <CMD_Bus_Req_Reason_NACK+0x28>
    else 
        return INVALID_NACK_REASON;
 1cc:	81 e1       	ldi	r24, 0x11	; 17
    
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <Comm_Bridge_Init>:
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_RESPONSE_SENT);

        return IN_SYNC; // since communication protocol is completed by sending reason for NACK response, return success IN_SYNC code ensuring both peers are still in sync.
    }
#endif /* ECU_ROLE */
}
 1d4:	6e e0       	ldi	r22, 0x0E	; 14
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1e0:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1e4:	88 23       	and	r24, r24
 1e6:	e1 f3       	breq	.-8      	; 0x1e0 <Comm_Bridge_Init+0xc>
 1e8:	6f e0       	ldi	r22, 0x0F	; 15
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 1f0:	0e 94 a4 00 	call	0x148	; 0x148 <CMD_Bus_Master_Init>
 1f4:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	29 f4       	brne	.+10     	; 0x206 <Comm_Bridge_Init+0x32>
 1fc:	6c e0       	ldi	r22, 0x0C	; 12
 1fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 202:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	f1 f3       	breq	.-4      	; 0x206 <Comm_Bridge_Init+0x32>
 20a:	6d e0       	ldi	r22, 0x0D	; 13
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 212:	08 95       	ret

00000214 <Comm_Bridge_BT_Read>:
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 21e:	81 11       	cpse	r24, r1
 220:	04 c0       	rjmp	.+8      	; 0x22a <Comm_Bridge_BT_Read+0x16>
 222:	6e e0       	ldi	r22, 0x0E	; 14
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 22a:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 22e:	88 23       	and	r24, r24
 230:	e1 f3       	breq	.-8      	; 0x22a <Comm_Bridge_BT_Read+0x16>
 232:	61 e1       	ldi	r22, 0x11	; 17
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Rx>
 240:	88 81       	ld	r24, Y
 242:	88 3a       	cpi	r24, 0xA8	; 168
 244:	31 f0       	breq	.+12     	; 0x252 <Comm_Bridge_BT_Read+0x3e>
 246:	6f e2       	ldi	r22, 0x2F	; 47
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	01 c0       	rjmp	.+2      	; 0x254 <Comm_Bridge_BT_Read+0x40>
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	8c 30       	cpi	r24, 0x0C	; 12
 256:	69 f3       	breq	.-38     	; 0x232 <Comm_Bridge_BT_Read+0x1e>
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	88 83       	st	Y, r24
 25c:	62 e1       	ldi	r22, 0x12	; 18
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <Comm_Bridge_BT_Send>:
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
 26e:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 272:	c2 31       	cpi	r28, 0x12	; 18
 274:	29 f4       	brne	.+10     	; 0x280 <Comm_Bridge_BT_Send+0x16>
 276:	67 e0       	ldi	r22, 0x07	; 7
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 27e:	0b c0       	rjmp	.+22     	; 0x296 <Comm_Bridge_BT_Send+0x2c>
 280:	cf 30       	cpi	r28, 0x0F	; 15
 282:	29 f4       	brne	.+10     	; 0x28e <Comm_Bridge_BT_Send+0x24>
 284:	63 e1       	ldi	r22, 0x13	; 19
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 28c:	04 c0       	rjmp	.+8      	; 0x296 <Comm_Bridge_BT_Send+0x2c>
 28e:	64 e1       	ldi	r22, 0x14	; 20
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <Comm_Bridge_CMD_Req>:
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	1f 92       	push	r1
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	7c 01       	movw	r14, r24
 2ac:	89 e0       	ldi	r24, 0x09	; 9
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <Comm_Bridge_CMD_Req+0x2c>
 2b8:	65 e1       	ldi	r22, 0x15	; 21
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 2c0:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 2c4:	1f 5f       	subi	r17, 0xFF	; 255
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	11 f4       	brne	.+4      	; 0x2ce <Comm_Bridge_CMD_Req+0x34>
 2ca:	15 30       	cpi	r17, 0x05	; 5
 2cc:	a8 f3       	brcs	.-22     	; 0x2b8 <Comm_Bridge_CMD_Req+0x1e>
 2ce:	15 30       	cpi	r17, 0x05	; 5
 2d0:	41 f4       	brne	.+16     	; 0x2e2 <Comm_Bridge_CMD_Req+0x48>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	31 f4       	brne	.+12     	; 0x2e2 <Comm_Bridge_CMD_Req+0x48>
 2d6:	66 e1       	ldi	r22, 0x16	; 22
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 2de:	83 e1       	ldi	r24, 0x13	; 19
 2e0:	47 c0       	rjmp	.+142    	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	61 f4       	brne	.+24     	; 0x2fe <Comm_Bridge_CMD_Req+0x64>
 2e6:	f7 01       	movw	r30, r14
 2e8:	80 81       	ld	r24, Z
 2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <CMD_Bus_Write>
 2ee:	86 30       	cpi	r24, 0x06	; 6
 2f0:	31 f4       	brne	.+12     	; 0x2fe <Comm_Bridge_CMD_Req+0x64>
 2f2:	6e e2       	ldi	r22, 0x2E	; 46
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 2fa:	83 e1       	ldi	r24, 0x13	; 19
 2fc:	39 c0       	rjmp	.+114    	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 2fe:	ff ef       	ldi	r31, 0xFF	; 255
 300:	23 ee       	ldi	r18, 0xE3	; 227
 302:	87 e5       	ldi	r24, 0x57	; 87
 304:	f1 50       	subi	r31, 0x01	; 1
 306:	20 40       	sbci	r18, 0x00	; 0
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <Comm_Bridge_CMD_Req+0x6a>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <Comm_Bridge_CMD_Req+0x74>
 30e:	00 00       	nop
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	0e 94 bc 00 	call	0x178	; 0x178 <CMD_Bus_Req_Ack>
 318:	8b 30       	cpi	r24, 0x0B	; 11
 31a:	31 f4       	brne	.+12     	; 0x328 <Comm_Bridge_CMD_Req+0x8e>
 31c:	67 e1       	ldi	r22, 0x17	; 23
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 324:	83 e1       	ldi	r24, 0x13	; 19
 326:	24 c0       	rjmp	.+72     	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	89 30       	cpi	r24, 0x09	; 9
 32c:	49 f4       	brne	.+18     	; 0x340 <Comm_Bridge_CMD_Req+0xa6>
 32e:	6f e2       	ldi	r22, 0x2F	; 47
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 336:	82 e1       	ldi	r24, 0x12	; 18
 338:	f7 01       	movw	r30, r14
 33a:	81 83       	std	Z+1, r24	; 0x01
 33c:	84 e1       	ldi	r24, 0x14	; 20
 33e:	18 c0       	rjmp	.+48     	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	a9 f4       	brne	.+42     	; 0x36e <Comm_Bridge_CMD_Req+0xd4>
 344:	68 e1       	ldi	r22, 0x18	; 24
 346:	8a e0       	ldi	r24, 0x0A	; 10
 348:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <CMD_Bus_Req_Reason_NACK>
 354:	81 31       	cpi	r24, 0x11	; 17
 356:	31 f4       	brne	.+12     	; 0x364 <Comm_Bridge_CMD_Req+0xca>
 358:	67 e1       	ldi	r22, 0x17	; 23
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 360:	83 e1       	ldi	r24, 0x13	; 19
 362:	06 c0       	rjmp	.+12     	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	f7 01       	movw	r30, r14
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	84 e1       	ldi	r24, 0x14	; 20
 36c:	01 c0       	rjmp	.+2      	; 0x370 <Comm_Bridge_CMD_Req+0xd6>
 36e:	83 e1       	ldi	r24, 0x13	; 19
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <Comm_Bridge_CMD_Bus_Re_Sync>:
 * Outputs: None
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Bus_Re_Sync(void)
{
 37e:	cf 93       	push	r28
    uint8 Iteration_counter = 0;

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
 380:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 384:	c0 e0       	ldi	r28, 0x00	; 0
 386:	09 c0       	rjmp	.+18     	; 0x39a <Comm_Bridge_CMD_Bus_Re_Sync+0x1c>
    {
        if(ECUs_Comm_State == INVALID_PEER)
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	21 f4       	brne	.+8      	; 0x394 <Comm_Bridge_CMD_Bus_Re_Sync+0x16>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 38c:	65 e1       	ldi	r22, 0x15	; 21
 38e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
            Iteration_counter = 0;
 392:	c0 e0       	ldi	r28, 0x00	; 0
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
 394:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 398:	cf 5f       	subi	r28, 0xFF	; 255
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	11 f4       	brne	.+4      	; 0x3a2 <Comm_Bridge_CMD_Bus_Re_Sync+0x24>
 39e:	c8 30       	cpi	r28, 0x08	; 8
 3a0:	98 f3       	brcs	.-26     	; 0x388 <Comm_Bridge_CMD_Bus_Re_Sync+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	2f ef       	ldi	r18, 0xFF	; 255
 3a4:	80 e7       	ldi	r24, 0x70	; 112
 3a6:	92 e0       	ldi	r25, 0x02	; 2
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <Comm_Bridge_CMD_Bus_Re_Sync+0x2a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <Comm_Bridge_CMD_Bus_Re_Sync+0x34>
 3b2:	00 00       	nop
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
    }

    _delay_ms(PRIOR_RE_SYNC_HANDSHAKES_DELAY_MS);
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 3b8:	fc 01       	movw	r30, r24
 3ba:	94 2f       	mov	r25, r20
 3bc:	81 81       	ldd	r24, Z+1	; 0x01
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	9a 01       	movw	r18, r20
 3c4:	06 2e       	mov	r0, r22
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinDir+0x14>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinDir+0x10>
 3d0:	32 2f       	mov	r19, r18
 3d2:	30 95       	com	r19
 3d4:	83 23       	and	r24, r19
 3d6:	81 83       	std	Z+1, r24	; 0x01
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	49 2f       	mov	r20, r25
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_SetPinDir+0x2c>
 3e0:	44 0f       	add	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_SetPinDir+0x28>
 3e8:	42 23       	and	r20, r18
 3ea:	48 2b       	or	r20, r24
 3ec:	41 83       	std	Z+1, r20	; 0x01
 3ee:	08 95       	ret

000003f0 <DIO_SetPinValue>:
 3f0:	fc 01       	movw	r30, r24
 3f2:	94 2f       	mov	r25, r20
 3f4:	82 81       	ldd	r24, Z+2	; 0x02
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	9a 01       	movw	r18, r20
 3fc:	06 2e       	mov	r0, r22
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	32 2f       	mov	r19, r18
 40a:	30 95       	com	r19
 40c:	83 23       	and	r24, r19
 40e:	82 83       	std	Z+2, r24	; 0x02
 410:	82 81       	ldd	r24, Z+2	; 0x02
 412:	49 2f       	mov	r20, r25
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	44 0f       	add	r20, r20
 41a:	55 1f       	adc	r21, r21
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	42 23       	and	r20, r18
 422:	48 2b       	or	r20, r24
 424:	42 83       	std	Z+2, r20	; 0x02
 426:	08 95       	ret

00000428 <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 428:	fc 01       	movw	r30, r24
 42a:	80 81       	ld	r24, Z
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_ReadPinValue+0xc>
 430:	95 95       	asr	r25
 432:	87 95       	ror	r24
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_ReadPinValue+0x8>
 438:	81 70       	andi	r24, 0x01	; 1
 43a:	fa 01       	movw	r30, r20
 43c:	80 83       	st	Z, r24
 43e:	08 95       	ret

00000440 <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 440:	cf 93       	push	r28
 442:	c8 2f       	mov	r28, r24
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	86 e3       	ldi	r24, 0x36	; 54
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	86 e3       	ldi	r24, 0x36	; 54
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	86 e3       	ldi	r24, 0x36	; 54
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 468:	8b b3       	in	r24, 0x1b	; 27
 46a:	9c 2f       	mov	r25, r28
 46c:	90 7f       	andi	r25, 0xF0	; 240
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	89 2b       	or	r24, r25
 472:	8b bb       	out	0x1b, r24	; 27
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	86 e3       	ldi	r24, 0x36	; 54
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 480:	8f e9       	ldi	r24, 0x9F	; 159
 482:	9f e0       	ldi	r25, 0x0F	; 15
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_WriteCommand+0x44>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_WriteCommand+0x4a>
 48a:	00 00       	nop
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	63 e0       	ldi	r22, 0x03	; 3
 490:	86 e3       	ldi	r24, 0x36	; 54
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 498:	20 e1       	ldi	r18, 0x10	; 16
 49a:	c2 9f       	mul	r28, r18
 49c:	c0 01       	movw	r24, r0
 49e:	11 24       	eor	r1, r1
 4a0:	9b b3       	in	r25, 0x1b	; 27
 4a2:	9f 70       	andi	r25, 0x0F	; 15
 4a4:	89 2b       	or	r24, r25
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	86 e3       	ldi	r24, 0x36	; 54
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 4b4:	8f e9       	ldi	r24, 0x9F	; 159
 4b6:	9f e0       	ldi	r25, 0x0F	; 15
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_WriteCommand+0x78>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_WriteCommand+0x7e>
 4be:	00 00       	nop
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	86 e3       	ldi	r24, 0x36	; 54
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	9e e4       	ldi	r25, 0x4E	; 78
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_WriteCommand+0x90>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_WriteCommand+0x96>
 4d6:	00 00       	nop
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_Init>:
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	86 e3       	ldi	r24, 0x36	; 54
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	86 e3       	ldi	r24, 0x36	; 54
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	86 e3       	ldi	r24, 0x36	; 54
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	64 e0       	ldi	r22, 0x04	; 4
 504:	89 e3       	ldi	r24, 0x39	; 57
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	65 e0       	ldi	r22, 0x05	; 5
 510:	89 e3       	ldi	r24, 0x39	; 57
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	66 e0       	ldi	r22, 0x06	; 6
 51c:	89 e3       	ldi	r24, 0x39	; 57
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	67 e0       	ldi	r22, 0x07	; 7
 528:	89 e3       	ldi	r24, 0x39	; 57
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	81 ee       	ldi	r24, 0xE1	; 225
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <LCD_Init+0x5a>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_Init+0x64>
 540:	00 00       	nop
 542:	83 e3       	ldi	r24, 0x33	; 51
 544:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 548:	82 e3       	ldi	r24, 0x32	; 50
 54a:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 54e:	88 e2       	ldi	r24, 0x28	; 40
 550:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 560:	86 e0       	ldi	r24, 0x06	; 6
 562:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 56c:	08 95       	ret

0000056e <LCD_WriteChar>:
 56e:	cf 93       	push	r28
 570:	c8 2f       	mov	r28, r24
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	86 e3       	ldi	r24, 0x36	; 54
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 57e:	40 e0       	ldi	r20, 0x00	; 0
 580:	62 e0       	ldi	r22, 0x02	; 2
 582:	86 e3       	ldi	r24, 0x36	; 54
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	86 e3       	ldi	r24, 0x36	; 54
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 596:	8b b3       	in	r24, 0x1b	; 27
 598:	9c 2f       	mov	r25, r28
 59a:	90 7f       	andi	r25, 0xF0	; 240
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	89 2b       	or	r24, r25
 5a0:	8b bb       	out	0x1b, r24	; 27
 5a2:	41 e0       	ldi	r20, 0x01	; 1
 5a4:	63 e0       	ldi	r22, 0x03	; 3
 5a6:	86 e3       	ldi	r24, 0x36	; 54
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 5ae:	8f e9       	ldi	r24, 0x9F	; 159
 5b0:	9f e0       	ldi	r25, 0x0F	; 15
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_WriteChar+0x44>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_WriteChar+0x4a>
 5b8:	00 00       	nop
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	63 e0       	ldi	r22, 0x03	; 3
 5be:	86 e3       	ldi	r24, 0x36	; 54
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 5c6:	20 e1       	ldi	r18, 0x10	; 16
 5c8:	c2 9f       	mul	r28, r18
 5ca:	c0 01       	movw	r24, r0
 5cc:	11 24       	eor	r1, r1
 5ce:	9b b3       	in	r25, 0x1b	; 27
 5d0:	9f 70       	andi	r25, 0x0F	; 15
 5d2:	89 2b       	or	r24, r25
 5d4:	8b bb       	out	0x1b, r24	; 27
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	63 e0       	ldi	r22, 0x03	; 3
 5da:	86 e3       	ldi	r24, 0x36	; 54
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 5e2:	8f e9       	ldi	r24, 0x9F	; 159
 5e4:	9f e0       	ldi	r25, 0x0F	; 15
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_WriteChar+0x78>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_WriteChar+0x7e>
 5ec:	00 00       	nop
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	86 e3       	ldi	r24, 0x36	; 54
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 5fa:	8f e1       	ldi	r24, 0x1F	; 31
 5fc:	9e e4       	ldi	r25, 0x4E	; 78
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_WriteChar+0x90>
 602:	00 c0       	rjmp	.+0      	; 0x604 <LCD_WriteChar+0x96>
 604:	00 00       	nop
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 612:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 614:	03 c0       	rjmp	.+6      	; 0x61c <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 616:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteChar>
		Str_count++;
 61a:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 61c:	f8 01       	movw	r30, r16
 61e:	ec 0f       	add	r30, r28
 620:	f1 1d       	adc	r31, r1
 622:	80 81       	ld	r24, Z
 624:	81 11       	cpse	r24, r1
 626:	f7 cf       	rjmp	.-18     	; 0x616 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	00 d0       	rcall	.+0      	; 0x636 <LCD_GoToLocation+0x6>
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 63a:	90 e8       	ldi	r25, 0x80	; 128
 63c:	99 83       	std	Y+1, r25	; 0x01
 63e:	90 ec       	ldi	r25, 0xC0	; 192
 640:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 642:	e1 e0       	ldi	r30, 0x01	; 1
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	ec 0f       	add	r30, r28
 648:	fd 1f       	adc	r31, r29
 64a:	e8 0f       	add	r30, r24
 64c:	f1 1d       	adc	r31, r1
 64e:	80 81       	ld	r24, Z
 650:	86 0f       	add	r24, r22
 652:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
	
}
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 20 02 	call	0x440	; 0x440 <LCD_WriteCommand>
 666:	08 95       	ret

00000668 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 668:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 66c:	0e 94 88 03 	call	0x710	; 0x710 <Smart_Home_Run>
 670:	fd cf       	rjmp	.-6      	; 0x66c <main+0x4>

00000672 <Smart_Home_User_Selection>:


static void Smart_Home_User_Selection(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Comm_Bridge_BT_Read(User_Selection);
 672:	82 e6       	ldi	r24, 0x62	; 98
 674:	93 e0       	ldi	r25, 0x03	; 3
 676:	0e 94 0a 01 	call	0x214	; 0x214 <Comm_Bridge_BT_Read>

		Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 67a:	6f e2       	ldi	r22, 0x2F	; 47
 67c:	8b e1       	ldi	r24, 0x1B	; 27
 67e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 682:	08 95       	ret

00000684 <Smart_Home_Process_N_Respond>:
	static void Smart_Home_Process_N_Respond(void)
	{
		uint8 Selection_Validity = SEND_FAILED;
		uint8 Transmission_Status = IN_SYNC;

		Transmission_Status = Comm_Bridge_CMD_Req(User_Selection);
 684:	82 e6       	ldi	r24, 0x62	; 98
 686:	93 e0       	ldi	r25, 0x03	; 3
 688:	0e 94 4d 01 	call	0x29a	; 0x29a <Comm_Bridge_CMD_Req>

		if(Transmission_Status != OUT_OF_SYNC)
 68c:	83 31       	cpi	r24, 0x13	; 19
 68e:	01 f1       	breq	.+64     	; 0x6d0 <Smart_Home_Process_N_Respond+0x4c>
		{
			Selection_Validity = User_Selection[RESPONSE_DATA_BYTE];
 690:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <__data_end+0x1>
			if(Selection_Validity == REQ_DONE)
 694:	82 31       	cpi	r24, 0x12	; 18
 696:	41 f4       	brne	.+16     	; 0x6a8 <Smart_Home_Process_N_Respond+0x24>
			{
				Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 698:	68 e2       	ldi	r22, 0x28	; 40
 69a:	87 e2       	ldi	r24, 0x27	; 39
 69c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
				Comm_Bridge_BT_Send(REQ_DONE);
 6a0:	82 e1       	ldi	r24, 0x12	; 18
 6a2:	0e 94 35 01 	call	0x26a	; 0x26a <Comm_Bridge_BT_Send>
 6a6:	08 95       	ret
			}
			else if(Selection_Validity == INV_DEV_SEL)
 6a8:	8f 30       	cpi	r24, 0x0F	; 15
 6aa:	41 f4       	brne	.+16     	; 0x6bc <Smart_Home_Process_N_Respond+0x38>
			{
				Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 6ac:	63 e1       	ldi	r22, 0x13	; 19
 6ae:	89 e2       	ldi	r24, 0x29	; 41
 6b0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
				Comm_Bridge_BT_Send(INV_DEV_SEL);
 6b4:	8f e0       	ldi	r24, 0x0F	; 15
 6b6:	0e 94 35 01 	call	0x26a	; 0x26a <Comm_Bridge_BT_Send>
 6ba:	08 95       	ret
			}
			else if(Selection_Validity == INV_OP_SEL)
 6bc:	80 31       	cpi	r24, 0x10	; 16
 6be:	79 f4       	brne	.+30     	; 0x6de <Smart_Home_Process_N_Respond+0x5a>
			{
				Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 6c0:	64 e1       	ldi	r22, 0x14	; 20
 6c2:	89 e2       	ldi	r24, 0x29	; 41
 6c4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
				Comm_Bridge_BT_Send(INV_OP_SEL);
 6c8:	80 e1       	ldi	r24, 0x10	; 16
 6ca:	0e 94 35 01 	call	0x26a	; 0x26a <Comm_Bridge_BT_Send>
 6ce:	08 95       	ret
			}
		}
		else
		{
			Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 6d0:	66 e1       	ldi	r22, 0x16	; 22
 6d2:	8b e2       	ldi	r24, 0x2B	; 43
 6d4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
			Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
 6d8:	83 e1       	ldi	r24, 0x13	; 19
 6da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 6de:	08 95       	ret

000006e0 <Smart_Home_Init>:
	uint8 Selected_Operation = OP_1;
#endif /* ECU_ROLE */

void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 6e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 6e4:	6b e0       	ldi	r22, 0x0B	; 11
 6e6:	84 e2       	ldi	r24, 0x24	; 36
 6e8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 6ec:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 6f0:	6e e1       	ldi	r22, 0x1E	; 30
 6f2:	84 e2       	ldi	r24, 0x24	; 36
 6f4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <Status_Disp_LCD>
 6f8:	08 95       	ret

000006fa <Smart_Home_Clear_User_Selection>:
#endif /* ECU_ROLE */ 

void Smart_Home_Clear_User_Selection(void)
{
	uint8 Command_byte_counter = 0;
	for(Command_byte_counter = 0; Command_byte_counter < (COMMAND_BYTE_LENGTH+COMMAND_PACKET_HEADER_TAIL_LENGTH); Command_byte_counter++ )
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <Smart_Home_Clear_User_Selection+0x10>
	{
		User_Selection[Command_byte_counter] = 0;
 6fe:	e8 2f       	mov	r30, r24
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	ee 59       	subi	r30, 0x9E	; 158
 704:	fc 4f       	sbci	r31, 0xFC	; 252
 706:	10 82       	st	Z, r1
#endif /* ECU_ROLE */ 

void Smart_Home_Clear_User_Selection(void)
{
	uint8 Command_byte_counter = 0;
	for(Command_byte_counter = 0; Command_byte_counter < (COMMAND_BYTE_LENGTH+COMMAND_PACKET_HEADER_TAIL_LENGTH); Command_byte_counter++ )
 708:	8f 5f       	subi	r24, 0xFF	; 255
 70a:	83 30       	cpi	r24, 0x03	; 3
 70c:	c0 f3       	brcs	.-16     	; 0x6fe <Smart_Home_Clear_User_Selection+0x4>
	#if ECU_ROLE == ACTUATOR_ECU
		Selected_Device = 0;
		Selected_Operation = 0;
	#endif /* ECU_ROLE */
	
}
 70e:	08 95       	ret

00000710 <Smart_Home_Run>:
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	// clear previous command received
	Smart_Home_Clear_User_Selection();
 710:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Smart_Home_Clear_User_Selection>

	if(Smart_Home_Sys_Sync_Flag == OUT_OF_SYNC)
 714:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 718:	83 31       	cpi	r24, 0x13	; 19
 71a:	29 f4       	brne	.+10     	; 0x726 <Smart_Home_Run+0x16>
	{
		// Force sync on CMD_Bus by NUM_OF_RESYNC_HANDSHAKES consecutive successfull handshakes.
		Comm_Bridge_CMD_Bus_Re_Sync();
 71c:	0e 94 bf 01 	call	0x37e	; 0x37e <Comm_Bridge_CMD_Bus_Re_Sync>
		Smart_Home_Sys_Sync_Flag = IN_SYNC;
 720:	84 e1       	ldi	r24, 0x14	; 20
 722:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}	
	#if ECU_ROLE == CONTROL_ECU
		if(Smart_Home_Sys_Sync_Flag == IN_SYNC)
 726:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 72a:	84 31       	cpi	r24, 0x14	; 20
 72c:	21 f4       	brne	.+8      	; 0x736 <Smart_Home_Run+0x26>
		{
			// get user input from Bluetooth_Mod through Comm_Bridge
			Smart_Home_User_Selection();
 72e:	0e 94 39 03 	call	0x672	; 0x672 <Smart_Home_User_Selection>
		
			// if command received and valid PUID is detected, send command to actuator to validate and apply it, then wait for its response, then ack on User through Bluetooth_Mod
			Smart_Home_Process_N_Respond();
 732:	0e 94 42 03 	call	0x684	; 0x684 <Smart_Home_Process_N_Respond>
 736:	08 95       	ret

00000738 <SPI_Master_Init>:
#include "SPI.h"

void SPI_Master_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	66 e0       	ldi	r22, 0x06	; 6
 73c:	86 e3       	ldi	r24, 0x36	; 54
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	65 e0       	ldi	r22, 0x05	; 5
 748:	86 e3       	ldi	r24, 0x36	; 54
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	67 e0       	ldi	r22, 0x07	; 7
 754:	86 e3       	ldi	r24, 0x36	; 54
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	64 e0       	ldi	r22, 0x04	; 4
 760:	86 e3       	ldi	r24, 0x36	; 54
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 768:	8d b1       	in	r24, 0x0d	; 13
 76a:	84 61       	ori	r24, 0x14	; 20
 76c:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 76e:	8d b1       	in	r24, 0x0d	; 13
 770:	83 60       	ori	r24, 0x03	; 3
 772:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 774:	8d b1       	in	r24, 0x0d	; 13
 776:	80 64       	ori	r24, 0x40	; 64
 778:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 77a:	41 e0       	ldi	r20, 0x01	; 1
 77c:	64 e0       	ldi	r22, 0x04	; 4
 77e:	86 e3       	ldi	r24, 0x36	; 54
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 786:	2f ef       	ldi	r18, 0xFF	; 255
 788:	86 e7       	ldi	r24, 0x76	; 118
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	21 50       	subi	r18, 0x01	; 1
 78e:	80 40       	sbci	r24, 0x00	; 0
 790:	90 40       	sbci	r25, 0x00	; 0
 792:	e1 f7       	brne	.-8      	; 0x78c <SPI_Master_Init+0x54>
 794:	00 c0       	rjmp	.+0      	; 0x796 <SPI_Master_Init+0x5e>
 796:	00 00       	nop
 798:	08 95       	ret

0000079a <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	64 e0       	ldi	r22, 0x04	; 4
 79e:	86 e3       	ldi	r24, 0x36	; 54
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 7a6:	2f ef       	ldi	r18, 0xFF	; 255
 7a8:	86 e7       	ldi	r24, 0x76	; 118
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	21 50       	subi	r18, 0x01	; 1
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	90 40       	sbci	r25, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <SPI_Master_InitTrans+0x12>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <SPI_Master_InitTrans+0x1c>
 7b6:	00 00       	nop
 7b8:	08 95       	ret

000007ba <SPI_Master_TermTrans>:
 7ba:	2f ef       	ldi	r18, 0xFF	; 255
 7bc:	86 e7       	ldi	r24, 0x76	; 118
 7be:	91 e0       	ldi	r25, 0x01	; 1
 7c0:	21 50       	subi	r18, 0x01	; 1
 7c2:	80 40       	sbci	r24, 0x00	; 0
 7c4:	90 40       	sbci	r25, 0x00	; 0
 7c6:	e1 f7       	brne	.-8      	; 0x7c0 <SPI_Master_TermTrans+0x6>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <SPI_Master_TermTrans+0x10>
 7ca:	00 00       	nop
void SPI_Master_TermTrans(void)
{
	_delay_ms(MASTER_SS_SET_DELAY_MS);

	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	64 e0       	ldi	r22, 0x04	; 4
 7d0:	86 e3       	ldi	r24, 0x36	; 54
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DIO_SetPinValue>
 7d8:	08 95       	ret

000007da <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 7da:	cf 93       	push	r28
 7dc:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 7de:	0e 94 cd 03 	call	0x79a	; 0x79a <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 7e2:	cf b9       	out	0x0f, r28	; 15
		
		while(GetBit(SPI->SPSR,SPIF) == 0);
 7e4:	77 9b       	sbis	0x0e, 7	; 14
 7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <SPI_Transiver+0xa>
		
		Received_Data = SPI->SPDR;
 7e8:	cf b1       	in	r28, 0x0f	; 15

		SPI_Master_TermTrans();
 7ea:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_Master_TermTrans>

		Received_Data = SPI->SPDR;
	#endif /* SPI_ROLE */

	return Received_Data;
}
 7ee:	8c 2f       	mov	r24, r28
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <Status_FollowUp_Init>:
    '\0'
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 7f4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_Init>
 7f8:	08 95       	ret

000007fa <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	d8 2f       	mov	r29, r24
 800:	c6 2f       	mov	r28, r22
    LCD_Clear();
 802:	0e 94 30 03 	call	0x660	; 0x660 <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 806:	20 e1       	ldi	r18, 0x10	; 16
 808:	d2 9f       	mul	r29, r18
 80a:	c0 01       	movw	r24, r0
 80c:	11 24       	eor	r1, r1
 80e:	8f 59       	subi	r24, 0x9F	; 159
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	0e 94 18 03 	call	0x630	; 0x630 <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 81e:	20 e1       	ldi	r18, 0x10	; 16
 820:	c2 9f       	mul	r28, r18
 822:	c0 01       	movw	r24, r0
 824:	11 24       	eor	r1, r1
 826:	8f 59       	subi	r24, 0x9F	; 159
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_WriteString>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	94 e3       	ldi	r25, 0x34	; 52
 832:	2c e0       	ldi	r18, 0x0C	; 12
 834:	81 50       	subi	r24, 0x01	; 1
 836:	90 40       	sbci	r25, 0x00	; 0
 838:	20 40       	sbci	r18, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83e:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret

00000846 <UART_Init>:


void UART_Init(void)
{
	// Set Tx Pin as output & Rx Pin as input
	DIO_SetPinDir(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	80 e3       	ldi	r24, 0x30	; 48
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	DIO_SetPinDir(UART_PORT,UART_RX_PIN, DIO_PIN_INPUT);
 852:	40 e0       	ldi	r20, 0x00	; 0
 854:	61 e0       	ldi	r22, 0x01	; 1
 856:	80 e3       	ldi	r24, 0x30	; 48
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_SetPinDir>
	
	// enable Tx and Rx
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 85e:	8a b1       	in	r24, 0x0a	; 10
 860:	88 61       	ori	r24, 0x18	; 24
 862:	8a b9       	out	0x0a, r24	; 10
	
	// Choose UCSRC Register then set data size to be 8 bits
	UCSRC |= (1<<UCSRC_URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 864:	80 b5       	in	r24, 0x20	; 32
 866:	86 68       	ori	r24, 0x86	; 134
 868:	80 bd       	out	0x20, r24	; 32
	
	// Set Baud Rate
	UBRRL = ( UART_Clk_Sor / (UART_Presc * Baud_Rate_Hundred) ) - 1;
 86a:	89 e1       	ldi	r24, 0x19	; 25
 86c:	89 b9       	out	0x09, r24	; 9
 86e:	08 95       	ret

00000870 <UART_Tx>:
}

void UART_Tx(uint8 data)
{
	UDR = data;
 870:	8c b9       	out	0x0c, r24	; 12
	while ( GetBit(UCSRA,TXC) == UART_Flag_Down );
 872:	5e 9b       	sbis	0x0b, 6	; 11
 874:	fe cf       	rjmp	.-4      	; 0x872 <UART_Tx+0x2>
	ClearBit(UCSRA,TXC);
 876:	8b b1       	in	r24, 0x0b	; 11
 878:	8f 7b       	andi	r24, 0xBF	; 191
 87a:	8b b9       	out	0x0b, r24	; 11
 87c:	08 95       	ret

0000087e <UART_Rx>:
}

uint8 UART_Rx(void)
{
	while (GetBit(UCSRA,RXC) == UART_Flag_Down);
 87e:	5f 9b       	sbis	0x0b, 7	; 11
 880:	fe cf       	rjmp	.-4      	; 0x87e <UART_Rx>
	ClearBit(UCSRA,RXC);
 882:	8b b1       	in	r24, 0x0b	; 11
 884:	8f 77       	andi	r24, 0x7F	; 127
 886:	8b b9       	out	0x0b, r24	; 11
	return UDR;
 888:	8c b1       	in	r24, 0x0c	; 12
}
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>
