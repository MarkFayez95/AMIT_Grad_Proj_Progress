
Smart_Home_ACT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e8  00800060  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800348  00800348  00000e54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003197  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000100b  00000000  00000000  0000432f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ec  00000000  00000000  0000533a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  00006728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fa4  00000000  00000000  00006cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001182  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00008dfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 34       	cpi	r26, 0x48	; 72
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a8 e4       	ldi	r26, 0x48	; 72
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3a 04 	call	0x874	; 0x874 <main>
  8a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CMD_Bus_HandShake>:
        if ((*Ack_Req_Response == ACK_RES) || (*Ack_Req_Response == NACK_RES))
            return RECEIVED;
        else 
            return INVALID_ACK_RESPONSE;
    }
}
  92:	cf 93       	push	r28
  94:	0e 94 8b 04 	call	0x916	; 0x916 <SPI_Master_InitTrans>
  98:	80 ea       	ldi	r24, 0xA0	; 160
  9a:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_Transiver>
  9e:	c8 2f       	mov	r28, r24
  a0:	88 23       	and	r24, r24
  a2:	d1 f3       	breq	.-12     	; 0x98 <CMD_Bus_HandShake+0x6>
  a4:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_Master_TermTrans>
  a8:	c0 3b       	cpi	r28, 0xB0	; 176
  aa:	11 f4       	brne	.+4      	; 0xb0 <CMD_Bus_HandShake+0x1e>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <CMD_Bus_HandShake+0x20>
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <CMD_Bus_Slave_Init>:
  b6:	0e 94 b8 04 	call	0x970	; 0x970 <SPI_Slave_Init>
  ba:	08 95       	ret

000000bc <CMD_Bus_Write>:
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	d8 2f       	mov	r29, r24
  c2:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	61 f0       	breq	.+24     	; 0xe2 <CMD_Bus_Write+0x26>
  ca:	0e 94 8b 04 	call	0x916	; 0x916 <SPI_Master_InitTrans>
  ce:	8d 2f       	mov	r24, r29
  d0:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_Transiver>
  d4:	c8 2f       	mov	r28, r24
  d6:	88 23       	and	r24, r24
  d8:	d1 f3       	breq	.-12     	; 0xce <CMD_Bus_Write+0x12>
  da:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_Master_TermTrans>
  de:	8c 2f       	mov	r24, r28
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <CMD_Bus_Write+0x28>
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <CMD_Bus_Read>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
  f0:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	51 f0       	breq	.+20     	; 0x10c <CMD_Bus_Read+0x22>
  f8:	0e 94 8b 04 	call	0x916	; 0x916 <SPI_Master_InitTrans>
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_Transiver>
 102:	88 83       	st	Y, r24
 104:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_Master_TermTrans>
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	01 c0       	rjmp	.+2      	; 0x10e <CMD_Bus_Read+0x24>
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <CMD_Bus_Res_Ack>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Res_Ack(uint8 Ack_Response)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	d8 2f       	mov	r29, r24
    uint8 Response=0;
    Response = CMD_Bus_HandShake();
 11a:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>

    if(Response == INVALID_PEER)
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	71 f0       	breq	.+28     	; 0x13e <CMD_Bus_Res_Ack+0x2a>
        return PEER_UNAVAILABLE;
    else 
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 122:	0e 94 8b 04 	call	0x916	; 0x916 <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        do{Response = SPI_Transiver(Ack_Response);}
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 a2 04 	call	0x944	; 0x944 <SPI_Transiver>
 12c:	c8 2f       	mov	r28, r24
        while(Response == REQ_DROPPED);
 12e:	88 23       	and	r24, r24
 130:	d1 f3       	breq	.-12     	; 0x126 <CMD_Bus_Res_Ack+0x12>

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 132:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */

        if (Response == REQUEST_ACK)
 136:	c6 30       	cpi	r28, 0x06	; 6
 138:	21 f4       	brne	.+8      	; 0x142 <CMD_Bus_Res_Ack+0x2e>
            return DELIVERED;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	03 c0       	rjmp	.+6      	; 0x144 <CMD_Bus_Res_Ack+0x30>
{
    uint8 Response=0;
    Response = CMD_Bus_HandShake();

    if(Response == INVALID_PEER)
        return PEER_UNAVAILABLE;
 13e:	8b e0       	ldi	r24, 0x0B	; 11
 140:	01 c0       	rjmp	.+2      	; 0x144 <CMD_Bus_Res_Ack+0x30>
        #endif /* SPI_ROLE */

        if (Response == REQUEST_ACK)
            return DELIVERED;
        else 
            return INVALID_ACK_REQUEST;
 142:	89 e0       	ldi	r24, 0x09	; 9
    }
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <Comm_Bridge_Init>:

        // Comm_Bridge_Init :: Status LCD Display 'Control Bus' 'Slave Ready'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_SLAVE_READY);
        
    #elif COMM_BRI_ROLE == ACTUATOR_ECU
        CMD_Bus_Slave_Init();
 14a:	0e 94 5b 00 	call	0xb6	; 0xb6 <CMD_Bus_Slave_Init>
        while(CMD_Bus_HandShake() == INVALID_PEER)
 14e:	04 c0       	rjmp	.+8      	; 0x158 <Comm_Bridge_Init+0xe>
        {
            // Comm_Bridge_Init :: Status LCD Display 'Control Bus' 'Invalid Peer'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_PEER);
 150:	6c e0       	ldi	r22, 0x0C	; 12
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
        // Comm_Bridge_Init :: Status LCD Display 'Control Bus' 'Slave Ready'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_SLAVE_READY);
        
    #elif COMM_BRI_ROLE == ACTUATOR_ECU
        CMD_Bus_Slave_Init();
        while(CMD_Bus_HandShake() == INVALID_PEER)
 158:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	c1 f3       	breq	.-16     	; 0x150 <Comm_Bridge_Init+0x6>
            // Comm_Bridge_Init :: Status LCD Display 'Control Bus' 'Invalid Peer'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_PEER);
        }

        // Comm_Bridge_Init :: Status LCD Display 'Control Bus' 'Master Ready'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_MASTER_READY);
 160:	60 e1       	ldi	r22, 0x10	; 16
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
 168:	08 95       	ret

0000016a <Comm_Bridge_CMD_Read_Req>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Read_Req(uint8* Request_Command)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
    uint8 ECUs_Comm_State = REQ_DROPPED;
    ECUs_Comm_State = CMD_Bus_Read(Request_Command);
 170:	0e 94 75 00 	call	0xea	; 0xea <CMD_Bus_Read>
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 174:	0d c0       	rjmp	.+26     	; 0x190 <Comm_Bridge_CMD_Read_Req+0x26>
    {
        // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 176:	65 e1       	ldi	r22, 0x15	; 21
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>

        ECUs_Comm_State = CMD_Bus_Read(Request_Command);
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 75 00 	call	0xea	; 0xea <CMD_Bus_Read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	ef e5       	ldi	r30, 0x5F	; 95
 186:	fa ee       	ldi	r31, 0xEA	; 234
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <Comm_Bridge_CMD_Read_Req+0x1e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <Comm_Bridge_CMD_Read_Req+0x24>
 18e:	00 00       	nop
**/
void Comm_Bridge_CMD_Read_Req(uint8* Request_Command)
{
    uint8 ECUs_Comm_State = REQ_DROPPED;
    ECUs_Comm_State = CMD_Bus_Read(Request_Command);
    while(ECUs_Comm_State == PEER_UNAVAILABLE)
 190:	8b 30       	cpi	r24, 0x0B	; 11
 192:	89 f3       	breq	.-30     	; 0x176 <Comm_Bridge_CMD_Read_Req+0xc>
    Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_OP_SELECTED);

    #elif COMMAND_BYTE_LENGTH == 1

    // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Dev/Op Selected'
    Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_DEV_OP_SELECTED);
 194:	6b e1       	ldi	r22, 0x1B	; 27
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
    
    #endif /* COMMAND_BYTE_LENGTH */
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <Comm_Bridge_CMD_Res>:
 * Outputs: ...
 * Returns: ...
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	8c 01       	movw	r16, r24
    uint8 Ack_Request = INVALID_ACK_REQUEST;
    if(*Ack_Response == REQ_DONE)
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	b9 f4       	brne	.+46     	; 0x1e0 <Comm_Bridge_CMD_Res+0x3e>
    {
        do
        {
            Ack_Request = CMD_Bus_Res_Ack(*Ack_Response);
 1b2:	f8 01       	movw	r30, r16
 1b4:	80 81       	ld	r24, Z
 1b6:	0e 94 8a 00 	call	0x114	; 0x114 <CMD_Bus_Res_Ack>
 1ba:	c8 2f       	mov	r28, r24
            if(Ack_Request == PEER_UNAVAILABLE)
 1bc:	8b 30       	cpi	r24, 0x0B	; 11
 1be:	29 f4       	brne	.+10     	; 0x1ca <Comm_Bridge_CMD_Res+0x28>
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Peer Unavailable'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 1c0:	65 e1       	ldi	r22, 0x15	; 21
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <Comm_Bridge_CMD_Res+0x34>
            }
            else if (Ack_Request == INVALID_ACK_REQUEST)
 1ca:	89 30       	cpi	r24, 0x09	; 9
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <Comm_Bridge_CMD_Res+0x34>
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
 1ce:	6a e0       	ldi	r22, 0x0A	; 10
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
            }
            
        }
        while((Ack_Request == PEER_UNAVAILABLE) || (Ack_Request == INVALID_ACK_REQUEST));
 1d6:	cb 30       	cpi	r28, 0x0B	; 11
 1d8:	61 f3       	breq	.-40     	; 0x1b2 <Comm_Bridge_CMD_Res+0x10>
 1da:	c9 30       	cpi	r28, 0x09	; 9
 1dc:	51 f3       	breq	.-44     	; 0x1b2 <Comm_Bridge_CMD_Res+0x10>
 1de:	24 c0       	rjmp	.+72     	; 0x228 <Comm_Bridge_CMD_Res+0x86>
    else
    {
        
        do
        {
            Ack_Request = CMD_Bus_Res_Ack(NACK_RES);
 1e0:	87 e0       	ldi	r24, 0x07	; 7
 1e2:	0e 94 8a 00 	call	0x114	; 0x114 <CMD_Bus_Res_Ack>
 1e6:	c8 2f       	mov	r28, r24
            if(Ack_Request == PEER_UNAVAILABLE)
 1e8:	8b 30       	cpi	r24, 0x0B	; 11
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <Comm_Bridge_CMD_Res+0x54>
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Peer Unavailable'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 1ec:	65 e1       	ldi	r22, 0x15	; 21
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <Comm_Bridge_CMD_Res+0x60>
            }
            else if (Ack_Request == INVALID_ACK_REQUEST)
 1f6:	89 30       	cpi	r24, 0x09	; 9
 1f8:	21 f4       	brne	.+8      	; 0x202 <Comm_Bridge_CMD_Res+0x60>
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
 1fa:	6a e0       	ldi	r22, 0x0A	; 10
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
            }
            
        }
        while((Ack_Request == PEER_UNAVAILABLE) || (Ack_Request == INVALID_ACK_REQUEST));
 202:	cb 30       	cpi	r28, 0x0B	; 11
 204:	69 f3       	breq	.-38     	; 0x1e0 <Comm_Bridge_CMD_Res+0x3e>
 206:	c9 30       	cpi	r28, 0x09	; 9
 208:	59 f3       	breq	.-42     	; 0x1e0 <Comm_Bridge_CMD_Res+0x3e>
        
        Ack_Request = CMD_Bus_Write(*Ack_Response);
 20a:	f8 01       	movw	r30, r16
 20c:	80 81       	ld	r24, Z
 20e:	0e 94 5e 00 	call	0xbc	; 0xbc <CMD_Bus_Write>

        do
        {
            Ack_Request = CMD_Bus_Write(*Ack_Response);
 212:	f8 01       	movw	r30, r16
 214:	80 81       	ld	r24, Z
 216:	0e 94 5e 00 	call	0xbc	; 0xbc <CMD_Bus_Write>
 21a:	c8 2f       	mov	r28, r24

            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 21c:	65 e1       	ldi	r22, 0x15	; 21
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
        }
        while(Ack_Request == PEER_UNAVAILABLE);
 224:	cb 30       	cpi	r28, 0x0B	; 11
 226:	a9 f3       	breq	.-22     	; 0x212 <Comm_Bridge_CMD_Res+0x70>
    }
    // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Response Sent'
    Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_RESPONSE_SENT);
 228:	6c e1       	ldi	r22, 0x1C	; 28
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <Devices_DB_Config>:
#include "Status_FollowUp.h"

volatile DevicesDB Smart_Home_Devices;

void Devices_DB_Config(DevicesDB* Smart_Home_DevDB)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	68 97       	sbiw	r28, 0x18	; 24
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
	FunctionPointer Op_Fun_Ptr[NUM_OF_DEVICES][MAX_OPS_PER_DEV+1] =
 250:	28 e1       	ldi	r18, 0x18	; 24
 252:	e0 e3       	ldi	r30, 0x30	; 48
 254:	f3 e0       	ldi	r31, 0x03	; 3
 256:	de 01       	movw	r26, r28
 258:	11 96       	adiw	r26, 0x01	; 1
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	2a 95       	dec	r18
 260:	e1 f7       	brne	.-8      	; 0x25a <Devices_DB_Config+0x22>
	Device_Codes Dev_Cod = LED_0;
	
	uint8 device_counter = 0;
	uint8 Operation_counter = 0;
	
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	46 c0       	rjmp	.+140    	; 0x2f2 <Devices_DB_Config+0xba>
	{
		Dev_Cod = LED_0;
		Smart_Home_DevDB->Device[device_counter].Device_Ref = (Dev_Cod+device_counter+DEV_CONST) << 4;
 266:	47 2f       	mov	r20, r23
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	fa 01       	movw	r30, r20
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	9a 01       	movw	r18, r20
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	e2 0f       	add	r30, r18
 280:	f3 1f       	adc	r31, r19
 282:	e8 0f       	add	r30, r24
 284:	f9 1f       	adc	r31, r25
 286:	67 e0       	ldi	r22, 0x07	; 7
 288:	67 0f       	add	r22, r23
 28a:	62 95       	swap	r22
 28c:	60 7f       	andi	r22, 0xF0	; 240
 28e:	60 83       	st	Z, r22
		Smart_Home_DevDB->Device[device_counter].Init = Op_Fun_Ptr[device_counter][INIT_FUN_INDEX];
 290:	a1 e0       	ldi	r26, 0x01	; 1
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	ac 0f       	add	r26, r28
 296:	bd 1f       	adc	r27, r29
 298:	a2 0f       	add	r26, r18
 29a:	b3 1f       	adc	r27, r19
 29c:	2d 91       	ld	r18, X+
 29e:	3c 91       	ld	r19, X
 2a0:	32 83       	std	Z+2, r19	; 0x02
 2a2:	21 83       	std	Z+1, r18	; 0x01
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	22 c0       	rjmp	.+68     	; 0x2ec <Devices_DB_Config+0xb4>
		{
			Smart_Home_DevDB->Device[device_counter].OpFn[Operation_counter] =  Op_Fun_Ptr[device_counter][Operation_counter+1];
 2a8:	26 2f       	mov	r18, r22
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	d9 01       	movw	r26, r18
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	fa 01       	movw	r30, r20
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	ae 0f       	add	r26, r30
 2bc:	bf 1f       	adc	r27, r31
 2be:	aa 0f       	add	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	01 e0       	ldi	r16, 0x01	; 1
 2c4:	10 e0       	ldi	r17, 0x00	; 0
 2c6:	0c 0f       	add	r16, r28
 2c8:	1d 1f       	adc	r17, r29
 2ca:	a0 0f       	add	r26, r16
 2cc:	b1 1f       	adc	r27, r17
 2ce:	0d 90       	ld	r0, X+
 2d0:	bc 91       	ld	r27, X
 2d2:	a0 2d       	mov	r26, r0
 2d4:	e4 0f       	add	r30, r20
 2d6:	f5 1f       	adc	r31, r21
 2d8:	e2 0f       	add	r30, r18
 2da:	f3 1f       	adc	r31, r19
 2dc:	32 96       	adiw	r30, 0x02	; 2
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	e8 0f       	add	r30, r24
 2e4:	f9 1f       	adc	r31, r25
 2e6:	b1 83       	std	Z+1, r27	; 0x01
 2e8:	a0 83       	st	Z, r26
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
	{
		Dev_Cod = LED_0;
		Smart_Home_DevDB->Device[device_counter].Device_Ref = (Dev_Cod+device_counter+DEV_CONST) << 4;
		Smart_Home_DevDB->Device[device_counter].Init = Op_Fun_Ptr[device_counter][INIT_FUN_INDEX];
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	63 30       	cpi	r22, 0x03	; 3
 2ee:	e0 f2       	brcs	.-72     	; 0x2a8 <Devices_DB_Config+0x70>
	Device_Codes Dev_Cod = LED_0;
	
	uint8 device_counter = 0;
	uint8 Operation_counter = 0;
	
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 2f0:	7f 5f       	subi	r23, 0xFF	; 255
 2f2:	73 30       	cpi	r23, 0x03	; 3
 2f4:	08 f4       	brcc	.+2      	; 0x2f8 <Devices_DB_Config+0xc0>
 2f6:	b7 cf       	rjmp	.-146    	; 0x266 <Devices_DB_Config+0x2e>
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
		{
			Smart_Home_DevDB->Device[device_counter].OpFn[Operation_counter] =  Op_Fun_Ptr[device_counter][Operation_counter+1];
		}
	}
}
 2f8:	68 96       	adiw	r28, 0x18	; 24
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <Devices_Init>:

void Devices_Init(void)
{
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
	uint8 device_counter = 0;
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	1c c0       	rjmp	.+56     	; 0x350 <Devices_Init+0x42>
	{
		Smart_Home_Devices.Device[device_counter].Init();
 318:	81 2f       	mov	r24, r17
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ec 01       	movw	r28, r24
 31e:	cc 0f       	add	r28, r28
 320:	dd 1f       	adc	r29, r29
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	c8 0f       	add	r28, r24
 330:	d9 1f       	adc	r29, r25
 332:	c6 5b       	subi	r28, 0xB6	; 182
 334:	dc 4f       	sbci	r29, 0xFC	; 252
 336:	e9 81       	ldd	r30, Y+1	; 0x01
 338:	fa 81       	ldd	r31, Y+2	; 0x02
 33a:	09 95       	icall
		Smart_Home_Devices.Device[device_counter].OpFn[OP_1]();
 33c:	ec 81       	ldd	r30, Y+4	; 0x04
 33e:	fd 81       	ldd	r31, Y+5	; 0x05
 340:	09 95       	icall
		Smart_Home_Devices.Device[device_counter].Current_Operation = OP_1;
 342:	1b 82       	std	Y+3, r1	; 0x03
		
		Status_Disp_LCD_IncludeInteger(LCD_ROW_TXT_DEVICE_,(device_counter + 1),LCD_ROW_TXT_READY);
 344:	1f 5f       	subi	r17, 0xFF	; 255
 346:	4e e1       	ldi	r20, 0x1E	; 30
 348:	61 2f       	mov	r22, r17
 34a:	8d e1       	ldi	r24, 0x1D	; 29
 34c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Status_Disp_LCD_IncludeInteger>
}

void Devices_Init(void)
{
	uint8 device_counter = 0;
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 350:	13 30       	cpi	r17, 0x03	; 3
 352:	10 f3       	brcs	.-60     	; 0x318 <Devices_Init+0xa>
		Smart_Home_Devices.Device[device_counter].OpFn[OP_1]();
		Smart_Home_Devices.Device[device_counter].Current_Operation = OP_1;
		
		Status_Disp_LCD_IncludeInteger(LCD_ROW_TXT_DEVICE_,(device_counter + 1),LCD_ROW_TXT_READY);
	}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	08 95       	ret

0000035c <Dev_Op_Check_Valid>:
uint8 Dev_Op_Check_Valid(uint8 Req_Device, uint8 Req_Operation)
{
	if(((Req_Device-DEV_CONST) >= 0) && ((Req_Device-DEV_CONST)<NUM_OF_DEVICES))
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	07 97       	sbiw	r24, 0x07	; 7
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	91 05       	cpc	r25, r1
 364:	50 f5       	brcc	.+84     	; 0x3ba <Dev_Op_Check_Valid+0x5e>
	{
		if (((Req_Operation-OPER_CONST) >= 0) && ((Req_Operation-OPER_CONST) < MAX_OPS_PER_DEV))
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	67 50       	subi	r22, 0x07	; 7
 36a:	71 09       	sbc	r23, r1
 36c:	63 30       	cpi	r22, 0x03	; 3
 36e:	71 05       	cpc	r23, r1
 370:	f0 f4       	brcc	.+60     	; 0x3ae <Dev_Op_Check_Valid+0x52>
		{
			if((Req_Operation-OPER_CONST) == Smart_Home_Devices.Device[(Req_Device-DEV_CONST)].Current_Operation)
 372:	fc 01       	movw	r30, r24
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	e8 0f       	add	r30, r24
 386:	f9 1f       	adc	r31, r25
 388:	e6 5b       	subi	r30, 0xB6	; 182
 38a:	fc 4f       	sbci	r31, 0xFC	; 252
 38c:	83 81       	ldd	r24, Z+3	; 0x03
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	68 17       	cp	r22, r24
 392:	79 07       	cpc	r23, r25
 394:	31 f4       	brne	.+12     	; 0x3a2 <Dev_Op_Check_Valid+0x46>
			{
				Status_Disp_LCD(LCD_ROW_TXT_OP_SELECTED,LCD_ROW_TXT_ALREADY_RUNNING);
 396:	6f e1       	ldi	r22, 0x1F	; 31
 398:	8a e1       	ldi	r24, 0x1A	; 26
 39a:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
				
				return OP_INVALID;
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	08 95       	ret
			}
			else
			{
				Status_Disp_LCD(LCD_ROW_TXT_VALID_SELECTION,LCD_ROW_TXT_PROCEEDING);
 3a2:	62 e1       	ldi	r22, 0x12	; 18
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>

				return DEV_N_OP_VALID;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
			}
		}
		else
		{
			Status_Disp_LCD(LCD_ROW_TXT_OP_SELECTED,LCD_ROW_TXT_INVALID);
 3ae:	61 e2       	ldi	r22, 0x21	; 33
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>

			return OP_INVALID;
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	08 95       	ret
		}
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_DEVICE_SELECTED,LCD_ROW_TXT_INVALID);
 3ba:	61 e2       	ldi	r22, 0x21	; 33
 3bc:	89 e1       	ldi	r24, 0x19	; 25
 3be:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>

		return DEV_INVALID;
 3c2:	83 e0       	ldi	r24, 0x03	; 3
	}
}
 3c4:	08 95       	ret

000003c6 <Device_Apply_Request>:
void Device_Apply_Request(uint8 Req_Device, uint8 Req_Operation)
{
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	16 2f       	mov	r17, r22
	Smart_Home_Devices.Device[Req_Device-DEV_CONST].OpFn[Req_Operation-OPER_CONST]();
 3ce:	c8 2f       	mov	r28, r24
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	27 97       	sbiw	r28, 0x07	; 7
 3d4:	e6 2f       	mov	r30, r22
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	cf 01       	movw	r24, r30
 3da:	07 97       	sbiw	r24, 0x07	; 7
 3dc:	fe 01       	movw	r30, r28
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ec 0f       	add	r30, r28
 3e8:	fd 1f       	adc	r31, r29
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	32 96       	adiw	r30, 0x02	; 2
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	e6 5b       	subi	r30, 0xB6	; 182
 3f6:	fc 4f       	sbci	r31, 0xFC	; 252
 3f8:	01 90       	ld	r0, Z+
 3fa:	f0 81       	ld	r31, Z
 3fc:	e0 2d       	mov	r30, r0
 3fe:	09 95       	icall
	Smart_Home_Devices.Device[Req_Device-DEV_CONST].Current_Operation = (Req_Operation-OPER_CONST);
 400:	17 50       	subi	r17, 0x07	; 7
 402:	ce 01       	movw	r24, r28
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	cc 0f       	add	r28, r28
 40a:	dd 1f       	adc	r29, r29
 40c:	cc 0f       	add	r28, r28
 40e:	dd 1f       	adc	r29, r29
 410:	cc 0f       	add	r28, r28
 412:	dd 1f       	adc	r29, r29
 414:	c8 0f       	add	r28, r24
 416:	d9 1f       	adc	r29, r25
 418:	c6 5b       	subi	r28, 0xB6	; 182
 41a:	dc 4f       	sbci	r29, 0xFC	; 252
 41c:	1b 83       	std	Y+3, r17	; 0x03
	
	Status_Disp_LCD(LCD_ROW_TXT_DEVICE_OP,LCD_ROW_TXT_APPLIED);
 41e:	63 e2       	ldi	r22, 0x23	; 35
 420:	82 e2       	ldi	r24, 0x22	; 34
 422:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	08 95       	ret

0000042e <DIO_SetPinDir>:
	*Value = GetBit(Port->PIN,Pin);
}

void DIO_TogglePort(volatile PORT_REG* Port)
{
	Port->PORT ^= DIO_PORT_HIGH;
 42e:	fc 01       	movw	r30, r24
 430:	94 2f       	mov	r25, r20
 432:	81 81       	ldd	r24, Z+1	; 0x01
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	9a 01       	movw	r18, r20
 43a:	06 2e       	mov	r0, r22
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_SetPinDir+0x14>
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_SetPinDir+0x10>
 446:	32 2f       	mov	r19, r18
 448:	30 95       	com	r19
 44a:	83 23       	and	r24, r19
 44c:	81 83       	std	Z+1, r24	; 0x01
 44e:	81 81       	ldd	r24, Z+1	; 0x01
 450:	49 2f       	mov	r20, r25
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_SetPinDir+0x2c>
 456:	44 0f       	add	r20, r20
 458:	55 1f       	adc	r21, r21
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_SetPinDir+0x28>
 45e:	42 23       	and	r20, r18
 460:	48 2b       	or	r20, r24
 462:	41 83       	std	Z+1, r20	; 0x01
 464:	08 95       	ret

00000466 <DIO_SetPinValue>:
 466:	fc 01       	movw	r30, r24
 468:	94 2f       	mov	r25, r20
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	9a 01       	movw	r18, r20
 472:	06 2e       	mov	r0, r22
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_SetPinValue+0x14>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_SetPinValue+0x10>
 47e:	32 2f       	mov	r19, r18
 480:	30 95       	com	r19
 482:	83 23       	and	r24, r19
 484:	82 83       	std	Z+2, r24	; 0x02
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	49 2f       	mov	r20, r25
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_SetPinValue+0x2c>
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_SetPinValue+0x28>
 496:	42 23       	and	r20, r18
 498:	48 2b       	or	r20, r24
 49a:	42 83       	std	Z+2, r20	; 0x02
 49c:	08 95       	ret

0000049e <DIO_TogglePin>:
	
}
void DIO_TogglePin(volatile PORT_REG* Port, uint8 Pin)
{
	ToggleBit(Port->PORT,Pin);
 49e:	fc 01       	movw	r30, r24
 4a0:	42 81       	ldd	r20, Z+2	; 0x02
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_TogglePin+0xe>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_TogglePin+0xa>
 4b0:	24 27       	eor	r18, r20
 4b2:	22 83       	std	Z+2, r18	; 0x02
 4b4:	08 95       	ret

000004b6 <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand (uint8 cmd)
{
 4b6:	cf 93       	push	r28
 4b8:	c8 2f       	mov	r28, r24
	
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	86 e3       	ldi	r24, 0x36	; 54
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	86 e3       	ldi	r24, 0x36	; 54
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	63 e0       	ldi	r22, 0x03	; 3
 4d6:	86 e3       	ldi	r24, 0x36	; 54
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 4de:	8b b3       	in	r24, 0x1b	; 27
 4e0:	9c 2f       	mov	r25, r28
 4e2:	90 7f       	andi	r25, 0xF0	; 240
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	89 2b       	or	r24, r25
 4e8:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	86 e3       	ldi	r24, 0x36	; 54
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 4f6:	8f e9       	ldi	r24, 0x9F	; 159
 4f8:	9f e0       	ldi	r25, 0x0F	; 15
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_WriteCommand+0x44>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_WriteCommand+0x4a>
 500:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	86 e3       	ldi	r24, 0x36	; 54
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 50e:	20 e1       	ldi	r18, 0x10	; 16
 510:	c2 9f       	mul	r28, r18
 512:	c0 01       	movw	r24, r0
 514:	11 24       	eor	r1, r1
 516:	9b b3       	in	r25, 0x1b	; 27
 518:	9f 70       	andi	r25, 0x0F	; 15
 51a:	89 2b       	or	r24, r25
 51c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	63 e0       	ldi	r22, 0x03	; 3
 522:	86 e3       	ldi	r24, 0x36	; 54
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 52a:	8f e9       	ldi	r24, 0x9F	; 159
 52c:	9f e0       	ldi	r25, 0x0F	; 15
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_WriteCommand+0x78>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_WriteCommand+0x7e>
 534:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	86 e3       	ldi	r24, 0x36	; 54
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 542:	8f e1       	ldi	r24, 0x1F	; 31
 544:	9e e4       	ldi	r25, 0x4E	; 78
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <LCD_WriteCommand+0x90>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_WriteCommand+0x96>
 54c:	00 00       	nop
	DIO_SetPinValue(LCD_8BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
	
	_delay_ms(5);
	
	#endif
}
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <LCD_Init>:

void LCD_Init (void)
{
	#if LCD_MODE == 4
	
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN , DIO_PIN_OUTPUT);
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	86 e3       	ldi	r24, 0x36	; 54
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN , DIO_PIN_OUTPUT);
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	86 e3       	ldi	r24, 0x36	; 54
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN , DIO_PIN_OUTPUT);
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	63 e0       	ldi	r22, 0x03	; 3
 56e:	86 e3       	ldi	r24, 0x36	; 54
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D4_PIN , DIO_PIN_OUTPUT);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	64 e0       	ldi	r22, 0x04	; 4
 57a:	89 e3       	ldi	r24, 0x39	; 57
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D5_PIN , DIO_PIN_OUTPUT);
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	65 e0       	ldi	r22, 0x05	; 5
 586:	89 e3       	ldi	r24, 0x39	; 57
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D6_PIN , DIO_PIN_OUTPUT);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	66 e0       	ldi	r22, 0x06	; 6
 592:	89 e3       	ldi	r24, 0x39	; 57
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D7_PIN , DIO_PIN_OUTPUT);
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	67 e0       	ldi	r22, 0x07	; 7
 59e:	89 e3       	ldi	r24, 0x39	; 57
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	81 ee       	ldi	r24, 0xE1	; 225
 5aa:	94 e0       	ldi	r25, 0x04	; 4
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <LCD_Init+0x5a>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <LCD_Init+0x64>
 5b6:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WriteCommand(0x33);
 5b8:	83 e3       	ldi	r24, 0x33	; 51
 5ba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 5be:	82 e3       	ldi	r24, 0x32	; 50
 5c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 5c4:	88 e2       	ldi	r24, 0x28	; 40
 5c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	
	LCD_WriteCommand(0x0C);
 5ca:	8c e0       	ldi	r24, 0x0C	; 12
 5cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 5d6:	86 e0       	ldi	r24, 0x06	; 6
 5d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
 5e2:	08 95       	ret

000005e4 <LCD_WriteChar>:
	
	#endif
}

void LCD_WriteChar (uint8 data)
{
 5e4:	cf 93       	push	r28
 5e6:	c8 2f       	mov	r28, r24
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	86 e3       	ldi	r24, 0x36	; 54
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	62 e0       	ldi	r22, 0x02	; 2
 5f8:	86 e3       	ldi	r24, 0x36	; 54
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	86 e3       	ldi	r24, 0x36	; 54
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 60c:	8b b3       	in	r24, 0x1b	; 27
 60e:	9c 2f       	mov	r25, r28
 610:	90 7f       	andi	r25, 0xF0	; 240
 612:	8f 70       	andi	r24, 0x0F	; 15
 614:	89 2b       	or	r24, r25
 616:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 618:	41 e0       	ldi	r20, 0x01	; 1
 61a:	63 e0       	ldi	r22, 0x03	; 3
 61c:	86 e3       	ldi	r24, 0x36	; 54
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 624:	8f e9       	ldi	r24, 0x9F	; 159
 626:	9f e0       	ldi	r25, 0x0F	; 15
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <LCD_WriteChar+0x44>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <LCD_WriteChar+0x4a>
 62e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	63 e0       	ldi	r22, 0x03	; 3
 634:	86 e3       	ldi	r24, 0x36	; 54
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 63c:	20 e1       	ldi	r18, 0x10	; 16
 63e:	c2 9f       	mul	r28, r18
 640:	c0 01       	movw	r24, r0
 642:	11 24       	eor	r1, r1
 644:	9b b3       	in	r25, 0x1b	; 27
 646:	9f 70       	andi	r25, 0x0F	; 15
 648:	89 2b       	or	r24, r25
 64a:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 64c:	41 e0       	ldi	r20, 0x01	; 1
 64e:	63 e0       	ldi	r22, 0x03	; 3
 650:	86 e3       	ldi	r24, 0x36	; 54
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 658:	8f e9       	ldi	r24, 0x9F	; 159
 65a:	9f e0       	ldi	r25, 0x0F	; 15
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_WriteChar+0x78>
 660:	00 c0       	rjmp	.+0      	; 0x662 <LCD_WriteChar+0x7e>
 662:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	63 e0       	ldi	r22, 0x03	; 3
 668:	86 e3       	ldi	r24, 0x36	; 54
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 670:	8f e1       	ldi	r24, 0x1F	; 31
 672:	9e e4       	ldi	r25, 0x4E	; 78
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_WriteChar+0x90>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_WriteChar+0x96>
 67a:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
	
}
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <LCD_WriteInteger>:


/*  Assignment  */
void LCD_WriteInteger (sint32 num)
{
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	6b 01       	movw	r12, r22
 690:	7c 01       	movw	r14, r24
	sint32 temp_num;
	uint16 increment_temp_num = 0;
	sint8 counter = 0; // adjusting variable to be signed solve the last loop going infinite
	
	if (num < 0)
 692:	99 23       	and	r25, r25
 694:	5c f4       	brge	.+22     	; 0x6ac <LCD_WriteInteger+0x2c>
	{
		LCD_WriteChar('-');
 696:	8d e2       	ldi	r24, 0x2D	; 45
 698:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_WriteChar>
		temp_num = num * -1;
 69c:	f0 94       	com	r15
 69e:	e0 94       	com	r14
 6a0:	d0 94       	com	r13
 6a2:	c0 94       	com	r12
 6a4:	c1 1c       	adc	r12, r1
 6a6:	d1 1c       	adc	r13, r1
 6a8:	e1 1c       	adc	r14, r1
 6aa:	f1 1c       	adc	r15, r1
	}
	else
		temp_num = num;
	
	if(temp_num == 0)
 6ac:	c1 14       	cp	r12, r1
 6ae:	d1 04       	cpc	r13, r1
 6b0:	e1 04       	cpc	r14, r1
 6b2:	f1 04       	cpc	r15, r1
 6b4:	f9 f4       	brne	.+62     	; 0x6f4 <LCD_WriteInteger+0x74>
	{
		LCD_WriteChar('0');
 6b6:	80 e3       	ldi	r24, 0x30	; 48
 6b8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_WriteChar>
 6bc:	53 c0       	rjmp	.+166    	; 0x764 <LCD_WriteInteger+0xe4>
	}
	else
	{
		while (temp_num > 0 && counter < 10)
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
 6be:	be 01       	movw	r22, r28
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	cc 0f       	add	r28, r28
 6c6:	dd 1f       	adc	r29, r29
 6c8:	cc 0f       	add	r28, r28
 6ca:	dd 1f       	adc	r29, r29
 6cc:	cc 0f       	add	r28, r28
 6ce:	dd 1f       	adc	r29, r29
 6d0:	c6 0f       	add	r28, r22
 6d2:	d7 1f       	adc	r29, r23
 6d4:	c7 01       	movw	r24, r14
 6d6:	b6 01       	movw	r22, r12
 6d8:	2a e0       	ldi	r18, 0x0A	; 10
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	0e 94 1a 05 	call	0xa34	; 0xa34 <__divmodsi4>
 6e4:	c6 0f       	add	r28, r22
 6e6:	d7 1f       	adc	r29, r23
			temp_num /= 10;
 6e8:	c2 2e       	mov	r12, r18
 6ea:	d3 2e       	mov	r13, r19
 6ec:	e4 2e       	mov	r14, r20
 6ee:	f5 2e       	mov	r15, r21
			counter++;
 6f0:	1f 5f       	subi	r17, 0xFF	; 255
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <LCD_WriteInteger+0x7a>
 6f4:	10 e0       	ldi	r17, 0x00	; 0
 6f6:	c0 e0       	ldi	r28, 0x00	; 0
 6f8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_WriteChar('0');
	}
	else
	{
		while (temp_num > 0 && counter < 10)
 6fa:	1c 14       	cp	r1, r12
 6fc:	1d 04       	cpc	r1, r13
 6fe:	1e 04       	cpc	r1, r14
 700:	1f 04       	cpc	r1, r15
 702:	14 f4       	brge	.+4      	; 0x708 <LCD_WriteInteger+0x88>
 704:	1a 30       	cpi	r17, 0x0A	; 10
 706:	dc f2       	brlt	.-74     	; 0x6be <LCD_WriteInteger+0x3e>
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
 708:	11 50       	subi	r17, 0x01	; 1
		while(counter>=0)
 70a:	2a c0       	rjmp	.+84     	; 0x760 <LCD_WriteInteger+0xe0>
		{
			LCD_WriteChar('0' + (increment_temp_num % 10));
 70c:	9e 01       	movw	r18, r28
 70e:	ad ec       	ldi	r26, 0xCD	; 205
 710:	bc ec       	ldi	r27, 0xCC	; 204
 712:	0e 94 39 05 	call	0xa72	; 0xa72 <__umulhisi3>
 716:	96 95       	lsr	r25
 718:	87 95       	ror	r24
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	9c 01       	movw	r18, r24
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	82 0f       	add	r24, r18
 736:	93 1f       	adc	r25, r19
 738:	9e 01       	movw	r18, r28
 73a:	28 1b       	sub	r18, r24
 73c:	39 0b       	sbc	r19, r25
 73e:	c9 01       	movw	r24, r18
 740:	80 5d       	subi	r24, 0xD0	; 208
 742:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_WriteChar>
			increment_temp_num /= 10;
 746:	9e 01       	movw	r18, r28
 748:	ad ec       	ldi	r26, 0xCD	; 205
 74a:	bc ec       	ldi	r27, 0xCC	; 204
 74c:	0e 94 39 05 	call	0xa72	; 0xa72 <__umulhisi3>
 750:	ec 01       	movw	r28, r24
 752:	d6 95       	lsr	r29
 754:	c7 95       	ror	r28
 756:	d6 95       	lsr	r29
 758:	c7 95       	ror	r28
 75a:	d6 95       	lsr	r29
 75c:	c7 95       	ror	r28
			counter--;
 75e:	11 50       	subi	r17, 0x01	; 1
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
		while(counter>=0)
 760:	11 23       	and	r17, r17
 762:	a4 f6       	brge	.-88     	; 0x70c <LCD_WriteInteger+0x8c>
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	08 95       	ret

00000774 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 77c:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 77e:	03 c0       	rjmp	.+6      	; 0x786 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 780:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_WriteChar>
		Str_count++;
 784:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 786:	f8 01       	movw	r30, r16
 788:	ec 0f       	add	r30, r28
 78a:	f1 1d       	adc	r31, r1
 78c:	80 81       	ld	r24, Z
 78e:	81 11       	cpse	r24, r1
 790:	f7 cf       	rjmp	.-18     	; 0x780 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	08 95       	ret

0000079a <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	00 d0       	rcall	.+0      	; 0x7a0 <LCD_GoToLocation+0x6>
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 7a4:	90 e8       	ldi	r25, 0x80	; 128
 7a6:	99 83       	std	Y+1, r25	; 0x01
 7a8:	90 ec       	ldi	r25, 0xC0	; 192
 7aa:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 7ac:	e1 e0       	ldi	r30, 0x01	; 1
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ec 0f       	add	r30, r28
 7b2:	fd 1f       	adc	r31, r29
 7b4:	e8 0f       	add	r30, r24
 7b6:	f1 1d       	adc	r31, r1
 7b8:	80 81       	ld	r24, Z
 7ba:	86 0f       	add	r24, r22
 7bc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
	
}
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_WriteCommand>
 7d0:	08 95       	ret

000007d2 <LED0_Init>:


#ifdef LEDS_VOID_INPUT_FUNCTIONS
	void LED0_Init(void)
	{
		DIO_SetPinDir(LED0_PORT, LED0_PIN, DIO_PIN_OUTPUT);
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	62 e0       	ldi	r22, 0x02	; 2
 7d6:	83 e3       	ldi	r24, 0x33	; 51
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
 7de:	08 95       	ret

000007e0 <LED1_Init>:
	}
	void LED1_Init(void)
	{
		DIO_SetPinDir(LED1_PORT, LED1_PIN, DIO_PIN_OUTPUT);
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	67 e0       	ldi	r22, 0x07	; 7
 7e4:	83 e3       	ldi	r24, 0x33	; 51
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
 7ec:	08 95       	ret

000007ee <LED2_Init>:
	}
	void LED2_Init(void)
	{
		DIO_SetPinDir(LED2_PORT, LED2_PIN, DIO_PIN_OUTPUT);
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	63 e0       	ldi	r22, 0x03	; 3
 7f2:	80 e3       	ldi	r24, 0x30	; 48
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
 7fa:	08 95       	ret

000007fc <LED0_ON>:
	}

	void LED0_ON(void)
	{
		DIO_SetPinValue(LED0_PORT, LED0_PIN, DIO_PIN_HIGH);
 7fc:	41 e0       	ldi	r20, 0x01	; 1
 7fe:	62 e0       	ldi	r22, 0x02	; 2
 800:	83 e3       	ldi	r24, 0x33	; 51
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 808:	08 95       	ret

0000080a <LED1_ON>:
	}
	void LED1_ON(void)
	{
		DIO_SetPinValue(LED1_PORT, LED1_PIN, DIO_PIN_HIGH);
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	67 e0       	ldi	r22, 0x07	; 7
 80e:	83 e3       	ldi	r24, 0x33	; 51
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 816:	08 95       	ret

00000818 <LED2_ON>:
	}
	void LED2_ON(void)
	{
		DIO_SetPinValue(LED2_PORT, LED2_PIN, DIO_PIN_HIGH);
 818:	41 e0       	ldi	r20, 0x01	; 1
 81a:	63 e0       	ldi	r22, 0x03	; 3
 81c:	80 e3       	ldi	r24, 0x30	; 48
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 824:	08 95       	ret

00000826 <LED0_OFF>:
	}

	void LED0_OFF(void)
	{
		DIO_SetPinValue(LED0_PORT, LED0_PIN, DIO_PIN_LOW);
 826:	40 e0       	ldi	r20, 0x00	; 0
 828:	62 e0       	ldi	r22, 0x02	; 2
 82a:	83 e3       	ldi	r24, 0x33	; 51
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 832:	08 95       	ret

00000834 <LED1_OFF>:
	}
	void LED1_OFF(void)
	{
		DIO_SetPinValue(LED1_PORT, LED1_PIN, DIO_PIN_LOW);
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	67 e0       	ldi	r22, 0x07	; 7
 838:	83 e3       	ldi	r24, 0x33	; 51
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 840:	08 95       	ret

00000842 <LED2_OFF>:
	}
	void LED2_OFF(void)
	{
		DIO_SetPinValue(LED2_PORT, LED2_PIN, DIO_PIN_LOW);
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	63 e0       	ldi	r22, 0x03	; 3
 846:	80 e3       	ldi	r24, 0x30	; 48
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 84e:	08 95       	ret

00000850 <LED0_Toggle>:
	}

	void LED0_Toggle(void)
	{
		DIO_TogglePin(LED0_PORT, LED0_PIN);
 850:	62 e0       	ldi	r22, 0x02	; 2
 852:	83 e3       	ldi	r24, 0x33	; 51
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_TogglePin>
 85a:	08 95       	ret

0000085c <LED1_Toggle>:
	}
	void LED1_Toggle(void)
	{
		DIO_TogglePin(LED1_PORT, LED1_PIN);
 85c:	67 e0       	ldi	r22, 0x07	; 7
 85e:	83 e3       	ldi	r24, 0x33	; 51
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_TogglePin>
 866:	08 95       	ret

00000868 <LED2_Toggle>:
	}
	void LED2_Toggle(void)
	{
		DIO_TogglePin(LED2_PORT, LED2_PIN);
 868:	63 e0       	ldi	r22, 0x03	; 3
 86a:	80 e3       	ldi	r24, 0x30	; 48
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 4f 02 	call	0x49e	; 0x49e <DIO_TogglePin>
 872:	08 95       	ret

00000874 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 874:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 878:	0e 94 86 04 	call	0x90c	; 0x90c <Smart_Home_Run>
 87c:	fd cf       	rjmp	.-6      	; 0x878 <main+0x4>

0000087e <Smart_Home_Read_N_Decode>:
	Comm_Bridge_BT_Send(Selection_Validity);
}
#elif ECU_ROLE == ACTUATOR_ECU
static void Smart_Home_Read_N_Decode(void)
{
	Comm_Bridge_CMD_Read_Req(User_Selection);
 87e:	88 e6       	ldi	r24, 0x68	; 104
 880:	93 e0       	ldi	r25, 0x03	; 3
 882:	0e 94 b5 00 	call	0x16a	; 0x16a <Comm_Bridge_CMD_Read_Req>
	#if COMMAND_BYTE_LENGTH == 1
		Selected_Device = User_Selection[CMD_DATA_BYTE] >> REQ_DEV_SHIFT_MASK;
 886:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <User_Selection>
 88a:	98 2f       	mov	r25, r24
 88c:	92 95       	swap	r25
 88e:	9f 70       	andi	r25, 0x0F	; 15
 890:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <Selected_Device>
		Selected_Operation = (User_Selection[CMD_DATA_BYTE] & REQ_OP_MASK);
 894:	8f 70       	andi	r24, 0x0F	; 15
 896:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <__data_end>
 89a:	08 95       	ret

0000089c <Smart_Home_Process_N_Respond>:
		Selected_Device = User_Selection[CMD_DATA_BYTE_1];
		Selected_Operation = User_Selection[CMD_DATA_BYTE_2];
	#endif /* COMMAND_BYTE_LENGTH */
}
static void Smart_Home_Process_N_Respond(void)
{
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	1f 92       	push	r1
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
	uint8 Selection_Validity = SEND_FAILED;
 8a6:	87 e0       	ldi	r24, 0x07	; 7
 8a8:	89 83       	std	Y+1, r24	; 0x01
	Selection_Validity = Dev_Op_Check_Valid(Selected_Device, Selected_Operation);
 8aa:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <__data_end>
 8ae:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <Selected_Device>
 8b2:	0e 94 ae 01 	call	0x35c	; 0x35c <Dev_Op_Check_Valid>
 8b6:	89 83       	std	Y+1, r24	; 0x01
	if(Selection_Validity == DEV_N_OP_VALID)
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	51 f4       	brne	.+20     	; 0x8d0 <Smart_Home_Process_N_Respond+0x34>
	{
		Device_Apply_Request(Selected_Device,Selected_Operation);
 8bc:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <__data_end>
 8c0:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <Selected_Device>
 8c4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Device_Apply_Request>
		
		Status_Disp_LCD(LCD_ROW_TXT_REQUEST,LCD_ROW_TXT_DONE);
 8c8:	68 e2       	ldi	r22, 0x28	; 40
 8ca:	8a e2       	ldi	r24, 0x2A	; 42
 8cc:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
	}
	Selection_Validity += NACK_RES;
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	89 5f       	subi	r24, 0xF9	; 249
 8d4:	89 83       	std	Y+1, r24	; 0x01
	Comm_Bridge_CMD_Res(&Selection_Validity);
 8d6:	ce 01       	movw	r24, r28
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Comm_Bridge_CMD_Res>
}
 8de:	0f 90       	pop	r0
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 8e6:	0e 94 c2 04 	call	0x984	; 0x984 <Status_FollowUp_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
		
	#elif ECU_ROLE == ACTUATOR_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_ACTUATOR_SYSTEM,LCD_ROW_TXT_STARTING);
 8ea:	6b e0       	ldi	r22, 0x0B	; 11
 8ec:	85 e2       	ldi	r24, 0x25	; 37
 8ee:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>

		Devices_DB_Config(&Smart_Home_Devices);
 8f2:	8a e4       	ldi	r24, 0x4A	; 74
 8f4:	93 e0       	ldi	r25, 0x03	; 3
 8f6:	0e 94 1c 01 	call	0x238	; 0x238 <Devices_DB_Config>
		
		Devices_Init();
 8fa:	0e 94 87 01 	call	0x30e	; 0x30e <Devices_Init>
		
		Comm_Bridge_Init();
 8fe:	0e 94 a5 00 	call	0x14a	; 0x14a <Comm_Bridge_Init>
		
		Status_Disp_LCD(LCD_ROW_TXT_ACTUATOR_SYSTEM,LCD_ROW_TXT_READY);
 902:	6e e1       	ldi	r22, 0x1E	; 30
 904:	85 e2       	ldi	r24, 0x25	; 37
 906:	0e 94 c5 04 	call	0x98a	; 0x98a <Status_Disp_LCD>
 90a:	08 95       	ret

0000090c <Smart_Home_Run>:
{
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
		Smart_Home_Process_N_Respond();
	#elif ECU_ROLE == ACTUATOR_ECU
		Smart_Home_Read_N_Decode();
 90c:	0e 94 3f 04 	call	0x87e	; 0x87e <Smart_Home_Read_N_Decode>
		Smart_Home_Process_N_Respond();
 910:	0e 94 4e 04 	call	0x89c	; 0x89c <Smart_Home_Process_N_Respond>
 914:	08 95       	ret

00000916 <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	64 e0       	ldi	r22, 0x04	; 4
 91a:	86 e3       	ldi	r24, 0x36	; 54
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 922:	2f ef       	ldi	r18, 0xFF	; 255
 924:	86 e7       	ldi	r24, 0x76	; 118
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	21 50       	subi	r18, 0x01	; 1
 92a:	80 40       	sbci	r24, 0x00	; 0
 92c:	90 40       	sbci	r25, 0x00	; 0
 92e:	e1 f7       	brne	.-8      	; 0x928 <SPI_Master_InitTrans+0x12>
 930:	00 c0       	rjmp	.+0      	; 0x932 <SPI_Master_InitTrans+0x1c>
 932:	00 00       	nop
 934:	08 95       	ret

00000936 <SPI_Master_TermTrans>:
}

void SPI_Master_TermTrans(void)
{
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	64 e0       	ldi	r22, 0x04	; 4
 93a:	86 e3       	ldi	r24, 0x36	; 54
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 33 02 	call	0x466	; 0x466 <DIO_SetPinValue>
 942:	08 95       	ret

00000944 <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 944:	cf 93       	push	r28
 946:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	uint8 Trans_N_Started_counter = 1;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 948:	0e 94 8b 04 	call	0x916	; 0x916 <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 94c:	cf b9       	out	0x0f, r28	; 15
}

uint8 SPI_Transiver(uint8 data)
{
	uint8 Received_Data = 0;
	uint8 Trans_N_Started_counter = 1;
 94e:	81 e0       	ldi	r24, 0x01	; 1
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 950:	01 c0       	rjmp	.+2      	; 0x954 <SPI_Transiver+0x10>
			Trans_N_Started_counter++;
 952:	8f 5f       	subi	r24, 0xFF	; 255
		SPI_Master_InitTrans();
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
 954:	77 99       	sbic	0x0e, 7	; 14
 956:	02 c0       	rjmp	.+4      	; 0x95c <SPI_Transiver+0x18>
 958:	81 11       	cpse	r24, r1
 95a:	fb cf       	rjmp	.-10     	; 0x952 <SPI_Transiver+0xe>
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
 95c:	88 23       	and	r24, r24
 95e:	11 f0       	breq	.+4      	; 0x964 <SPI_Transiver+0x20>
			Received_Data = TRANS_FAILED;
		else
			Received_Data = SPI->SPDR;
 960:	cf b1       	in	r28, 0x0f	; 15
 962:	01 c0       	rjmp	.+2      	; 0x966 <SPI_Transiver+0x22>
		SPI->SPDR = data;
		
		while((GetBit(SPI->SPSR,SPIF) == 0) && (Trans_N_Started_counter != 0))
			Trans_N_Started_counter++;
		if(Trans_N_Started_counter == 0)
			Received_Data = TRANS_FAILED;
 964:	c0 e0       	ldi	r28, 0x00	; 0
		else
			Received_Data = SPI->SPDR;

		SPI_Master_TermTrans();
 966:	0e 94 9b 04 	call	0x936	; 0x936 <SPI_Master_TermTrans>
			Received_Data = SPI->SPDR;
		
		
	#endif
	return Received_Data;
}
 96a:	8c 2f       	mov	r24, r28
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <SPI_Slave_Init>:

void SPI_Slave_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_OUTPUT);
 970:	41 e0       	ldi	r20, 0x01	; 1
 972:	66 e0       	ldi	r22, 0x06	; 6
 974:	86 e3       	ldi	r24, 0x36	; 54
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 17 02 	call	0x42e	; 0x42e <DIO_SetPinDir>
	//DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_INPUT);
	//SS
	//DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_INPUT);
	
	// Enable SPI Peripheral & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<SPE) | (1<<CPHA);
 97c:	8d b1       	in	r24, 0x0d	; 13
 97e:	84 64       	ori	r24, 0x44	; 68
 980:	8d b9       	out	0x0d, r24	; 13
 982:	08 95       	ret

00000984 <Status_FollowUp_Init>:
    "Invalid Operation Requested!"
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 984:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_Init>
 988:	08 95       	ret

0000098a <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	d8 2f       	mov	r29, r24
 990:	c6 2f       	mov	r28, r22
    LCD_Clear();
 992:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 996:	20 e1       	ldi	r18, 0x10	; 16
 998:	d2 9f       	mul	r29, r18
 99a:	c0 01       	movw	r24, r0
 99c:	11 24       	eor	r1, r1
 99e:	80 5a       	subi	r24, 0xA0	; 160
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 9ae:	20 e1       	ldi	r18, 0x10	; 16
 9b0:	c2 9f       	mul	r28, r18
 9b2:	c0 01       	movw	r24, r0
 9b4:	11 24       	eor	r1, r1
 9b6:	80 5a       	subi	r24, 0xA0	; 160
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_WriteString>
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	96 e1       	ldi	r25, 0x16	; 22
 9c2:	21 e1       	ldi	r18, 0x11	; 17
 9c4:	81 50       	subi	r24, 0x01	; 1
 9c6:	90 40       	sbci	r25, 0x00	; 0
 9c8:	20 40       	sbci	r18, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <Status_Disp_LCD+0x3a>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <Status_Disp_LCD+0x44>
 9ce:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	08 95       	ret

000009d6 <Status_Disp_LCD_IncludeInteger>:
void Status_Disp_LCD_IncludeInteger(uint8 R1_Text_Index,uint8 Integer_Number, uint8 R2_Text_Index)
{
 9d6:	1f 93       	push	r17
 9d8:	cf 93       	push	r28
 9da:	df 93       	push	r29
 9dc:	18 2f       	mov	r17, r24
 9de:	d6 2f       	mov	r29, r22
 9e0:	c4 2f       	mov	r28, r20
    LCD_Clear();
 9e2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <LCD_Clear>
	LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	12 9f       	mul	r17, r18
 9ea:	c0 01       	movw	r24, r0
 9ec:	11 24       	eor	r1, r1
 9ee:	80 5a       	subi	r24, 0xA0	; 160
 9f0:	9f 4f       	sbci	r25, 0xFF	; 255
 9f2:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_WriteString>
	LCD_WriteInteger(Integer_Number);
 9f6:	6d 2f       	mov	r22, r29
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 40 03 	call	0x680	; 0x680 <LCD_WriteInteger>
	LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_GoToLocation>
	LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 a0a:	20 e1       	ldi	r18, 0x10	; 16
 a0c:	c2 9f       	mul	r28, r18
 a0e:	c0 01       	movw	r24, r0
 a10:	11 24       	eor	r1, r1
 a12:	80 5a       	subi	r24, 0xA0	; 160
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_WriteString>
 a1a:	8f ef       	ldi	r24, 0xFF	; 255
 a1c:	96 e1       	ldi	r25, 0x16	; 22
 a1e:	21 e1       	ldi	r18, 0x11	; 17
 a20:	81 50       	subi	r24, 0x01	; 1
 a22:	90 40       	sbci	r25, 0x00	; 0
 a24:	20 40       	sbci	r18, 0x00	; 0
 a26:	e1 f7       	brne	.-8      	; 0xa20 <Status_Disp_LCD_IncludeInteger+0x4a>
 a28:	00 c0       	rjmp	.+0      	; 0xa2a <Status_Disp_LCD_IncludeInteger+0x54>
 a2a:	00 00       	nop
	_delay_ms(LCD_DISP_DELAY_MS);
}
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	08 95       	ret

00000a34 <__divmodsi4>:
 a34:	05 2e       	mov	r0, r21
 a36:	97 fb       	bst	r25, 7
 a38:	1e f4       	brtc	.+6      	; 0xa40 <__divmodsi4+0xc>
 a3a:	00 94       	com	r0
 a3c:	0e 94 31 05 	call	0xa62	; 0xa62 <__negsi2>
 a40:	57 fd       	sbrc	r21, 7
 a42:	07 d0       	rcall	.+14     	; 0xa52 <__divmodsi4_neg2>
 a44:	0e 94 48 05 	call	0xa90	; 0xa90 <__udivmodsi4>
 a48:	07 fc       	sbrc	r0, 7
 a4a:	03 d0       	rcall	.+6      	; 0xa52 <__divmodsi4_neg2>
 a4c:	4e f4       	brtc	.+18     	; 0xa60 <__divmodsi4_exit>
 a4e:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__negsi2>

00000a52 <__divmodsi4_neg2>:
 a52:	50 95       	com	r21
 a54:	40 95       	com	r20
 a56:	30 95       	com	r19
 a58:	21 95       	neg	r18
 a5a:	3f 4f       	sbci	r19, 0xFF	; 255
 a5c:	4f 4f       	sbci	r20, 0xFF	; 255
 a5e:	5f 4f       	sbci	r21, 0xFF	; 255

00000a60 <__divmodsi4_exit>:
 a60:	08 95       	ret

00000a62 <__negsi2>:
 a62:	90 95       	com	r25
 a64:	80 95       	com	r24
 a66:	70 95       	com	r23
 a68:	61 95       	neg	r22
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	08 95       	ret

00000a72 <__umulhisi3>:
 a72:	a2 9f       	mul	r26, r18
 a74:	b0 01       	movw	r22, r0
 a76:	b3 9f       	mul	r27, r19
 a78:	c0 01       	movw	r24, r0
 a7a:	a3 9f       	mul	r26, r19
 a7c:	70 0d       	add	r23, r0
 a7e:	81 1d       	adc	r24, r1
 a80:	11 24       	eor	r1, r1
 a82:	91 1d       	adc	r25, r1
 a84:	b2 9f       	mul	r27, r18
 a86:	70 0d       	add	r23, r0
 a88:	81 1d       	adc	r24, r1
 a8a:	11 24       	eor	r1, r1
 a8c:	91 1d       	adc	r25, r1
 a8e:	08 95       	ret

00000a90 <__udivmodsi4>:
 a90:	a1 e2       	ldi	r26, 0x21	; 33
 a92:	1a 2e       	mov	r1, r26
 a94:	aa 1b       	sub	r26, r26
 a96:	bb 1b       	sub	r27, r27
 a98:	fd 01       	movw	r30, r26
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <__udivmodsi4_ep>

00000a9c <__udivmodsi4_loop>:
 a9c:	aa 1f       	adc	r26, r26
 a9e:	bb 1f       	adc	r27, r27
 aa0:	ee 1f       	adc	r30, r30
 aa2:	ff 1f       	adc	r31, r31
 aa4:	a2 17       	cp	r26, r18
 aa6:	b3 07       	cpc	r27, r19
 aa8:	e4 07       	cpc	r30, r20
 aaa:	f5 07       	cpc	r31, r21
 aac:	20 f0       	brcs	.+8      	; 0xab6 <__udivmodsi4_ep>
 aae:	a2 1b       	sub	r26, r18
 ab0:	b3 0b       	sbc	r27, r19
 ab2:	e4 0b       	sbc	r30, r20
 ab4:	f5 0b       	sbc	r31, r21

00000ab6 <__udivmodsi4_ep>:
 ab6:	66 1f       	adc	r22, r22
 ab8:	77 1f       	adc	r23, r23
 aba:	88 1f       	adc	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	1a 94       	dec	r1
 ac0:	69 f7       	brne	.-38     	; 0xa9c <__udivmodsi4_loop>
 ac2:	60 95       	com	r22
 ac4:	70 95       	com	r23
 ac6:	80 95       	com	r24
 ac8:	90 95       	com	r25
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	bd 01       	movw	r22, r26
 ad0:	cf 01       	movw	r24, r30
 ad2:	08 95       	ret

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
