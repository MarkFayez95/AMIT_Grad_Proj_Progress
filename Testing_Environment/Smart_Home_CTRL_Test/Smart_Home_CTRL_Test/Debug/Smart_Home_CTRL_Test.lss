
Smart_Home_CTRL_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000302  00800060  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800362  00800362  00000c7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f3d  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001093  00000000  00000000  00003ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b7  00000000  00000000  00004f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  00006530  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f68  00000000  00000000  00006b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000147d  00000000  00000000  00007a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
  8a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Bluetooth_Mod_Init>:
}
void Bluetooth_Mod_Seq_Tx(uint8* Data_Stream)
{
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
    UART_TxString(Data_Stream);
}
  92:	0e 94 4d 04 	call	0x89a	; 0x89a <UART_Init>
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
  a2:	08 95       	ret

000000a4 <Bluetooth_Mod_Ch_Pair>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	ae 01       	movw	r20, r28
  b2:	4f 5f       	subi	r20, 0xFF	; 255
  b4:	5f 4f       	sbci	r21, 0xFF	; 255
  b6:	67 e0       	ldi	r22, 0x07	; 7
  b8:	80 e3       	ldi	r24, 0x30	; 48
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 49 02 	call	0x492	; 0x492 <DIO_ReadPinValue>
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <Bluetooth_Mod_Tx>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  d2:	88 23       	and	r24, r24
  d4:	e1 f3       	breq	.-8      	; 0xce <Bluetooth_Mod_Tx+0x4>
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <UART_Tx>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <Bluetooth_Mod_Seq_Rx>:
void Bluetooth_Mod_Seq_Rx(uint8* Data_Stream)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
    uint8 Data_byte_counter = 0;
    while(Bluetooth_Mod_Ch_Pair() == BT_NOT_PAIRED);
  ec:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
  f0:	88 23       	and	r24, r24
  f2:	e1 f3       	breq	.-8      	; 0xec <Bluetooth_Mod_Seq_Rx+0xc>
  f4:	c0 e0       	ldi	r28, 0x00	; 0
    
    do
    {
        Data_Stream[Data_byte_counter] = UART_Rx();
  f6:	78 01       	movw	r14, r16
  f8:	ec 0e       	add	r14, r28
  fa:	f1 1c       	adc	r15, r1
  fc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <UART_Rx>
 100:	f7 01       	movw	r30, r14
 102:	80 83       	st	Z, r24
        Data_byte_counter++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
    }
    while(Data_Stream[Data_byte_counter-1] != BT_END_PACKET_CODE);
 106:	ec 2f       	mov	r30, r28
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 81       	ld	r24, Z
 112:	8d 30       	cpi	r24, 0x0D	; 13
 114:	81 f7       	brne	.-32     	; 0xf6 <Bluetooth_Mod_Seq_Rx+0x16>
    Data_Stream[Data_byte_counter-1] = 0x00;
 116:	10 82       	st	Z, r1
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	08 95       	ret

00000124 <CMD_Bus_HandShake>:
    
    if (Response == REQUEST_ACK)
        return DELIVERED;
    else 
        return INVALID_ACK_REQUEST;
}
 124:	cf 93       	push	r28
 126:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Master_InitTrans>
 12a:	80 ea       	ldi	r24, 0xA0	; 160
 12c:	0e 94 17 04 	call	0x82e	; 0x82e <SPI_Transiver>
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 07 04 	call	0x80e	; 0x80e <SPI_Master_TermTrans>
 136:	c0 3b       	cpi	r28, 0xB0	; 176
 138:	11 f4       	brne	.+4      	; 0x13e <CMD_Bus_HandShake+0x1a>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <CMD_Bus_HandShake+0x1c>
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <CMD_Bus_Master_Init>:
 144:	0e 94 c6 03 	call	0x78c	; 0x78c <SPI_Master_Init>
 148:	08 95       	ret

0000014a <CMD_Bus_Write>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	d8 2f       	mov	r29, r24
 150:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Master_InitTrans>
 154:	8d 2f       	mov	r24, r29
 156:	0e 94 17 04 	call	0x82e	; 0x82e <SPI_Transiver>
 15a:	c8 2f       	mov	r28, r24
 15c:	0e 94 07 04 	call	0x80e	; 0x80e <SPI_Master_TermTrans>
 160:	cf 3f       	cpi	r28, 0xFF	; 255
 162:	b1 f3       	breq	.-20     	; 0x150 <CMD_Bus_Write+0x6>
 164:	c3 30       	cpi	r28, 0x03	; 3
 166:	11 f0       	breq	.+4      	; 0x16c <CMD_Bus_Write+0x22>
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	01 c0       	rjmp	.+2      	; 0x16e <CMD_Bus_Write+0x24>
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <CMD_Bus_Req_Ack>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
 17a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Master_InitTrans>
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	0e 94 17 04 	call	0x82e	; 0x82e <SPI_Transiver>
 184:	88 83       	st	Y, r24
 186:	0e 94 07 04 	call	0x80e	; 0x80e <SPI_Master_TermTrans>
 18a:	88 81       	ld	r24, Y
 18c:	8f 3f       	cpi	r24, 0xFF	; 255
 18e:	a9 f3       	breq	.-22     	; 0x17a <CMD_Bus_Req_Ack+0x6>
 190:	88 50       	subi	r24, 0x08	; 8
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	10 f4       	brcc	.+4      	; 0x19a <CMD_Bus_Req_Ack+0x26>
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	01 c0       	rjmp	.+2      	; 0x19c <CMD_Bus_Req_Ack+0x28>
 19a:	8b e0       	ldi	r24, 0x0B	; 11
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <CMD_Bus_Req_Reason_NACK>:
 * Outputs: Received code (0x04) if a valid Ack_Response code was received ||OR|| Invalid NACK Reason code (0x11) if not
 * Returns: uint8 (code indicating the status of the requested process)
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Req_Reason_NACK(uint8* Nack_Res_Reason)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
    do
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
 1a8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Master_InitTrans>
        #endif /* SPI_ROLE */

        *Nack_Res_Reason = SPI_Transiver(NACK_REASON_REQ);
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	0e 94 17 04 	call	0x82e	; 0x82e <SPI_Transiver>
 1b2:	88 83       	st	Y, r24

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
 1b4:	0e 94 07 04 	call	0x80e	; 0x80e <SPI_Master_TermTrans>
        #endif /* SPI_ROLE */
    }
    while(*Nack_Res_Reason == PEER_DROPPED);
 1b8:	88 81       	ld	r24, Y
 1ba:	8f 3f       	cpi	r24, 0xFF	; 255
 1bc:	a9 f3       	breq	.-22     	; 0x1a8 <CMD_Bus_Req_Reason_NACK+0x6>

    if ((*Nack_Res_Reason == INV_DEV_SEL) || (*Nack_Res_Reason == INV_OP_SEL))
 1be:	8f 50       	subi	r24, 0x0F	; 15
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	10 f4       	brcc	.+4      	; 0x1c8 <CMD_Bus_Req_Reason_NACK+0x26>
        return RECEIVED;
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <CMD_Bus_Req_Reason_NACK+0x28>
    else 
        return INVALID_NACK_REASON;
 1c8:	81 e1       	ldi	r24, 0x11	; 17
    
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <Comm_Bridge_Init>:
    Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_RESPONSE_SENT);

    return IN_SYNC; // since communication protocol is completed return success IN_SYNC code ensuring both peers are still in sync.

#endif /* ECU_ROLE */
}
 1d0:	6e e0       	ldi	r22, 0x0E	; 14
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <Bluetooth_Mod_Init>
 1dc:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 1e0:	88 23       	and	r24, r24
 1e2:	e1 f3       	breq	.-8      	; 0x1dc <Comm_Bridge_Init+0xc>
 1e4:	6f e0       	ldi	r22, 0x0F	; 15
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 1ec:	0e 94 a2 00 	call	0x144	; 0x144 <CMD_Bus_Master_Init>
 1f0:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	29 f4       	brne	.+10     	; 0x202 <Comm_Bridge_Init+0x32>
 1f8:	6c e0       	ldi	r22, 0x0C	; 12
 1fa:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 1fe:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	f1 f3       	breq	.-4      	; 0x202 <Comm_Bridge_Init+0x32>
 206:	6d e0       	ldi	r22, 0x0D	; 13
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 20e:	08 95       	ret

00000210 <Comm_Bridge_BT_Read>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 21a:	81 11       	cpse	r24, r1
 21c:	04 c0       	rjmp	.+8      	; 0x226 <Comm_Bridge_BT_Read+0x16>
 21e:	6e e0       	ldi	r22, 0x0E	; 14
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 226:	0e 94 52 00 	call	0xa4	; 0xa4 <Bluetooth_Mod_Ch_Pair>
 22a:	88 23       	and	r24, r24
 22c:	e1 f3       	breq	.-8      	; 0x226 <Comm_Bridge_BT_Read+0x16>
 22e:	61 e1       	ldi	r22, 0x11	; 17
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 70 00 	call	0xe0	; 0xe0 <Bluetooth_Mod_Seq_Rx>
 23c:	88 81       	ld	r24, Y
 23e:	88 3a       	cpi	r24, 0xA8	; 168
 240:	31 f0       	breq	.+12     	; 0x24e <Comm_Bridge_BT_Read+0x3e>
 242:	6f e2       	ldi	r22, 0x2F	; 47
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 24a:	8c e0       	ldi	r24, 0x0C	; 12
 24c:	01 c0       	rjmp	.+2      	; 0x250 <Comm_Bridge_BT_Read+0x40>
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	8c 30       	cpi	r24, 0x0C	; 12
 252:	69 f3       	breq	.-38     	; 0x22e <Comm_Bridge_BT_Read+0x1e>
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 83       	st	Y, r24
 258:	62 e1       	ldi	r22, 0x12	; 18
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <Comm_Bridge_BT_Send>:
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	0e 94 65 00 	call	0xca	; 0xca <Bluetooth_Mod_Tx>
 26e:	c2 31       	cpi	r28, 0x12	; 18
 270:	29 f4       	brne	.+10     	; 0x27c <Comm_Bridge_BT_Send+0x16>
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 27a:	0b c0       	rjmp	.+22     	; 0x292 <Comm_Bridge_BT_Send+0x2c>
 27c:	cf 30       	cpi	r28, 0x0F	; 15
 27e:	29 f4       	brne	.+10     	; 0x28a <Comm_Bridge_BT_Send+0x24>
 280:	63 e1       	ldi	r22, 0x13	; 19
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 288:	04 c0       	rjmp	.+8      	; 0x292 <Comm_Bridge_BT_Send+0x2c>
 28a:	64 e1       	ldi	r22, 0x14	; 20
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <Comm_Bridge_CMD_Req>:
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	7c 01       	movw	r14, r24
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	89 83       	std	Y+1, r24	; 0x01
 2ac:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <Comm_Bridge_CMD_Req+0x2c>
 2b4:	65 e1       	ldi	r22, 0x15	; 21
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 2bc:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
 2c0:	1f 5f       	subi	r17, 0xFF	; 255
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	11 f4       	brne	.+4      	; 0x2ca <Comm_Bridge_CMD_Req+0x34>
 2c6:	15 30       	cpi	r17, 0x05	; 5
 2c8:	a8 f3       	brcs	.-22     	; 0x2b4 <Comm_Bridge_CMD_Req+0x1e>
 2ca:	15 30       	cpi	r17, 0x05	; 5
 2cc:	41 f4       	brne	.+16     	; 0x2de <Comm_Bridge_CMD_Req+0x48>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	31 f4       	brne	.+12     	; 0x2de <Comm_Bridge_CMD_Req+0x48>
 2d2:	66 e1       	ldi	r22, 0x16	; 22
 2d4:	89 e0       	ldi	r24, 0x09	; 9
 2d6:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 2da:	83 e1       	ldi	r24, 0x13	; 19
 2dc:	7e c0       	rjmp	.+252    	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	e9 f4       	brne	.+58     	; 0x31c <Comm_Bridge_CMD_Req+0x86>
 2e2:	f7 01       	movw	r30, r14
 2e4:	80 81       	ld	r24, Z
 2e6:	0e 94 a5 00 	call	0x14a	; 0x14a <CMD_Bus_Write>
 2ea:	10 e0       	ldi	r17, 0x00	; 0
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <Comm_Bridge_CMD_Req+0x6a>
 2ee:	6e e2       	ldi	r22, 0x2E	; 46
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 2f6:	f7 01       	movw	r30, r14
 2f8:	80 81       	ld	r24, Z
 2fa:	0e 94 a5 00 	call	0x14a	; 0x14a <CMD_Bus_Write>
 2fe:	1f 5f       	subi	r17, 0xFF	; 255
 300:	86 30       	cpi	r24, 0x06	; 6
 302:	11 f4       	brne	.+4      	; 0x308 <Comm_Bridge_CMD_Req+0x72>
 304:	1a 30       	cpi	r17, 0x0A	; 10
 306:	98 f3       	brcs	.-26     	; 0x2ee <Comm_Bridge_CMD_Req+0x58>
 308:	1a 30       	cpi	r17, 0x0A	; 10
 30a:	41 f4       	brne	.+16     	; 0x31c <Comm_Bridge_CMD_Req+0x86>
 30c:	86 30       	cpi	r24, 0x06	; 6
 30e:	31 f4       	brne	.+12     	; 0x31c <Comm_Bridge_CMD_Req+0x86>
 310:	66 e1       	ldi	r22, 0x16	; 22
 312:	89 e0       	ldi	r24, 0x09	; 9
 314:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 318:	83 e1       	ldi	r24, 0x13	; 19
 31a:	5f c0       	rjmp	.+190    	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 31c:	ff ef       	ldi	r31, 0xFF	; 255
 31e:	27 ea       	ldi	r18, 0xA7	; 167
 320:	81 e6       	ldi	r24, 0x61	; 97
 322:	f1 50       	subi	r31, 0x01	; 1
 324:	20 40       	sbci	r18, 0x00	; 0
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <Comm_Bridge_CMD_Req+0x8c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <Comm_Bridge_CMD_Req+0x96>
 32c:	00 00       	nop
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 ba 00 	call	0x174	; 0x174 <CMD_Bus_Req_Ack>
 336:	10 e0       	ldi	r17, 0x00	; 0
 338:	09 c0       	rjmp	.+18     	; 0x34c <Comm_Bridge_CMD_Req+0xb6>
 33a:	67 e1       	ldi	r22, 0x17	; 23
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 ba 00 	call	0x174	; 0x174 <CMD_Bus_Req_Ack>
 34a:	1f 5f       	subi	r17, 0xFF	; 255
 34c:	8b 30       	cpi	r24, 0x0B	; 11
 34e:	11 f4       	brne	.+4      	; 0x354 <Comm_Bridge_CMD_Req+0xbe>
 350:	1a 30       	cpi	r17, 0x0A	; 10
 352:	98 f3       	brcs	.-26     	; 0x33a <Comm_Bridge_CMD_Req+0xa4>
 354:	1a 30       	cpi	r17, 0x0A	; 10
 356:	51 f4       	brne	.+20     	; 0x36c <Comm_Bridge_CMD_Req+0xd6>
 358:	8b 30       	cpi	r24, 0x0B	; 11
 35a:	41 f4       	brne	.+16     	; 0x36c <Comm_Bridge_CMD_Req+0xd6>
 35c:	66 e1       	ldi	r22, 0x16	; 22
 35e:	89 e0       	ldi	r24, 0x09	; 9
 360:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 364:	83 e1       	ldi	r24, 0x13	; 19
 366:	f7 01       	movw	r30, r14
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	37 c0       	rjmp	.+110    	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	89 30       	cpi	r24, 0x09	; 9
 370:	49 f4       	brne	.+18     	; 0x384 <Comm_Bridge_CMD_Req+0xee>
 372:	6f e2       	ldi	r22, 0x2F	; 47
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 37a:	82 e1       	ldi	r24, 0x12	; 18
 37c:	f7 01       	movw	r30, r14
 37e:	81 83       	std	Z+1, r24	; 0x01
 380:	84 e1       	ldi	r24, 0x14	; 20
 382:	2b c0       	rjmp	.+86     	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	41 f5       	brne	.+80     	; 0x3d8 <Comm_Bridge_CMD_Req+0x142>
 388:	68 e1       	ldi	r22, 0x18	; 24
 38a:	8a e0       	ldi	r24, 0x0A	; 10
 38c:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 390:	ce 01       	movw	r24, r28
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <CMD_Bus_Req_Reason_NACK>
 398:	10 e0       	ldi	r17, 0x00	; 0
 39a:	09 c0       	rjmp	.+18     	; 0x3ae <Comm_Bridge_CMD_Req+0x118>
 39c:	67 e1       	ldi	r22, 0x17	; 23
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <CMD_Bus_Req_Reason_NACK>
 3ac:	1f 5f       	subi	r17, 0xFF	; 255
 3ae:	81 31       	cpi	r24, 0x11	; 17
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <Comm_Bridge_CMD_Req+0x120>
 3b2:	1a 30       	cpi	r17, 0x0A	; 10
 3b4:	98 f3       	brcs	.-26     	; 0x39c <Comm_Bridge_CMD_Req+0x106>
 3b6:	1a 30       	cpi	r17, 0x0A	; 10
 3b8:	51 f4       	brne	.+20     	; 0x3ce <Comm_Bridge_CMD_Req+0x138>
 3ba:	81 31       	cpi	r24, 0x11	; 17
 3bc:	41 f4       	brne	.+16     	; 0x3ce <Comm_Bridge_CMD_Req+0x138>
 3be:	66 e1       	ldi	r22, 0x16	; 22
 3c0:	89 e0       	ldi	r24, 0x09	; 9
 3c2:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 3c6:	83 e1       	ldi	r24, 0x13	; 19
 3c8:	f7 01       	movw	r30, r14
 3ca:	81 83       	std	Z+1, r24	; 0x01
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	f7 01       	movw	r30, r14
 3d2:	81 83       	std	Z+1, r24	; 0x01
 3d4:	84 e1       	ldi	r24, 0x14	; 20
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <Comm_Bridge_CMD_Req+0x144>
 3d8:	83 e1       	ldi	r24, 0x13	; 19
 3da:	0f 90       	pop	r0
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <Comm_Bridge_CMD_Bus_Re_Sync>:
 * Outputs: None
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Bus_Re_Sync(void)
{
 3e8:	cf 93       	push	r28
    uint8 Iteration_counter = 0;

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
 3ea:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 3ee:	c0 e0       	ldi	r28, 0x00	; 0
 3f0:	09 c0       	rjmp	.+18     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    {
        if(ECUs_Comm_State == INVALID_PEER)
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	21 f4       	brne	.+8      	; 0x3fe <Comm_Bridge_CMD_Bus_Re_Sync+0x16>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 3f6:	65 e1       	ldi	r22, 0x15	; 21
 3f8:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
            Iteration_counter = 0;
 3fc:	c0 e0       	ldi	r28, 0x00	; 0
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
 3fe:	0e 94 92 00 	call	0x124	; 0x124 <CMD_Bus_HandShake>

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 402:	cf 5f       	subi	r28, 0xFF	; 255
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	11 f4       	brne	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	c8 30       	cpi	r28, 0x08	; 8
 40a:	98 f3       	brcs	.-26     	; 0x3f2 <Comm_Bridge_CMD_Bus_Re_Sync+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	80 e7       	ldi	r24, 0x70	; 112
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
    }

    _delay_ms(PRIOR_RE_SYNC_HANDSHAKES_DELAY_MS);
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <DIO_SetPinDir>:
	Port->PORT |= ((Value<<Pin) & (1<<Pin));
}

void DIO_ReadPortValue(volatile PORT_REG* Port, uint8* Value)
{
	*Value = Port->PIN;
 422:	fc 01       	movw	r30, r24
 424:	94 2f       	mov	r25, r20
 426:	81 81       	ldd	r24, Z+1	; 0x01
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	50 e0       	ldi	r21, 0x00	; 0
 42c:	9a 01       	movw	r18, r20
 42e:	06 2e       	mov	r0, r22
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_SetPinDir+0x14>
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_SetPinDir+0x10>
 43a:	32 2f       	mov	r19, r18
 43c:	30 95       	com	r19
 43e:	83 23       	and	r24, r19
 440:	81 83       	std	Z+1, r24	; 0x01
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	49 2f       	mov	r20, r25
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_SetPinDir+0x2c>
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_SetPinDir+0x28>
 452:	42 23       	and	r20, r18
 454:	48 2b       	or	r20, r24
 456:	41 83       	std	Z+1, r20	; 0x01
 458:	08 95       	ret

0000045a <DIO_SetPinValue>:
 45a:	fc 01       	movw	r30, r24
 45c:	94 2f       	mov	r25, r20
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	9a 01       	movw	r18, r20
 466:	06 2e       	mov	r0, r22
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_SetPinValue+0x14>
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_SetPinValue+0x10>
 472:	32 2f       	mov	r19, r18
 474:	30 95       	com	r19
 476:	83 23       	and	r24, r19
 478:	82 83       	std	Z+2, r24	; 0x02
 47a:	82 81       	ldd	r24, Z+2	; 0x02
 47c:	49 2f       	mov	r20, r25
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_SetPinValue+0x2c>
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_SetPinValue+0x28>
 48a:	42 23       	and	r20, r18
 48c:	48 2b       	or	r20, r24
 48e:	42 83       	std	Z+2, r20	; 0x02
 490:	08 95       	ret

00000492 <DIO_ReadPinValue>:
}
void DIO_ReadPinValue(volatile PORT_REG* Port, uint8 Pin, uint8* Value)
{
	*Value = GetBit(Port->PIN,Pin);
 492:	fc 01       	movw	r30, r24
 494:	80 81       	ld	r24, Z
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_ReadPinValue+0xc>
 49a:	95 95       	asr	r25
 49c:	87 95       	ror	r24
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_ReadPinValue+0x8>
 4a2:	81 70       	andi	r24, 0x01	; 1
 4a4:	fa 01       	movw	r30, r20
 4a6:	80 83       	st	Z, r24
 4a8:	08 95       	ret

000004aa <LCD_WriteCommand>:
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 4aa:	cf 93       	push	r28
 4ac:	c8 2f       	mov	r28, r24
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	86 e3       	ldi	r24, 0x36	; 54
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	86 e3       	ldi	r24, 0x36	; 54
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	86 e3       	ldi	r24, 0x36	; 54
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 4d2:	8b b3       	in	r24, 0x1b	; 27
 4d4:	9c 2f       	mov	r25, r28
 4d6:	90 7f       	andi	r25, 0xF0	; 240
 4d8:	8f 70       	andi	r24, 0x0F	; 15
 4da:	89 2b       	or	r24, r25
 4dc:	8b bb       	out	0x1b, r24	; 27
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	63 e0       	ldi	r22, 0x03	; 3
 4e2:	86 e3       	ldi	r24, 0x36	; 54
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 4ea:	8f e9       	ldi	r24, 0x9F	; 159
 4ec:	9f e0       	ldi	r25, 0x0F	; 15
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_WriteCommand+0x44>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_WriteCommand+0x4a>
 4f4:	00 00       	nop
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	63 e0       	ldi	r22, 0x03	; 3
 4fa:	86 e3       	ldi	r24, 0x36	; 54
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 502:	20 e1       	ldi	r18, 0x10	; 16
 504:	c2 9f       	mul	r28, r18
 506:	c0 01       	movw	r24, r0
 508:	11 24       	eor	r1, r1
 50a:	9b b3       	in	r25, 0x1b	; 27
 50c:	9f 70       	andi	r25, 0x0F	; 15
 50e:	89 2b       	or	r24, r25
 510:	8b bb       	out	0x1b, r24	; 27
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	63 e0       	ldi	r22, 0x03	; 3
 516:	86 e3       	ldi	r24, 0x36	; 54
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 51e:	8f e9       	ldi	r24, 0x9F	; 159
 520:	9f e0       	ldi	r25, 0x0F	; 15
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <LCD_WriteCommand+0x78>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_WriteCommand+0x7e>
 528:	00 00       	nop
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	63 e0       	ldi	r22, 0x03	; 3
 52e:	86 e3       	ldi	r24, 0x36	; 54
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 536:	8f e1       	ldi	r24, 0x1F	; 31
 538:	9e e4       	ldi	r25, 0x4E	; 78
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCD_WriteCommand+0x90>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCD_WriteCommand+0x96>
 540:	00 00       	nop
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <LCD_Init>:
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	86 e3       	ldi	r24, 0x36	; 54
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 552:	41 e0       	ldi	r20, 0x01	; 1
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	86 e3       	ldi	r24, 0x36	; 54
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	63 e0       	ldi	r22, 0x03	; 3
 562:	86 e3       	ldi	r24, 0x36	; 54
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	64 e0       	ldi	r22, 0x04	; 4
 56e:	89 e3       	ldi	r24, 0x39	; 57
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	89 e3       	ldi	r24, 0x39	; 57
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	66 e0       	ldi	r22, 0x06	; 6
 586:	89 e3       	ldi	r24, 0x39	; 57
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	67 e0       	ldi	r22, 0x07	; 7
 592:	89 e3       	ldi	r24, 0x39	; 57
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
 59a:	2f ef       	ldi	r18, 0xFF	; 255
 59c:	81 ee       	ldi	r24, 0xE1	; 225
 59e:	94 e0       	ldi	r25, 0x04	; 4
 5a0:	21 50       	subi	r18, 0x01	; 1
 5a2:	80 40       	sbci	r24, 0x00	; 0
 5a4:	90 40       	sbci	r25, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <LCD_Init+0x5a>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_Init+0x64>
 5aa:	00 00       	nop
 5ac:	83 e3       	ldi	r24, 0x33	; 51
 5ae:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5b2:	82 e3       	ldi	r24, 0x32	; 50
 5b4:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5b8:	88 e2       	ldi	r24, 0x28	; 40
 5ba:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 5d6:	08 95       	ret

000005d8 <LCD_WriteChar>:
 5d8:	cf 93       	push	r28
 5da:	c8 2f       	mov	r28, r24
 5dc:	41 e0       	ldi	r20, 0x01	; 1
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	86 e3       	ldi	r24, 0x36	; 54
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	86 e3       	ldi	r24, 0x36	; 54
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	86 e3       	ldi	r24, 0x36	; 54
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 600:	8b b3       	in	r24, 0x1b	; 27
 602:	9c 2f       	mov	r25, r28
 604:	90 7f       	andi	r25, 0xF0	; 240
 606:	8f 70       	andi	r24, 0x0F	; 15
 608:	89 2b       	or	r24, r25
 60a:	8b bb       	out	0x1b, r24	; 27
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	63 e0       	ldi	r22, 0x03	; 3
 610:	86 e3       	ldi	r24, 0x36	; 54
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 618:	8f e9       	ldi	r24, 0x9F	; 159
 61a:	9f e0       	ldi	r25, 0x0F	; 15
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_WriteChar+0x44>
 620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_WriteChar+0x4a>
 622:	00 00       	nop
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	63 e0       	ldi	r22, 0x03	; 3
 628:	86 e3       	ldi	r24, 0x36	; 54
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 630:	20 e1       	ldi	r18, 0x10	; 16
 632:	c2 9f       	mul	r28, r18
 634:	c0 01       	movw	r24, r0
 636:	11 24       	eor	r1, r1
 638:	9b b3       	in	r25, 0x1b	; 27
 63a:	9f 70       	andi	r25, 0x0F	; 15
 63c:	89 2b       	or	r24, r25
 63e:	8b bb       	out	0x1b, r24	; 27
 640:	41 e0       	ldi	r20, 0x01	; 1
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	86 e3       	ldi	r24, 0x36	; 54
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 64c:	8f e9       	ldi	r24, 0x9F	; 159
 64e:	9f e0       	ldi	r25, 0x0F	; 15
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <LCD_WriteChar+0x78>
 654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_WriteChar+0x7e>
 656:	00 00       	nop
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	63 e0       	ldi	r22, 0x03	; 3
 65c:	86 e3       	ldi	r24, 0x36	; 54
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 664:	8f e1       	ldi	r24, 0x1F	; 31
 666:	9e e4       	ldi	r25, 0x4E	; 78
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_WriteChar+0x90>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_WriteChar+0x96>
 66e:	00 00       	nop
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 67c:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 67e:	03 c0       	rjmp	.+6      	; 0x686 <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 680:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_WriteChar>
		Str_count++;
 684:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 686:	f8 01       	movw	r30, r16
 688:	ec 0f       	add	r30, r28
 68a:	f1 1d       	adc	r31, r1
 68c:	80 81       	ld	r24, Z
 68e:	81 11       	cpse	r24, r1
 690:	f7 cf       	rjmp	.-18     	; 0x680 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

0000069a <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <LCD_GoToLocation+0x6>
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 6a4:	90 e8       	ldi	r25, 0x80	; 128
 6a6:	99 83       	std	Y+1, r25	; 0x01
 6a8:	90 ec       	ldi	r25, 0xC0	; 192
 6aa:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 6ac:	e1 e0       	ldi	r30, 0x01	; 1
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ec 0f       	add	r30, r28
 6b2:	fd 1f       	adc	r31, r29
 6b4:	e8 0f       	add	r30, r24
 6b6:	f1 1d       	adc	r31, r1
 6b8:	80 81       	ld	r24, Z
 6ba:	86 0f       	add	r24, r22
 6bc:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
	
}
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <LCD_WriteCommand>
 6d0:	08 95       	ret

000006d2 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 6d2:	0e 94 a7 03 	call	0x74e	; 0x74e <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 6d6:	0e 94 b4 03 	call	0x768	; 0x768 <Smart_Home_Run>
 6da:	fd cf       	rjmp	.-6      	; 0x6d6 <main+0x4>

000006dc <Smart_Home_User_Selection>:


static void Smart_Home_User_Selection(void)
{
	#if ECU_ROLE == CONTROL_ECU
		Comm_Bridge_BT_Read(User_Selection);
 6dc:	82 e6       	ldi	r24, 0x62	; 98
 6de:	93 e0       	ldi	r25, 0x03	; 3
 6e0:	0e 94 08 01 	call	0x210	; 0x210 <Comm_Bridge_BT_Read>

		Status_Disp_LCD(LCD_ROW_TXT_DEV_OP_SELECTED,LCD_ROW_TXT_NONE);
 6e4:	6f e2       	ldi	r22, 0x2F	; 47
 6e6:	8b e1       	ldi	r24, 0x1B	; 27
 6e8:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 6ec:	08 95       	ret

000006ee <Smart_Home_Process_N_Respond>:
		}
	#endif /* ECU_ROLE */
}
#if ECU_ROLE == CONTROL_ECU
	static void Smart_Home_Process_N_Respond(void)
	{
 6ee:	cf 93       	push	r28
		uint8 Selection_Validity = SEND_FAILED;
		uint8 Transmission_Status = OUT_OF_SYNC;

		Transmission_Status = Comm_Bridge_CMD_Req(User_Selection);
 6f0:	82 e6       	ldi	r24, 0x62	; 98
 6f2:	93 e0       	ldi	r25, 0x03	; 3
 6f4:	0e 94 4b 01 	call	0x296	; 0x296 <Comm_Bridge_CMD_Req>

		if(Transmission_Status == RECEIVED)
 6f8:	84 30       	cpi	r24, 0x04	; 4
 6fa:	01 f5       	brne	.+64     	; 0x73c <Smart_Home_Process_N_Respond+0x4e>
		{
			Selection_Validity = User_Selection[RESPONSE_DATA_BYTE];
 6fc:	c0 91 63 03 	lds	r28, 0x0363	; 0x800363 <__data_end+0x1>
			if(Selection_Validity == ACK_RES)
 700:	c9 30       	cpi	r28, 0x09	; 9
 702:	41 f4       	brne	.+16     	; 0x714 <Smart_Home_Process_N_Respond+0x26>
			{
				Status_Disp_LCD(LCD_ROW_TXT_OP_STATUS,LCD_ROW_TXT_DONE);
 704:	68 e2       	ldi	r22, 0x28	; 40
 706:	87 e2       	ldi	r24, 0x27	; 39
 708:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
				Comm_Bridge_BT_Send(REQ_DONE);
 70c:	82 e1       	ldi	r24, 0x12	; 18
 70e:	0e 94 33 01 	call	0x266	; 0x266 <Comm_Bridge_BT_Send>
 712:	1b c0       	rjmp	.+54     	; 0x74a <Smart_Home_Process_N_Respond+0x5c>
			}
			else if(Selection_Validity == INV_DEV_SEL)
 714:	cf 30       	cpi	r28, 0x0F	; 15
 716:	41 f4       	brne	.+16     	; 0x728 <Smart_Home_Process_N_Respond+0x3a>
			{
				Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_DEVICE);
 718:	63 e1       	ldi	r22, 0x13	; 19
 71a:	89 e2       	ldi	r24, 0x29	; 41
 71c:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
				Comm_Bridge_BT_Send(Selection_Validity);
 720:	8c 2f       	mov	r24, r28
 722:	0e 94 33 01 	call	0x266	; 0x266 <Comm_Bridge_BT_Send>
 726:	11 c0       	rjmp	.+34     	; 0x74a <Smart_Home_Process_N_Respond+0x5c>
			}
			else if(Selection_Validity == INV_OP_SEL)
 728:	c0 31       	cpi	r28, 0x10	; 16
 72a:	79 f4       	brne	.+30     	; 0x74a <Smart_Home_Process_N_Respond+0x5c>
			{
				Status_Disp_LCD(LCD_ROW_TXT_SELECTION_ERROR,LCD_ROW_TXT_INVALID_OPTION);
 72c:	64 e1       	ldi	r22, 0x14	; 20
 72e:	89 e2       	ldi	r24, 0x29	; 41
 730:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
				Comm_Bridge_BT_Send(Selection_Validity);
 734:	8c 2f       	mov	r24, r28
 736:	0e 94 33 01 	call	0x266	; 0x266 <Comm_Bridge_BT_Send>
 73a:	07 c0       	rjmp	.+14     	; 0x74a <Smart_Home_Process_N_Respond+0x5c>
			}
		}
		else
		{
			Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 73c:	66 e1       	ldi	r22, 0x16	; 22
 73e:	8b e2       	ldi	r24, 0x2B	; 43
 740:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
			Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
 744:	83 e1       	ldi	r24, 0x13	; 19
 746:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 74e:	0e 94 24 04 	call	0x848	; 0x848 <Status_FollowUp_Init>
	
	#if ECU_ROLE == CONTROL_ECU
		
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_STARTING);
 752:	6b e0       	ldi	r22, 0x0B	; 11
 754:	84 e2       	ldi	r24, 0x24	; 36
 756:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
		
		Comm_Bridge_Init();
 75a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Comm_Bridge_Init>

		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
 75e:	6e e1       	ldi	r22, 0x1E	; 30
 760:	84 e2       	ldi	r24, 0x24	; 36
 762:	0e 94 27 04 	call	0x84e	; 0x84e <Status_Disp_LCD>
 766:	08 95       	ret

00000768 <Smart_Home_Run>:
		
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	if(Smart_Home_Sys_Sync_Flag == OUT_OF_SYNC)
 768:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 76c:	83 31       	cpi	r24, 0x13	; 19
 76e:	29 f4       	brne	.+10     	; 0x77a <Smart_Home_Run+0x12>
	{
		// Force sync on CMD_Bus by NUM_OF_RESYNC_HANDSHAKES consecutive successfull handshakes.
		Comm_Bridge_CMD_Bus_Re_Sync();
 770:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Comm_Bridge_CMD_Bus_Re_Sync>
		Smart_Home_Sys_Sync_Flag = IN_SYNC;
 774:	84 e1       	ldi	r24, 0x14	; 20
 776:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}	
	#if ECU_ROLE == CONTROL_ECU
		Smart_Home_User_Selection();
 77a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Smart_Home_User_Selection>
		if(Smart_Home_Sys_Sync_Flag == IN_SYNC)
 77e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 782:	84 31       	cpi	r24, 0x14	; 20
 784:	11 f4       	brne	.+4      	; 0x78a <Smart_Home_Run+0x22>
		{
			Smart_Home_Process_N_Respond();
 786:	0e 94 77 03 	call	0x6ee	; 0x6ee <Smart_Home_Process_N_Respond>
 78a:	08 95       	ret

0000078c <SPI_Master_Init>:
#include "SPI.h"

void SPI_Master_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_INPUT);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	66 e0       	ldi	r22, 0x06	; 6
 790:	86 e3       	ldi	r24, 0x36	; 54
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_OUTPUT);
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	65 e0       	ldi	r22, 0x05	; 5
 79c:	86 e3       	ldi	r24, 0x36	; 54
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_OUTPUT);
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	67 e0       	ldi	r22, 0x07	; 7
 7a8:	86 e3       	ldi	r24, 0x36	; 54
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_OUTPUT);
 7b0:	41 e0       	ldi	r20, 0x01	; 1
 7b2:	64 e0       	ldi	r22, 0x04	; 4
 7b4:	86 e3       	ldi	r24, 0x36	; 54
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	
	// Set Master  & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<MSTR) | (1<<CPHA);;
 7bc:	8d b1       	in	r24, 0x0d	; 13
 7be:	84 61       	ori	r24, 0x14	; 20
 7c0:	8d b9       	out	0x0d, r24	; 13
	
	// Set Clk Presc Osc/128
	SPI->SPCR |= (1<<SPR1) | (1<<SPR0);
 7c2:	8d b1       	in	r24, 0x0d	; 13
 7c4:	83 60       	ori	r24, 0x03	; 3
 7c6:	8d b9       	out	0x0d, r24	; 13

	// Make the least significant bit to be transmitted first. i.e shift right
	//SPI->SPCR |= (1<<DORD);

	// Enable SPI Peripheral
	SPI->SPCR |= (1<<SPE);
 7c8:	8d b1       	in	r24, 0x0d	; 13
 7ca:	80 64       	ori	r24, 0x40	; 64
 7cc:	8d b9       	out	0x0d, r24	; 13
	
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	64 e0       	ldi	r22, 0x04	; 4
 7d2:	86 e3       	ldi	r24, 0x36	; 54
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 7da:	2f ef       	ldi	r18, 0xFF	; 255
 7dc:	86 e7       	ldi	r24, 0x76	; 118
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	21 50       	subi	r18, 0x01	; 1
 7e2:	80 40       	sbci	r24, 0x00	; 0
 7e4:	90 40       	sbci	r25, 0x00	; 0
 7e6:	e1 f7       	brne	.-8      	; 0x7e0 <SPI_Master_Init+0x54>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <SPI_Master_Init+0x5e>
 7ea:	00 00       	nop
 7ec:	08 95       	ret

000007ee <SPI_Master_InitTrans>:
}

void SPI_Master_InitTrans(void)
{
	// Clear the SS to have the slaves ready to receive data
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_LOW);
 7ee:	40 e0       	ldi	r20, 0x00	; 0
 7f0:	64 e0       	ldi	r22, 0x04	; 4
 7f2:	86 e3       	ldi	r24, 0x36	; 54
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	86 e7       	ldi	r24, 0x76	; 118
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	00 c0       	rjmp	.+0      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 80a:	00 00       	nop
 80c:	08 95       	ret

0000080e <SPI_Master_TermTrans>:
 80e:	2f ef       	ldi	r18, 0xFF	; 255
 810:	86 e7       	ldi	r24, 0x76	; 118
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	21 50       	subi	r18, 0x01	; 1
 816:	80 40       	sbci	r24, 0x00	; 0
 818:	90 40       	sbci	r25, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <SPI_Master_TermTrans+0x6>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <SPI_Master_TermTrans+0x10>
 81e:	00 00       	nop
void SPI_Master_TermTrans(void)
{
	_delay_ms(MASTER_SS_SET_DELAY_MS);
	
	// Set SS to terminate transmission to slaves
	DIO_SetPinValue(SPI_PORT,SPI_SS_PIN,DIO_PIN_HIGH);
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	64 e0       	ldi	r22, 0x04	; 4
 824:	86 e3       	ldi	r24, 0x36	; 54
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_SetPinValue>
 82c:	08 95       	ret

0000082e <SPI_Transiver>:
}

uint8 SPI_Transiver(uint8 data)
{
 82e:	cf 93       	push	r28
 830:	c8 2f       	mov	r28, r24
	uint8 Received_Data = 0;
	
	#if SPI_ROLE == SPI_MASTER
		// Clear SS Pin to start transmission
		SPI_Master_InitTrans();
 832:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Master_InitTrans>
		
		// write to SPDR of the Master to start the transmission and clock
		SPI->SPDR = data;
 836:	cf b9       	out	0x0f, r28	; 15
		
		while(GetBit(SPI->SPSR,SPIF) == 0);
 838:	77 9b       	sbis	0x0e, 7	; 14
 83a:	fe cf       	rjmp	.-4      	; 0x838 <SPI_Transiver+0xa>
		
		Received_Data = SPI->SPDR;
 83c:	cf b1       	in	r28, 0x0f	; 15

		SPI_Master_TermTrans();
 83e:	0e 94 07 04 	call	0x80e	; 0x80e <SPI_Master_TermTrans>
		while(GetBit(SPI->SPSR,SPIF) == 0);

		Received_Data = SPI->SPDR;
	#endif /* SPI_ROLE */
	return Received_Data;
}
 842:	8c 2f       	mov	r24, r28
 844:	cf 91       	pop	r28
 846:	08 95       	ret

00000848 <Status_FollowUp_Init>:
    '\0'
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 848:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Init>
 84c:	08 95       	ret

0000084e <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	d8 2f       	mov	r29, r24
 854:	c6 2f       	mov	r28, r22
    LCD_Clear();
 856:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 85a:	20 e1       	ldi	r18, 0x10	; 16
 85c:	d2 9f       	mul	r29, r18
 85e:	c0 01       	movw	r24, r0
 860:	11 24       	eor	r1, r1
 862:	8f 59       	subi	r24, 0x9F	; 159
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	c2 9f       	mul	r28, r18
 876:	c0 01       	movw	r24, r0
 878:	11 24       	eor	r1, r1
 87a:	8f 59       	subi	r24, 0x9F	; 159
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_WriteString>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	94 e3       	ldi	r25, 0x34	; 52
 886:	2c e0       	ldi	r18, 0x0C	; 12
 888:	81 50       	subi	r24, 0x01	; 1
 88a:	90 40       	sbci	r25, 0x00	; 0
 88c:	20 40       	sbci	r18, 0x00	; 0
 88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
 890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
 892:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	08 95       	ret

0000089a <UART_Init>:


void UART_Init(void)
{
	// Set Tx Pin as output & Rx Pin as input
	DIO_SetPinDir(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	80 e3       	ldi	r24, 0x30	; 48
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	DIO_SetPinDir(UART_PORT,UART_RX_PIN, DIO_PIN_INPUT);
 8a6:	40 e0       	ldi	r20, 0x00	; 0
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	80 e3       	ldi	r24, 0x30	; 48
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPinDir>
	
	// enable Tx and Rx
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 8b2:	8a b1       	in	r24, 0x0a	; 10
 8b4:	88 61       	ori	r24, 0x18	; 24
 8b6:	8a b9       	out	0x0a, r24	; 10
	
	// Choose UCSRC Register then set data size to be 8 bits
	UCSRC |= (1<<UCSRC_URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 8b8:	80 b5       	in	r24, 0x20	; 32
 8ba:	86 68       	ori	r24, 0x86	; 134
 8bc:	80 bd       	out	0x20, r24	; 32
	
	// Set Baud Rate
	UBRRL = ( UART_Clk_Sor / (UART_Presc * Baud_Rate_Hundred) ) - 1;
 8be:	89 e1       	ldi	r24, 0x19	; 25
 8c0:	89 b9       	out	0x09, r24	; 9
 8c2:	08 95       	ret

000008c4 <UART_Tx>:
}

void UART_Tx(uint8 data)
{
	UDR = data;
 8c4:	8c b9       	out	0x0c, r24	; 12
	while ( GetBit(UCSRA,TXCIE) == UART_Flag_Down );
 8c6:	5e 9b       	sbis	0x0b, 6	; 11
 8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <UART_Tx+0x2>
	ClearBit(UCSRA,TXCIE);
 8ca:	8b b1       	in	r24, 0x0b	; 11
 8cc:	8f 7b       	andi	r24, 0xBF	; 191
 8ce:	8b b9       	out	0x0b, r24	; 11
 8d0:	08 95       	ret

000008d2 <UART_Rx>:
}

uint8 UART_Rx(void)
{
	while (GetBit(UCSRA,RXCIE) == UART_Flag_Down);
 8d2:	5f 9b       	sbis	0x0b, 7	; 11
 8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <UART_Rx>
	ClearBit(UCSRA,RXCIE);
 8d6:	8b b1       	in	r24, 0x0b	; 11
 8d8:	8f 77       	andi	r24, 0x7F	; 127
 8da:	8b b9       	out	0x0b, r24	; 11
	return UDR;
 8dc:	8c b1       	in	r24, 0x0c	; 12
}
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
