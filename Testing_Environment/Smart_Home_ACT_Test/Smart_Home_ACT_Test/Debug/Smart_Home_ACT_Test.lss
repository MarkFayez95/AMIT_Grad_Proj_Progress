
Smart_Home_ACT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031a  00800060  00000b2c  00000bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080037a  0080037a  00000eda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eda  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347f  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b4  00000000  00000000  000046e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001683  00000000  00000000  0000579b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  00006e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010bd  00000000  00000000  00007460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136d  00000000  00000000  0000851d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000988a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 04 	call	0x8c8	; 0x8c8 <main>
  8a:	0c 94 94 05 	jmp	0xb28	; 0xb28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CMD_Bus_HandShake>:
    if ((*Nack_Res_Reason == INV_DEV_SEL) || (*Nack_Res_Reason == INV_OP_SEL))
        return RECEIVED;
    else 
        return INVALID_NACK_REASON;
    
}
  92:	80 eb       	ldi	r24, 0xB0	; 176
  94:	0e 94 cb 04 	call	0x996	; 0x996 <SPI_Transiver>
  98:	80 3a       	cpi	r24, 0xA0	; 160
  9a:	11 f4       	brne	.+4      	; 0xa0 <CMD_Bus_HandShake+0xe>
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	08 95       	ret
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	08 95       	ret

000000a4 <CMD_Bus_Slave_Init>:
  a4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <SPI_Slave_Init>
  a8:	08 95       	ret

000000aa <CMD_Bus_Read>:
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 cb 04 	call	0x996	; 0x996 <SPI_Transiver>
  b6:	88 83       	st	Y, r24
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	d1 f3       	breq	.-12     	; 0xb0 <CMD_Bus_Read+0x6>
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <CMD_Bus_Res_Ack>:
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	18 2f       	mov	r17, r24
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	81 2f       	mov	r24, r17
  d2:	0e 94 cb 04 	call	0x996	; 0x996 <SPI_Transiver>
  d6:	21 96       	adiw	r28, 0x01	; 1
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	11 f0       	breq	.+4      	; 0xe0 <CMD_Bus_Res_Ack+0x1c>
  dc:	20 97       	sbiw	r28, 0x00	; 0
  de:	c1 f7       	brne	.-16     	; 0xd0 <CMD_Bus_Res_Ack+0xc>
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	11 f4       	brne	.+4      	; 0xe8 <CMD_Bus_Res_Ack+0x24>
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	01 c0       	rjmp	.+2      	; 0xea <CMD_Bus_Res_Ack+0x26>
  e8:	8a e0       	ldi	r24, 0x0A	; 10
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	08 95       	ret

000000f2 <CMD_Bus_Res_Reason_NACK>:
 * Outputs: Delivered Code (0x05) if a valid Ack_Request code received ||OR|| Invalid Reason for NACK code (0x0e) if not
 * Returns: uint8 (code indicating the status of the requested process)
 * Author: Mark Fayez
**/
uint8 CMD_Bus_Res_Reason_NACK(uint8 NACK_Reason)
{
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	18 2f       	mov	r17, r24
    uint8 Response = 0;
    uint16 Iteration_counter = 0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
    {
        #if SPI_ROLE == SPI_MASTER
            SPI_Master_InitTrans();
        #endif /* SPI_ROLE */

        Response = SPI_Transiver(NACK_Reason);
  fe:	81 2f       	mov	r24, r17
 100:	0e 94 cb 04 	call	0x996	; 0x996 <SPI_Transiver>

        #if SPI_ROLE == SPI_MASTER
            SPI_Master_TermTrans();
        #endif /* SPI_ROLE */
        
        Iteration_counter ++;
 104:	21 96       	adiw	r28, 0x01	; 1
    }
    while((Response != NACK_REASON_REQ) && (Iteration_counter != 0));
 106:	8d 30       	cpi	r24, 0x0D	; 13
 108:	11 f0       	breq	.+4      	; 0x10e <CMD_Bus_Res_Reason_NACK+0x1c>
 10a:	20 97       	sbiw	r28, 0x00	; 0
 10c:	c1 f7       	brne	.-16     	; 0xfe <CMD_Bus_Res_Reason_NACK+0xc>

    if (Response == NACK_REASON_REQ)
 10e:	8d 30       	cpi	r24, 0x0D	; 13
 110:	11 f4       	brne	.+4      	; 0x116 <CMD_Bus_Res_Reason_NACK+0x24>
        return DELIVERED;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	01 c0       	rjmp	.+2      	; 0x118 <CMD_Bus_Res_Reason_NACK+0x26>
    else 
        return INVALID_NACK_REASON_REQ;
 116:	8e e0       	ldi	r24, 0x0E	; 14
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <Comm_Bridge_Init>:
*           Exact codes of the response are decided by the devices manager module in the actuator system.
* Returns: None
* Author: Mark Fayez
**/
void Comm_Bridge_CMD_Req(uint8* Request_Command)
{
 120:	0e 94 52 00 	call	0xa4	; 0xa4 <CMD_Bus_Slave_Init>
 124:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	29 f4       	brne	.+10     	; 0x136 <Comm_Bridge_Init+0x16>
 12c:	6c e0       	ldi	r22, 0x0C	; 12
 12e:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 132:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	f1 f3       	breq	.-4      	; 0x136 <Comm_Bridge_Init+0x16>
 13a:	60 e1       	ldi	r22, 0x10	; 16
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 142:	08 95       	ret

00000144 <Comm_Bridge_CMD_Read_Req>:
 * Outputs: RECEIVED code (0x04) if command data byte/s is/are received after a successfull handshake with the peer ||OR|| OUT_OF_SYNC code (4) if handshake couldn't be completed, hence no data received.
 * Returns: uint8 (code indicating the status of the requested process)
 * Author: Mark Fayez
**/
uint8 Comm_Bridge_CMD_Read_Req(uint8* Request_Command)
{
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	8c 01       	movw	r16, r24
#if ECU_ROLE == ACTUATOR_ECU
    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    uint8 Failed_Iteration_counter = 0;

    ECUs_Comm_State = CMD_Bus_HandShake();
 14c:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
    if(ECUs_Comm_State == INVALID_PEER)
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	29 f4       	brne	.+10     	; 0x15e <Comm_Bridge_CMD_Read_Req+0x1a>
    {
        // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 154:	65 e1       	ldi	r22, 0x15	; 21
 156:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

        ECUs_Comm_State = CMD_Bus_HandShake();
 15a:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
        if((Failed_Iteration_counter == MAX_FAILED_COMM_BRI_HANDSHAKES-1) && (ECUs_Comm_State == INVALID_PEER))
        {
            // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
            Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);

            ECUs_Comm_State = OUT_OF_SYNC;
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	0c c0       	rjmp	.+24     	; 0x17a <Comm_Bridge_CMD_Read_Req+0x36>

        ECUs_Comm_State = CMD_Bus_HandShake();
    }
    for(Failed_Iteration_counter = 0; (ECUs_Comm_State != VALID_PEER) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_HANDSHAKES); Failed_Iteration_counter++)
    {
        ECUs_Comm_State = CMD_Bus_HandShake();
 162:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
        if((Failed_Iteration_counter == MAX_FAILED_COMM_BRI_HANDSHAKES-1) && (ECUs_Comm_State == INVALID_PEER))
 166:	c4 30       	cpi	r28, 0x04	; 4
 168:	39 f4       	brne	.+14     	; 0x178 <Comm_Bridge_CMD_Read_Req+0x34>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	29 f4       	brne	.+10     	; 0x178 <Comm_Bridge_CMD_Read_Req+0x34>
        {
            // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
            Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);
 16e:	66 e1       	ldi	r22, 0x16	; 22
 170:	89 e0       	ldi	r24, 0x09	; 9
 172:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

            ECUs_Comm_State = OUT_OF_SYNC;
 176:	83 e1       	ldi	r24, 0x13	; 19
        // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);

        ECUs_Comm_State = CMD_Bus_HandShake();
    }
    for(Failed_Iteration_counter = 0; (ECUs_Comm_State != VALID_PEER) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_HANDSHAKES); Failed_Iteration_counter++)
 178:	cf 5f       	subi	r28, 0xFF	; 255
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	11 f0       	breq	.+4      	; 0x182 <Comm_Bridge_CMD_Read_Req+0x3e>
 17e:	c5 30       	cpi	r28, 0x05	; 5
 180:	80 f3       	brcs	.-32     	; 0x162 <Comm_Bridge_CMD_Read_Req+0x1e>
            ECUs_Comm_State = OUT_OF_SYNC;
        }
    }
    // Repeat handshake if failed with max iterations pre-set in configurations file then break out of loop anyway.
    
    if(ECUs_Comm_State == VALID_PEER)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	49 f4       	brne	.+18     	; 0x198 <Comm_Bridge_CMD_Read_Req+0x54>
    
        // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Op Selected'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_OP_SELECTED);

        #elif COMMAND_BYTE_LENGTH == 1
        CMD_Bus_Read(Request_Command);
 186:	c8 01       	movw	r24, r16
 188:	0e 94 55 00 	call	0xaa	; 0xaa <CMD_Bus_Read>
        // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'Control Bus' 'Dev/Op Selected'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_DEV_OP_SELECTED);
 18c:	6b e1       	ldi	r22, 0x1B	; 27
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
        #endif /* COMMAND_BYTE_LENGTH */

        return RECEIVED;
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	01 c0       	rjmp	.+2      	; 0x19a <Comm_Bridge_CMD_Read_Req+0x56>
    }
    else
    {
        return OUT_OF_SYNC;
 198:	83 e1       	ldi	r24, 0x13	; 19
    }
#endif /* ECU_ROLE */
}
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <Comm_Bridge_CMD_Res>:
 * Outputs: replace the Ack response value by OUT_OF_SYNC if end of function reached without being able to send the data.
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	8c 01       	movw	r16, r24
#if ECU_ROLE == ACTUATOR_ECU
    uint8 Ack_Request = INVALID_ACK_REQUEST;
    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    uint8 Failed_Iteration_counter = 0;

    if(*Ack_Response == REQ_DONE)
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	82 31       	cpi	r24, 0x12	; 18
 1b2:	f9 f4       	brne	.+62     	; 0x1f2 <Comm_Bridge_CMD_Res+0x50>
    {
        Ack_Request = CMD_Bus_Res_Ack(*Ack_Response);
 1b4:	0e 94 62 00 	call	0xc4	; 0xc4 <CMD_Bus_Res_Ack>
 1b8:	d8 2f       	mov	r29, r24
        if(Ack_Request == INVALID_ACK_REQUEST)
 1ba:	8a 30       	cpi	r24, 0x0A	; 10
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <Comm_Bridge_CMD_Res+0x24>
        {
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
 1be:	6a e0       	ldi	r22, 0x0A	; 10
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 * Outputs: replace the Ack response value by OUT_OF_SYNC if end of function reached without being able to send the data.
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <Comm_Bridge_CMD_Res+0x44>
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
        }
        for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_ACK_REQUEST) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
        {
            if ((Failed_Iteration_counter == MAX_FAILED_COMM_BRI_TRANSMISSIONS -1) && (Ack_Request == INVALID_ACK_REQUEST))
 1ca:	c9 30       	cpi	r28, 0x09	; 9
 1cc:	31 f4       	brne	.+12     	; 0x1da <Comm_Bridge_CMD_Res+0x38>
 1ce:	da 30       	cpi	r29, 0x0A	; 10
 1d0:	21 f4       	brne	.+8      	; 0x1da <Comm_Bridge_CMD_Res+0x38>
            {
                // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
                Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);
 1d2:	66 e1       	ldi	r22, 0x16	; 22
 1d4:	89 e0       	ldi	r24, 0x09	; 9
 1d6:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

                ECUs_Comm_State = OUT_OF_SYNC;
            }
            Ack_Request = CMD_Bus_Res_Ack(*Ack_Response);
 1da:	f8 01       	movw	r30, r16
 1dc:	80 81       	ld	r24, Z
 1de:	0e 94 62 00 	call	0xc4	; 0xc4 <CMD_Bus_Res_Ack>
 1e2:	d8 2f       	mov	r29, r24
        if(Ack_Request == INVALID_ACK_REQUEST)
        {
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
        }
        for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_ACK_REQUEST) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
 1e4:	cf 5f       	subi	r28, 0xFF	; 255
 1e6:	da 30       	cpi	r29, 0x0A	; 10
 1e8:	09 f0       	breq	.+2      	; 0x1ec <Comm_Bridge_CMD_Res+0x4a>
 1ea:	41 c0       	rjmp	.+130    	; 0x26e <Comm_Bridge_CMD_Res+0xcc>
 1ec:	ca 30       	cpi	r28, 0x0A	; 10
 1ee:	68 f3       	brcs	.-38     	; 0x1ca <Comm_Bridge_CMD_Res+0x28>
 1f0:	3e c0       	rjmp	.+124    	; 0x26e <Comm_Bridge_CMD_Res+0xcc>
            Ack_Request = CMD_Bus_Res_Ack(*Ack_Response);
        }
    }
    else
    {
        Ack_Request = CMD_Bus_Res_Ack(NACK_RES);
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 62 00 	call	0xc4	; 0xc4 <CMD_Bus_Res_Ack>
 1f8:	d8 2f       	mov	r29, r24
        if(Ack_Request == INVALID_ACK_REQUEST)
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	21 f4       	brne	.+8      	; 0x206 <Comm_Bridge_CMD_Res+0x64>
        {
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
 1fe:	6a e0       	ldi	r22, 0x0A	; 10
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 * Outputs: replace the Ack response value by OUT_OF_SYNC if end of function reached without being able to send the data.
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	0d c0       	rjmp	.+26     	; 0x224 <Comm_Bridge_CMD_Res+0x82>
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
        }
        for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_ACK_REQUEST) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
        {
            if ((Failed_Iteration_counter == MAX_FAILED_COMM_BRI_TRANSMISSIONS -1) && (Ack_Request == INVALID_ACK_REQUEST))
 20a:	c9 30       	cpi	r28, 0x09	; 9
 20c:	31 f4       	brne	.+12     	; 0x21a <Comm_Bridge_CMD_Res+0x78>
 20e:	da 30       	cpi	r29, 0x0A	; 10
 210:	21 f4       	brne	.+8      	; 0x21a <Comm_Bridge_CMD_Res+0x78>
            {
                // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
                Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);
 212:	66 e1       	ldi	r22, 0x16	; 22
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

                ECUs_Comm_State = OUT_OF_SYNC;
            }
            Ack_Request = CMD_Bus_Res_Ack(NACK_RES);
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	0e 94 62 00 	call	0xc4	; 0xc4 <CMD_Bus_Res_Ack>
 220:	d8 2f       	mov	r29, r24
        if(Ack_Request == INVALID_ACK_REQUEST)
        {
            // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
        }
        for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_ACK_REQUEST) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	da 30       	cpi	r29, 0x0A	; 10
 226:	11 f4       	brne	.+4      	; 0x22c <Comm_Bridge_CMD_Res+0x8a>
 228:	ca 30       	cpi	r28, 0x0A	; 10
 22a:	78 f3       	brcs	.-34     	; 0x20a <Comm_Bridge_CMD_Res+0x68>

                ECUs_Comm_State = OUT_OF_SYNC;
            }
            Ack_Request = CMD_Bus_Res_Ack(NACK_RES);
        }
        if(Ack_Request == DELIVERED)
 22c:	d5 30       	cpi	r29, 0x05	; 5
 22e:	f9 f4       	brne	.+62     	; 0x26e <Comm_Bridge_CMD_Res+0xcc>
        {
            Ack_Request = CMD_Bus_Res_Reason_NACK(*Ack_Response);
 230:	f8 01       	movw	r30, r16
 232:	80 81       	ld	r24, Z
 234:	0e 94 79 00 	call	0xf2	; 0xf2 <CMD_Bus_Res_Reason_NACK>
 238:	d8 2f       	mov	r29, r24
            if(Ack_Request == INVALID_NACK_REASON_REQ)
 23a:	8e 30       	cpi	r24, 0x0E	; 14
 23c:	21 f4       	brne	.+8      	; 0x246 <Comm_Bridge_CMD_Res+0xa4>
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
 23e:	6a e0       	ldi	r22, 0x0A	; 10
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 * Outputs: replace the Ack response value by OUT_OF_SYNC if end of function reached without being able to send the data.
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Res(uint8* Ack_Response)
{
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	0e c0       	rjmp	.+28     	; 0x266 <Comm_Bridge_CMD_Res+0xc4>
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
            }
            for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_NACK_REASON_REQ) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
            {
                if ((Failed_Iteration_counter == MAX_FAILED_COMM_BRI_TRANSMISSIONS -1) && (Ack_Request == INVALID_NACK_REASON_REQ))
 24a:	c9 30       	cpi	r28, 0x09	; 9
 24c:	31 f4       	brne	.+12     	; 0x25a <Comm_Bridge_CMD_Res+0xb8>
 24e:	de 30       	cpi	r29, 0x0E	; 14
 250:	21 f4       	brne	.+8      	; 0x25a <Comm_Bridge_CMD_Res+0xb8>
                {
                    // Comm_Bridge_CMD_Read_Req :: Status LCD Display 'CMD Bus Peers' 'Not in Sync'
                    Status_Disp_LCD(LCD_ROW_TXT_CMD_BUS_PEERS,LCD_ROW_TXT_NOT_IN_SYNC);
 252:	66 e1       	ldi	r22, 0x16	; 22
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

                    ECUs_Comm_State = OUT_OF_SYNC;
                }
                Ack_Request = CMD_Bus_Res_Reason_NACK(*Ack_Response);
 25a:	f8 01       	movw	r30, r16
 25c:	80 81       	ld	r24, Z
 25e:	0e 94 79 00 	call	0xf2	; 0xf2 <CMD_Bus_Res_Reason_NACK>
 262:	d8 2f       	mov	r29, r24
            if(Ack_Request == INVALID_NACK_REASON_REQ)
            {
                // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Invalid Request'
                Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_INVALID_REQUEST);
            }
            for(Failed_Iteration_counter = 0; (Ack_Request == INVALID_NACK_REASON_REQ) && (Failed_Iteration_counter < MAX_FAILED_COMM_BRI_TRANSMISSIONS); Failed_Iteration_counter++)
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	de 30       	cpi	r29, 0x0E	; 14
 268:	11 f4       	brne	.+4      	; 0x26e <Comm_Bridge_CMD_Res+0xcc>
 26a:	ca 30       	cpi	r28, 0x0A	; 10
 26c:	70 f3       	brcs	.-36     	; 0x24a <Comm_Bridge_CMD_Res+0xa8>
        // Comm_Bridge_CMD_Res :: Status LCD Display 'Control Bus' 'Response Sent'
        Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_RESPONSE_SENT);
    }
    else
    {
        *Ack_Response = OUT_OF_SYNC;
 26e:	83 e1       	ldi	r24, 0x13	; 19
 270:	f8 01       	movw	r30, r16
 272:	80 83       	st	Z, r24
    }

#endif /* ECU_ROLE */
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <Comm_Bridge_CMD_Bus_Re_Sync>:
 * Outputs: None
 * Returns: None
 * Author: Mark Fayez
**/
void Comm_Bridge_CMD_Bus_Re_Sync(void)
{
 27e:	cf 93       	push	r28
    uint8 Iteration_counter = 0;

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
 280:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	09 c0       	rjmp	.+18     	; 0x29a <Comm_Bridge_CMD_Bus_Re_Sync+0x1c>
    {
        if(ECUs_Comm_State == INVALID_PEER)
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	21 f4       	brne	.+8      	; 0x294 <Comm_Bridge_CMD_Bus_Re_Sync+0x16>
        {
            // Comm_Bridge_CMD_Req :: Status LCD Display 'Control Bus' 'Peer Unavailable'
            Status_Disp_LCD(LCD_ROW_TXT_CONTROL_BUS,LCD_ROW_TXT_PEER_UNAVAILABLE);
 28c:	65 e1       	ldi	r22, 0x15	; 21
 28e:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
            Iteration_counter = 0;
 292:	c0 e0       	ldi	r28, 0x00	; 0
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
 294:	0e 94 49 00 	call	0x92	; 0x92 <CMD_Bus_HandShake>

    uint8 ECUs_Comm_State = OUT_OF_SYNC;
    
    ECUs_Comm_State = CMD_Bus_HandShake();
    
    for(Iteration_counter = 0; (ECUs_Comm_State == VALID_PEER) && (Iteration_counter < NUM_OF_RESYNC_HANDSHAKES); Iteration_counter++)
 298:	cf 5f       	subi	r28, 0xFF	; 255
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <Comm_Bridge_CMD_Bus_Re_Sync+0x24>
 29e:	c8 30       	cpi	r28, 0x08	; 8
 2a0:	98 f3       	brcs	.-26     	; 0x288 <Comm_Bridge_CMD_Bus_Re_Sync+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	80 e7       	ldi	r24, 0x70	; 112
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <Comm_Bridge_CMD_Bus_Re_Sync+0x2a>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <Comm_Bridge_CMD_Bus_Re_Sync+0x34>
 2b2:	00 00       	nop
        }
        ECUs_Comm_State = CMD_Bus_HandShake();
    }

    _delay_ms(PRIOR_RE_SYNC_HANDSHAKES_DELAY_MS);
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <Devices_Init>:
#include "Status_FollowUp.h"

volatile DevicesDB Smart_Home_Devices;

void Devices_Init(void)
{
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
	Devices_DB_Config(&Smart_Home_Devices);
 2be:	8c e7       	ldi	r24, 0x7C	; 124
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Devices_DB_Config>

	uint8 device_counter = 0;
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	1c c0       	rjmp	.+56     	; 0x302 <Devices_Init+0x4a>
	{
		Smart_Home_Devices.Device[device_counter].Init();
 2ca:	81 2f       	mov	r24, r17
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ec 01       	movw	r28, r24
 2d0:	cc 0f       	add	r28, r28
 2d2:	dd 1f       	adc	r29, r29
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	c8 0f       	add	r28, r24
 2e2:	d9 1f       	adc	r29, r25
 2e4:	c4 58       	subi	r28, 0x84	; 132
 2e6:	dc 4f       	sbci	r29, 0xFC	; 252
 2e8:	e9 81       	ldd	r30, Y+1	; 0x01
 2ea:	fa 81       	ldd	r31, Y+2	; 0x02
 2ec:	09 95       	icall
		Smart_Home_Devices.Device[device_counter].OpFn[OP_1]();
 2ee:	ec 81       	ldd	r30, Y+4	; 0x04
 2f0:	fd 81       	ldd	r31, Y+5	; 0x05
 2f2:	09 95       	icall
		Smart_Home_Devices.Device[device_counter].Current_Operation = OP_1;
 2f4:	1b 82       	std	Y+3, r1	; 0x03
		
		Status_Disp_LCD_IncludeInteger(LCD_ROW_TXT_DEVICE_,(device_counter + 1),LCD_ROW_TXT_READY);
 2f6:	1f 5f       	subi	r17, 0xFF	; 255
 2f8:	4e e1       	ldi	r20, 0x1E	; 30
 2fa:	61 2f       	mov	r22, r17
 2fc:	8d e1       	ldi	r24, 0x1D	; 29
 2fe:	0e 94 15 05 	call	0xa2a	; 0xa2a <Status_Disp_LCD_IncludeInteger>
void Devices_Init(void)
{
	Devices_DB_Config(&Smart_Home_Devices);

	uint8 device_counter = 0;
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 302:	13 30       	cpi	r17, 0x03	; 3
 304:	10 f3       	brcs	.-60     	; 0x2ca <Devices_Init+0x12>
		Smart_Home_Devices.Device[device_counter].OpFn[OP_1]();
		Smart_Home_Devices.Device[device_counter].Current_Operation = OP_1;
		
		Status_Disp_LCD_IncludeInteger(LCD_ROW_TXT_DEVICE_,(device_counter + 1),LCD_ROW_TXT_READY);
	}
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	08 95       	ret

0000030e <Dev_Op_Check_Valid>:
uint8 Dev_Op_Check_Valid(uint8 Req_Device, uint8 Req_Operation)
{
	if(((Req_Device-DEV_CONST) >= 0) && ((Req_Device-DEV_CONST)<NUM_OF_DEVICES))
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	07 97       	sbiw	r24, 0x07	; 7
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	91 05       	cpc	r25, r1
 316:	98 f5       	brcc	.+102    	; 0x37e <Dev_Op_Check_Valid+0x70>
	{
		if (((Req_Operation-OPER_CONST) >= 0) && ((Req_Operation-OPER_CONST) < MAX_OPS_PER_DEV))
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	67 50       	subi	r22, 0x07	; 7
 31c:	71 09       	sbc	r23, r1
 31e:	63 30       	cpi	r22, 0x03	; 3
 320:	71 05       	cpc	r23, r1
 322:	38 f5       	brcc	.+78     	; 0x372 <Dev_Op_Check_Valid+0x64>
		{
			if((Req_Operation-OPER_CONST) < OP_3)
 324:	62 30       	cpi	r22, 0x02	; 2
 326:	71 05       	cpc	r23, r1
 328:	f4 f4       	brge	.+60     	; 0x366 <Dev_Op_Check_Valid+0x58>
			{
				if((Req_Operation-OPER_CONST) == Smart_Home_Devices.Device[(Req_Device-DEV_CONST)].Current_Operation)
 32a:	fc 01       	movw	r30, r24
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	e8 0f       	add	r30, r24
 33e:	f9 1f       	adc	r31, r25
 340:	e4 58       	subi	r30, 0x84	; 132
 342:	fc 4f       	sbci	r31, 0xFC	; 252
 344:	83 81       	ldd	r24, Z+3	; 0x03
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	68 17       	cp	r22, r24
 34a:	79 07       	cpc	r23, r25
 34c:	31 f4       	brne	.+12     	; 0x35a <Dev_Op_Check_Valid+0x4c>
				{
					Status_Disp_LCD(LCD_ROW_TXT_OP_SELECTED,LCD_ROW_TXT_ALREADY_RUNNING);
 34e:	6f e1       	ldi	r22, 0x1F	; 31
 350:	8a e1       	ldi	r24, 0x1A	; 26
 352:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
					
					return OP_INVALID;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	08 95       	ret
				}
				else
				{
					Status_Disp_LCD(LCD_ROW_TXT_VALID_SELECTION,LCD_ROW_TXT_PROCEEDING);
 35a:	62 e1       	ldi	r22, 0x12	; 18
 35c:	80 e2       	ldi	r24, 0x20	; 32
 35e:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

					return DEV_N_OP_VALID;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
				}
			}
			else
			{
				Status_Disp_LCD(LCD_ROW_TXT_VALID_SELECTION,LCD_ROW_TXT_PROCEEDING);
 366:	62 e1       	ldi	r22, 0x12	; 18
 368:	80 e2       	ldi	r24, 0x20	; 32
 36a:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

				return DEV_N_OP_VALID;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
			}
		}
		else
		{
			Status_Disp_LCD(LCD_ROW_TXT_OP_SELECTED,LCD_ROW_TXT_INVALID);
 372:	61 e2       	ldi	r22, 0x21	; 33
 374:	8a e1       	ldi	r24, 0x1A	; 26
 376:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

			return OP_INVALID;
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	08 95       	ret
		}
	}
	else
	{
		Status_Disp_LCD(LCD_ROW_TXT_DEVICE_SELECTED,LCD_ROW_TXT_INVALID);
 37e:	61 e2       	ldi	r22, 0x21	; 33
 380:	89 e1       	ldi	r24, 0x19	; 25
 382:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>

		return DEV_INVALID;
 386:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 388:	08 95       	ret

0000038a <Device_Apply_Request>:
void Device_Apply_Request(uint8 Req_Device, uint8 Req_Operation)
{
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	16 2f       	mov	r17, r22
	Smart_Home_Devices.Device[Req_Device-DEV_CONST].OpFn[Req_Operation-OPER_CONST]();
 392:	c8 2f       	mov	r28, r24
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	27 97       	sbiw	r28, 0x07	; 7
 398:	e6 2f       	mov	r30, r22
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	cf 01       	movw	r24, r30
 39e:	07 97       	sbiw	r24, 0x07	; 7
 3a0:	fe 01       	movw	r30, r28
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ec 0f       	add	r30, r28
 3ac:	fd 1f       	adc	r31, r29
 3ae:	e8 0f       	add	r30, r24
 3b0:	f9 1f       	adc	r31, r25
 3b2:	32 96       	adiw	r30, 0x02	; 2
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	e4 58       	subi	r30, 0x84	; 132
 3ba:	fc 4f       	sbci	r31, 0xFC	; 252
 3bc:	01 90       	ld	r0, Z+
 3be:	f0 81       	ld	r31, Z
 3c0:	e0 2d       	mov	r30, r0
 3c2:	09 95       	icall
	Smart_Home_Devices.Device[Req_Device-DEV_CONST].Current_Operation = (Req_Operation-OPER_CONST);
 3c4:	17 50       	subi	r17, 0x07	; 7
 3c6:	ce 01       	movw	r24, r28
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	cc 0f       	add	r28, r28
 3ce:	dd 1f       	adc	r29, r29
 3d0:	cc 0f       	add	r28, r28
 3d2:	dd 1f       	adc	r29, r29
 3d4:	cc 0f       	add	r28, r28
 3d6:	dd 1f       	adc	r29, r29
 3d8:	c8 0f       	add	r28, r24
 3da:	d9 1f       	adc	r29, r25
 3dc:	c4 58       	subi	r28, 0x84	; 132
 3de:	dc 4f       	sbci	r29, 0xFC	; 252
 3e0:	1b 83       	std	Y+3, r17	; 0x03
	
	Status_Disp_LCD(LCD_ROW_TXT_DEVICE_OP,LCD_ROW_TXT_APPLIED);
 3e2:	63 e2       	ldi	r22, 0x23	; 35
 3e4:	82 e2       	ldi	r24, 0x22	; 34
 3e6:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	08 95       	ret

000003f2 <Devices_DB_Config>:
    LED2_ON,
    LED2_Toggle
};

void Devices_DB_Config(DevicesDB* Smart_Home_DevDB)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
	Device_Codes Dev_Cod = LED_0;
	
	uint8 device_counter = 0;
	uint8 Operation_counter = 0;
	
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	3e c0       	rjmp	.+124    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
	{
		Dev_Cod = LED_0;
		Smart_Home_DevDB->Device[device_counter].Device_Ref = (Dev_Cod+device_counter+DEV_CONST) << 4;
 3fa:	4d 2f       	mov	r20, r29
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	fa 01       	movw	r30, r20
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	9a 01       	movw	r18, r20
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	e2 0f       	add	r30, r18
 414:	f3 1f       	adc	r31, r19
 416:	e8 0f       	add	r30, r24
 418:	f9 1f       	adc	r31, r25
 41a:	67 e0       	ldi	r22, 0x07	; 7
 41c:	6d 0f       	add	r22, r29
 41e:	62 95       	swap	r22
 420:	60 7f       	andi	r22, 0xF0	; 240
 422:	60 83       	st	Z, r22
		Smart_Home_DevDB->Device[device_counter].Init = Op_Fun_Ptr[device_counter][INIT_FUN_INDEX];
 424:	d9 01       	movw	r26, r18
 426:	a0 5a       	subi	r26, 0xA0	; 160
 428:	bf 4f       	sbci	r27, 0xFF	; 255
 42a:	2d 91       	ld	r18, X+
 42c:	3c 91       	ld	r19, X
 42e:	32 83       	std	Z+2, r19	; 0x02
 430:	21 83       	std	Z+1, r18	; 0x01
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	1d c0       	rjmp	.+58     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		{
			Smart_Home_DevDB->Device[device_counter].OpFn[Operation_counter] =  Op_Fun_Ptr[device_counter][Operation_counter+1];
 436:	2c 2f       	mov	r18, r28
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	d9 01       	movw	r26, r18
 43c:	11 96       	adiw	r26, 0x01	; 1
 43e:	fa 01       	movw	r30, r20
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	ae 0f       	add	r26, r30
 44a:	bf 1f       	adc	r27, r31
 44c:	aa 0f       	add	r26, r26
 44e:	bb 1f       	adc	r27, r27
 450:	a0 5a       	subi	r26, 0xA0	; 160
 452:	bf 4f       	sbci	r27, 0xFF	; 255
 454:	6d 91       	ld	r22, X+
 456:	7c 91       	ld	r23, X
 458:	e4 0f       	add	r30, r20
 45a:	f5 1f       	adc	r31, r21
 45c:	e2 0f       	add	r30, r18
 45e:	f3 1f       	adc	r31, r19
 460:	32 96       	adiw	r30, 0x02	; 2
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	71 83       	std	Z+1, r23	; 0x01
 46c:	60 83       	st	Z, r22
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
	{
		Dev_Cod = LED_0;
		Smart_Home_DevDB->Device[device_counter].Device_Ref = (Dev_Cod+device_counter+DEV_CONST) << 4;
		Smart_Home_DevDB->Device[device_counter].Init = Op_Fun_Ptr[device_counter][INIT_FUN_INDEX];
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
 46e:	cf 5f       	subi	r28, 0xFF	; 255
 470:	c3 30       	cpi	r28, 0x03	; 3
 472:	08 f3       	brcs	.-62     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	Device_Codes Dev_Cod = LED_0;
	
	uint8 device_counter = 0;
	uint8 Operation_counter = 0;
	
	for(device_counter = 0; device_counter < NUM_OF_DEVICES; device_counter++)
 474:	df 5f       	subi	r29, 0xFF	; 255
 476:	d3 30       	cpi	r29, 0x03	; 3
 478:	08 f4       	brcc	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	bf cf       	rjmp	.-130    	; 0x3fa <Devices_DB_Config+0x8>
		for(Operation_counter = 0; Operation_counter < MAX_OPS_PER_DEV ; Operation_counter++)
		{
			Smart_Home_DevDB->Device[device_counter].OpFn[Operation_counter] =  Op_Fun_Ptr[device_counter][Operation_counter+1];
		}
	}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <DIO_SetPinDir>:
	*Value = GetBit(Port->PIN,Pin);
}

void DIO_TogglePort(volatile PORT_REG* Port)
{
	Port->PORT ^= DIO_PORT_HIGH;
 482:	fc 01       	movw	r30, r24
 484:	94 2f       	mov	r25, r20
 486:	81 81       	ldd	r24, Z+1	; 0x01
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	9a 01       	movw	r18, r20
 48e:	06 2e       	mov	r0, r22
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_SetPinDir+0x14>
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_SetPinDir+0x10>
 49a:	32 2f       	mov	r19, r18
 49c:	30 95       	com	r19
 49e:	83 23       	and	r24, r19
 4a0:	81 83       	std	Z+1, r24	; 0x01
 4a2:	81 81       	ldd	r24, Z+1	; 0x01
 4a4:	49 2f       	mov	r20, r25
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_SetPinDir+0x2c>
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	6a 95       	dec	r22
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_SetPinDir+0x28>
 4b2:	42 23       	and	r20, r18
 4b4:	48 2b       	or	r20, r24
 4b6:	41 83       	std	Z+1, r20	; 0x01
 4b8:	08 95       	ret

000004ba <DIO_SetPinValue>:
 4ba:	fc 01       	movw	r30, r24
 4bc:	94 2f       	mov	r25, r20
 4be:	82 81       	ldd	r24, Z+2	; 0x02
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	9a 01       	movw	r18, r20
 4c6:	06 2e       	mov	r0, r22
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_SetPinValue+0x14>
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_SetPinValue+0x10>
 4d2:	32 2f       	mov	r19, r18
 4d4:	30 95       	com	r19
 4d6:	83 23       	and	r24, r19
 4d8:	82 83       	std	Z+2, r24	; 0x02
 4da:	82 81       	ldd	r24, Z+2	; 0x02
 4dc:	49 2f       	mov	r20, r25
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_SetPinValue+0x2c>
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_SetPinValue+0x28>
 4ea:	42 23       	and	r20, r18
 4ec:	48 2b       	or	r20, r24
 4ee:	42 83       	std	Z+2, r20	; 0x02
 4f0:	08 95       	ret

000004f2 <DIO_TogglePin>:
	
}
void DIO_TogglePin(volatile PORT_REG* Port, uint8 Pin)
{
	ToggleBit(Port->PORT,Pin);
 4f2:	fc 01       	movw	r30, r24
 4f4:	42 81       	ldd	r20, Z+2	; 0x02
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_TogglePin+0xe>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_TogglePin+0xa>
 504:	24 27       	eor	r18, r20
 506:	22 83       	std	Z+2, r18	; 0x02
 508:	08 95       	ret

0000050a <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand (uint8 cmd)
{
 50a:	cf 93       	push	r28
 50c:	c8 2f       	mov	r28, r24
	
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	86 e3       	ldi	r24, 0x36	; 54
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	86 e3       	ldi	r24, 0x36	; 54
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	63 e0       	ldi	r22, 0x03	; 3
 52a:	86 e3       	ldi	r24, 0x36	; 54
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 532:	8b b3       	in	r24, 0x1b	; 27
 534:	9c 2f       	mov	r25, r28
 536:	90 7f       	andi	r25, 0xF0	; 240
 538:	8f 70       	andi	r24, 0x0F	; 15
 53a:	89 2b       	or	r24, r25
 53c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	86 e3       	ldi	r24, 0x36	; 54
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 54a:	8f e9       	ldi	r24, 0x9F	; 159
 54c:	9f e0       	ldi	r25, 0x0F	; 15
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_WriteCommand+0x44>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_WriteCommand+0x4a>
 554:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	86 e3       	ldi	r24, 0x36	; 54
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (cmd << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 562:	20 e1       	ldi	r18, 0x10	; 16
 564:	c2 9f       	mul	r28, r18
 566:	c0 01       	movw	r24, r0
 568:	11 24       	eor	r1, r1
 56a:	9b b3       	in	r25, 0x1b	; 27
 56c:	9f 70       	andi	r25, 0x0F	; 15
 56e:	89 2b       	or	r24, r25
 570:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	63 e0       	ldi	r22, 0x03	; 3
 576:	86 e3       	ldi	r24, 0x36	; 54
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 57e:	8f e9       	ldi	r24, 0x9F	; 159
 580:	9f e0       	ldi	r25, 0x0F	; 15
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <LCD_WriteCommand+0x78>
 586:	00 c0       	rjmp	.+0      	; 0x588 <LCD_WriteCommand+0x7e>
 588:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	63 e0       	ldi	r22, 0x03	; 3
 58e:	86 e3       	ldi	r24, 0x36	; 54
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 596:	8f e1       	ldi	r24, 0x1F	; 31
 598:	9e e4       	ldi	r25, 0x4E	; 78
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_WriteCommand+0x90>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_WriteCommand+0x96>
 5a0:	00 00       	nop
	DIO_SetPinValue(LCD_8BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
	
	_delay_ms(5);
	
	#endif
}
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <LCD_Init>:

void LCD_Init (void)
{
	#if LCD_MODE == 4
	
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN , DIO_PIN_OUTPUT);
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	86 e3       	ldi	r24, 0x36	; 54
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN , DIO_PIN_OUTPUT);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	86 e3       	ldi	r24, 0x36	; 54
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN , DIO_PIN_OUTPUT);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	63 e0       	ldi	r22, 0x03	; 3
 5c2:	86 e3       	ldi	r24, 0x36	; 54
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D4_PIN , DIO_PIN_OUTPUT);
 5ca:	41 e0       	ldi	r20, 0x01	; 1
 5cc:	64 e0       	ldi	r22, 0x04	; 4
 5ce:	89 e3       	ldi	r24, 0x39	; 57
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D5_PIN , DIO_PIN_OUTPUT);
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	65 e0       	ldi	r22, 0x05	; 5
 5da:	89 e3       	ldi	r24, 0x39	; 57
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D6_PIN , DIO_PIN_OUTPUT);
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	66 e0       	ldi	r22, 0x06	; 6
 5e6:	89 e3       	ldi	r24, 0x39	; 57
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_MODE_DATA_PORT, LCD_D7_PIN , DIO_PIN_OUTPUT);
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	89 e3       	ldi	r24, 0x39	; 57
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	81 ee       	ldi	r24, 0xE1	; 225
 5fe:	94 e0       	ldi	r25, 0x04	; 4
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <LCD_Init+0x5a>
 608:	00 c0       	rjmp	.+0      	; 0x60a <LCD_Init+0x64>
 60a:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WriteCommand(0x33);
 60c:	83 e3       	ldi	r24, 0x33	; 51
 60e:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 612:	82 e3       	ldi	r24, 0x32	; 50
 614:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	
	LCD_WriteCommand(0x0C);
 61e:	8c e0       	ldi	r24, 0x0C	; 12
 620:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 62a:	86 e0       	ldi	r24, 0x06	; 6
 62c:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
 636:	08 95       	ret

00000638 <LCD_WriteChar>:
	
	#endif
}

void LCD_WriteChar (uint8 data)
{
 638:	cf 93       	push	r28
 63a:	c8 2f       	mov	r28, r24
	#if LCD_MODE == 4
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	86 e3       	ldi	r24, 0x36	; 54
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_RW_PIN, DIO_PIN_LOW);
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	86 e3       	ldi	r24, 0x36	; 54
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	63 e0       	ldi	r22, 0x03	; 3
 658:	86 e3       	ldi	r24, 0x36	; 54
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data & 0xf0) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 660:	8b b3       	in	r24, 0x1b	; 27
 662:	9c 2f       	mov	r25, r28
 664:	90 7f       	andi	r25, 0xF0	; 240
 666:	8f 70       	andi	r24, 0x0F	; 15
 668:	89 2b       	or	r24, r25
 66a:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	63 e0       	ldi	r22, 0x03	; 3
 670:	86 e3       	ldi	r24, 0x36	; 54
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 678:	8f e9       	ldi	r24, 0x9F	; 159
 67a:	9f e0       	ldi	r25, 0x0F	; 15
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_WriteChar+0x44>
 680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_WriteChar+0x4a>
 682:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	63 e0       	ldi	r22, 0x03	; 3
 688:	86 e3       	ldi	r24, 0x36	; 54
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
	
	LCD_4BIT_MODE_DATA_BUS = (data << 4) | (LCD_4BIT_MODE_DATA_BUS & 0x0f);
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	c2 9f       	mul	r28, r18
 694:	c0 01       	movw	r24, r0
 696:	11 24       	eor	r1, r1
 698:	9b b3       	in	r25, 0x1b	; 27
 69a:	9f 70       	andi	r25, 0x0F	; 15
 69c:	89 2b       	or	r24, r25
 69e:	8b bb       	out	0x1b, r24	; 27
	
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 6a0:	41 e0       	ldi	r20, 0x01	; 1
 6a2:	63 e0       	ldi	r22, 0x03	; 3
 6a4:	86 e3       	ldi	r24, 0x36	; 54
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 6ac:	8f e9       	ldi	r24, 0x9F	; 159
 6ae:	9f e0       	ldi	r25, 0x0F	; 15
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_WriteChar+0x78>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_WriteChar+0x7e>
 6b6:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_4BIT_MODE_CMD_PORT, LCD_E_PIN, DIO_PIN_LOW);
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	63 e0       	ldi	r22, 0x03	; 3
 6bc:	86 e3       	ldi	r24, 0x36	; 54
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 6c4:	8f e1       	ldi	r24, 0x1F	; 31
 6c6:	9e e4       	ldi	r25, 0x4E	; 78
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCD_WriteChar+0x90>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <LCD_WriteChar+0x96>
 6ce:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
	
}
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret

000006d4 <LCD_WriteInteger>:


/*  Assignment  */
void LCD_WriteInteger (sint32 num)
{
 6d4:	cf 92       	push	r12
 6d6:	df 92       	push	r13
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	6b 01       	movw	r12, r22
 6e4:	7c 01       	movw	r14, r24
	sint32 temp_num;
	uint16 increment_temp_num = 0;
	sint8 counter = 0; // adjusting variable to be signed solve the last loop going infinite
	
	if (num < 0)
 6e6:	99 23       	and	r25, r25
 6e8:	5c f4       	brge	.+22     	; 0x700 <LCD_WriteInteger+0x2c>
	{
		LCD_WriteChar('-');
 6ea:	8d e2       	ldi	r24, 0x2D	; 45
 6ec:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_WriteChar>
		temp_num = num * -1;
 6f0:	f0 94       	com	r15
 6f2:	e0 94       	com	r14
 6f4:	d0 94       	com	r13
 6f6:	c0 94       	com	r12
 6f8:	c1 1c       	adc	r12, r1
 6fa:	d1 1c       	adc	r13, r1
 6fc:	e1 1c       	adc	r14, r1
 6fe:	f1 1c       	adc	r15, r1
	}
	else
		temp_num = num;
	
	if(temp_num == 0)
 700:	c1 14       	cp	r12, r1
 702:	d1 04       	cpc	r13, r1
 704:	e1 04       	cpc	r14, r1
 706:	f1 04       	cpc	r15, r1
 708:	f9 f4       	brne	.+62     	; 0x748 <LCD_WriteInteger+0x74>
	{
		LCD_WriteChar('0');
 70a:	80 e3       	ldi	r24, 0x30	; 48
 70c:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_WriteChar>
 710:	53 c0       	rjmp	.+166    	; 0x7b8 <LCD_WriteInteger+0xe4>
	}
	else
	{
		while (temp_num > 0 && counter < 10)
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
 712:	be 01       	movw	r22, r28
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	cc 0f       	add	r28, r28
 71a:	dd 1f       	adc	r29, r29
 71c:	cc 0f       	add	r28, r28
 71e:	dd 1f       	adc	r29, r29
 720:	cc 0f       	add	r28, r28
 722:	dd 1f       	adc	r29, r29
 724:	c6 0f       	add	r28, r22
 726:	d7 1f       	adc	r29, r23
 728:	c7 01       	movw	r24, r14
 72a:	b6 01       	movw	r22, r12
 72c:	2a e0       	ldi	r18, 0x0A	; 10
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	50 e0       	ldi	r21, 0x00	; 0
 734:	0e 94 44 05 	call	0xa88	; 0xa88 <__divmodsi4>
 738:	c6 0f       	add	r28, r22
 73a:	d7 1f       	adc	r29, r23
			temp_num /= 10;
 73c:	c2 2e       	mov	r12, r18
 73e:	d3 2e       	mov	r13, r19
 740:	e4 2e       	mov	r14, r20
 742:	f5 2e       	mov	r15, r21
			counter++;
 744:	1f 5f       	subi	r17, 0xFF	; 255
 746:	03 c0       	rjmp	.+6      	; 0x74e <LCD_WriteInteger+0x7a>
 748:	10 e0       	ldi	r17, 0x00	; 0
 74a:	c0 e0       	ldi	r28, 0x00	; 0
 74c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_WriteChar('0');
	}
	else
	{
		while (temp_num > 0 && counter < 10)
 74e:	1c 14       	cp	r1, r12
 750:	1d 04       	cpc	r1, r13
 752:	1e 04       	cpc	r1, r14
 754:	1f 04       	cpc	r1, r15
 756:	14 f4       	brge	.+4      	; 0x75c <LCD_WriteInteger+0x88>
 758:	1a 30       	cpi	r17, 0x0A	; 10
 75a:	dc f2       	brlt	.-74     	; 0x712 <LCD_WriteInteger+0x3e>
		{
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
 75c:	11 50       	subi	r17, 0x01	; 1
		while(counter>=0)
 75e:	2a c0       	rjmp	.+84     	; 0x7b4 <LCD_WriteInteger+0xe0>
		{
			LCD_WriteChar('0' + (increment_temp_num % 10));
 760:	9e 01       	movw	r18, r28
 762:	ad ec       	ldi	r26, 0xCD	; 205
 764:	bc ec       	ldi	r27, 0xCC	; 204
 766:	0e 94 63 05 	call	0xac6	; 0xac6 <__umulhisi3>
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	9c 01       	movw	r18, r24
 778:	22 0f       	add	r18, r18
 77a:	33 1f       	adc	r19, r19
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	82 0f       	add	r24, r18
 78a:	93 1f       	adc	r25, r19
 78c:	9e 01       	movw	r18, r28
 78e:	28 1b       	sub	r18, r24
 790:	39 0b       	sbc	r19, r25
 792:	c9 01       	movw	r24, r18
 794:	80 5d       	subi	r24, 0xD0	; 208
 796:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_WriteChar>
			increment_temp_num /= 10;
 79a:	9e 01       	movw	r18, r28
 79c:	ad ec       	ldi	r26, 0xCD	; 205
 79e:	bc ec       	ldi	r27, 0xCC	; 204
 7a0:	0e 94 63 05 	call	0xac6	; 0xac6 <__umulhisi3>
 7a4:	ec 01       	movw	r28, r24
 7a6:	d6 95       	lsr	r29
 7a8:	c7 95       	ror	r28
 7aa:	d6 95       	lsr	r29
 7ac:	c7 95       	ror	r28
 7ae:	d6 95       	lsr	r29
 7b0:	c7 95       	ror	r28
			counter--;
 7b2:	11 50       	subi	r17, 0x01	; 1
			increment_temp_num = ((increment_temp_num * 10) + (temp_num % 10));
			temp_num /= 10;
			counter++;
		}
		counter--;
		while(counter>=0)
 7b4:	11 23       	and	r17, r17
 7b6:	a4 f6       	brge	.-88     	; 0x760 <LCD_WriteInteger+0x8c>
			LCD_WriteChar('0' + (increment_temp_num % 10));
			increment_temp_num /= 10;
			counter--;
		}
	}
}
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	ff 90       	pop	r15
 7c0:	ef 90       	pop	r14
 7c2:	df 90       	pop	r13
 7c4:	cf 90       	pop	r12
 7c6:	08 95       	ret

000007c8 <LCD_WriteString>:
/******************/

void LCD_WriteString(uint8* str)
{
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
 7cc:	cf 93       	push	r28
 7ce:	8c 01       	movw	r16, r24
	uint8 Str_count = 0;
 7d0:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[Str_count] != '\0')
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <LCD_WriteString+0x12>
	{
		LCD_WriteChar (str[Str_count]);
 7d4:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_WriteChar>
		Str_count++;
 7d8:	cf 5f       	subi	r28, 0xFF	; 255
/******************/

void LCD_WriteString(uint8* str)
{
	uint8 Str_count = 0;
	while (str[Str_count] != '\0')
 7da:	f8 01       	movw	r30, r16
 7dc:	ec 0f       	add	r30, r28
 7de:	f1 1d       	adc	r31, r1
 7e0:	80 81       	ld	r24, Z
 7e2:	81 11       	cpse	r24, r1
 7e4:	f7 cf       	rjmp	.-18     	; 0x7d4 <LCD_WriteString+0xc>
	{
		LCD_WriteChar (str[Str_count]);
		Str_count++;
	}
}
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	08 95       	ret

000007ee <LCD_GoToLocation>:

void LCD_GoToLocation(uint8 row, uint8 col)
{
 7ee:	cf 93       	push	r28
 7f0:	df 93       	push	r29
 7f2:	00 d0       	rcall	.+0      	; 0x7f4 <LCD_GoToLocation+0x6>
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
	uint8 rows[2] = {LCD_ROW_1_ADDR,LCD_ROW_2_ADDR};
 7f8:	90 e8       	ldi	r25, 0x80	; 128
 7fa:	99 83       	std	Y+1, r25	; 0x01
 7fc:	90 ec       	ldi	r25, 0xC0	; 192
 7fe:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_WriteCommand(rows[row]+col);
 800:	e1 e0       	ldi	r30, 0x01	; 1
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	ec 0f       	add	r30, r28
 806:	fd 1f       	adc	r31, r29
 808:	e8 0f       	add	r30, r24
 80a:	f1 1d       	adc	r31, r1
 80c:	80 81       	ld	r24, Z
 80e:	86 0f       	add	r24, r22
 810:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
	
}
 814:	0f 90       	pop	r0
 816:	0f 90       	pop	r0
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	08 95       	ret

0000081e <LCD_Clear>:

void LCD_Clear (void)
{
	LCD_WriteCommand(LCD_CLR_CMD);
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_WriteCommand>
 824:	08 95       	ret

00000826 <LED0_Init>:


#ifdef LEDS_VOID_INPUT_FUNCTIONS
	void LED0_Init(void)
	{
		DIO_SetPinDir(LED0_PORT, LED0_PIN, DIO_PIN_OUTPUT);
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	62 e0       	ldi	r22, 0x02	; 2
 82a:	83 e3       	ldi	r24, 0x33	; 51
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
 832:	08 95       	ret

00000834 <LED1_Init>:
	}
	void LED1_Init(void)
	{
		DIO_SetPinDir(LED1_PORT, LED1_PIN, DIO_PIN_OUTPUT);
 834:	41 e0       	ldi	r20, 0x01	; 1
 836:	67 e0       	ldi	r22, 0x07	; 7
 838:	83 e3       	ldi	r24, 0x33	; 51
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
 840:	08 95       	ret

00000842 <LED2_Init>:
	}
	void LED2_Init(void)
	{
		DIO_SetPinDir(LED2_PORT, LED2_PIN, DIO_PIN_OUTPUT);
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	63 e0       	ldi	r22, 0x03	; 3
 846:	80 e3       	ldi	r24, 0x30	; 48
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
 84e:	08 95       	ret

00000850 <LED0_ON>:
	}

	void LED0_ON(void)
	{
		DIO_SetPinValue(LED0_PORT, LED0_PIN, DIO_PIN_HIGH);
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	62 e0       	ldi	r22, 0x02	; 2
 854:	83 e3       	ldi	r24, 0x33	; 51
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 85c:	08 95       	ret

0000085e <LED1_ON>:
	}
	void LED1_ON(void)
	{
		DIO_SetPinValue(LED1_PORT, LED1_PIN, DIO_PIN_HIGH);
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	67 e0       	ldi	r22, 0x07	; 7
 862:	83 e3       	ldi	r24, 0x33	; 51
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 86a:	08 95       	ret

0000086c <LED2_ON>:
	}
	void LED2_ON(void)
	{
		DIO_SetPinValue(LED2_PORT, LED2_PIN, DIO_PIN_HIGH);
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	63 e0       	ldi	r22, 0x03	; 3
 870:	80 e3       	ldi	r24, 0x30	; 48
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 878:	08 95       	ret

0000087a <LED0_OFF>:
	}

	void LED0_OFF(void)
	{
		DIO_SetPinValue(LED0_PORT, LED0_PIN, DIO_PIN_LOW);
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	62 e0       	ldi	r22, 0x02	; 2
 87e:	83 e3       	ldi	r24, 0x33	; 51
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 886:	08 95       	ret

00000888 <LED1_OFF>:
	}
	void LED1_OFF(void)
	{
		DIO_SetPinValue(LED1_PORT, LED1_PIN, DIO_PIN_LOW);
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	67 e0       	ldi	r22, 0x07	; 7
 88c:	83 e3       	ldi	r24, 0x33	; 51
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 894:	08 95       	ret

00000896 <LED2_OFF>:
	}
	void LED2_OFF(void)
	{
		DIO_SetPinValue(LED2_PORT, LED2_PIN, DIO_PIN_LOW);
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	63 e0       	ldi	r22, 0x03	; 3
 89a:	80 e3       	ldi	r24, 0x30	; 48
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_SetPinValue>
 8a2:	08 95       	ret

000008a4 <LED0_Toggle>:
	}

	void LED0_Toggle(void)
	{
		DIO_TogglePin(LED0_PORT, LED0_PIN);
 8a4:	62 e0       	ldi	r22, 0x02	; 2
 8a6:	83 e3       	ldi	r24, 0x33	; 51
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_TogglePin>
 8ae:	08 95       	ret

000008b0 <LED1_Toggle>:
	}
	void LED1_Toggle(void)
	{
		DIO_TogglePin(LED1_PORT, LED1_PIN);
 8b0:	67 e0       	ldi	r22, 0x07	; 7
 8b2:	83 e3       	ldi	r24, 0x33	; 51
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_TogglePin>
 8ba:	08 95       	ret

000008bc <LED2_Toggle>:
	}
	void LED2_Toggle(void)
	{
		DIO_TogglePin(LED2_PORT, LED2_PIN);
 8bc:	63 e0       	ldi	r22, 0x03	; 3
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <DIO_TogglePin>
 8c6:	08 95       	ret

000008c8 <main>:
#include "Smart_Home.h"


int main(void)
{
    Smart_Home_Init();
 8c8:	0e 94 ad 04 	call	0x95a	; 0x95a <Smart_Home_Init>
    while (1) 
    {
		Smart_Home_Run();
 8cc:	0e 94 bc 04 	call	0x978	; 0x978 <Smart_Home_Run>
 8d0:	fd cf       	rjmp	.-6      	; 0x8cc <main+0x4>

000008d2 <Smart_Home_Read_N_Decode>:
	#endif /* ECU_ROLE */
}
static void Smart_Home_Read_N_Decode(void)
{
	#if ECU_ROLE == ACTUATOR_ECU
		Status_Disp_LCD(LCD_ROW_TXT_ACTUATOR_SYSTEM,LCD_ROW_TXT_PENDING_INPUT);
 8d2:	61 e1       	ldi	r22, 0x11	; 17
 8d4:	85 e2       	ldi	r24, 0x25	; 37
 8d6:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
		if(Comm_Bridge_CMD_Read_Req(User_Selection) == OUT_OF_SYNC)
 8da:	8a e9       	ldi	r24, 0x9A	; 154
 8dc:	93 e0       	ldi	r25, 0x03	; 3
 8de:	0e 94 a2 00 	call	0x144	; 0x144 <Comm_Bridge_CMD_Read_Req>
 8e2:	83 31       	cpi	r24, 0x13	; 19
 8e4:	41 f4       	brne	.+16     	; 0x8f6 <Smart_Home_Read_N_Decode+0x24>
		{
			Status_Disp_LCD(LCD_ROW_TXT_CTRL_ACT_SYSTEM,LCD_ROW_TXT_NOT_IN_SYNC);
 8e6:	66 e1       	ldi	r22, 0x16	; 22
 8e8:	8b e2       	ldi	r24, 0x2B	; 43
 8ea:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
			Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
 8ee:	83 e1       	ldi	r24, 0x13	; 19
 8f0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Smart_Home_Sys_Sync_Flag>
 8f4:	08 95       	ret
		}
		else
		{
			#if COMMAND_BYTE_LENGTH == 1
				Selected_Device = User_Selection[CMD_DATA_BYTE] >> REQ_DEV_SHIFT_MASK; // shift the command byte 4 times to the right to get the 4 MSbs which represent the Device Identifier.
 8f6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <User_Selection>
 8fa:	98 2f       	mov	r25, r24
 8fc:	92 95       	swap	r25
 8fe:	9f 70       	andi	r25, 0x0F	; 15
 900:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <Selected_Device>
				Selected_Operation = (User_Selection[CMD_DATA_BYTE] & REQ_OP_MASK); // Mask the 4 LSbs from the command byte to get the Operation identifier.
 904:	8f 70       	andi	r24, 0x0F	; 15
 906:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <__data_end>
 90a:	08 95       	ret

0000090c <Smart_Home_Process_N_Respond>:
		Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
	}
}
#elif ECU_ROLE == ACTUATOR_ECU
static void Smart_Home_Process_N_Respond(void)
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	1f 92       	push	r1
 912:	cd b7       	in	r28, 0x3d	; 61
 914:	de b7       	in	r29, 0x3e	; 62
	uint8 Selection_Validity = SEND_FAILED;
 916:	86 e0       	ldi	r24, 0x06	; 6
 918:	89 83       	std	Y+1, r24	; 0x01
	Selection_Validity = Dev_Op_Check_Valid(Selected_Device, Selected_Operation);
 91a:	60 91 7a 03 	lds	r22, 0x037A	; 0x80037a <__data_end>
 91e:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <Selected_Device>
 922:	0e 94 87 01 	call	0x30e	; 0x30e <Dev_Op_Check_Valid>
 926:	89 83       	std	Y+1, r24	; 0x01
	if(Selection_Validity == DEV_N_OP_VALID)
 928:	81 30       	cpi	r24, 0x01	; 1
 92a:	51 f4       	brne	.+20     	; 0x940 <Smart_Home_Process_N_Respond+0x34>
	{
		Device_Apply_Request(Selected_Device,Selected_Operation);
 92c:	60 91 7a 03 	lds	r22, 0x037A	; 0x80037a <__data_end>
 930:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <Selected_Device>
 934:	0e 94 c5 01 	call	0x38a	; 0x38a <Device_Apply_Request>
		
		Status_Disp_LCD(LCD_ROW_TXT_REQUEST,LCD_ROW_TXT_DONE);
 938:	68 e2       	ldi	r22, 0x28	; 40
 93a:	8a e2       	ldi	r24, 0x2A	; 42
 93c:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
	}
	Comm_Bridge_CMD_Res(&Selection_Validity);
 940:	ce 01       	movw	r24, r28
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Comm_Bridge_CMD_Res>
	if(Selection_Validity == OUT_OF_SYNC)
 948:	89 81       	ldd	r24, Y+1	; 0x01
 94a:	83 31       	cpi	r24, 0x13	; 19
 94c:	11 f4       	brne	.+4      	; 0x952 <Smart_Home_Process_N_Respond+0x46>
	{
		Smart_Home_Sys_Sync_Flag = OUT_OF_SYNC;
 94e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Smart_Home_Sys_Sync_Flag>
	}
}
 952:	0f 90       	pop	r0
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	08 95       	ret

0000095a <Smart_Home_Init>:
#endif /* ECU_ROLE */


void Smart_Home_Init(void)
{
	Status_FollowUp_Init();
 95a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Status_FollowUp_Init>
		Status_Disp_LCD(LCD_ROW_TXT_CONTROL_SYSTEM,LCD_ROW_TXT_READY);
		
	#elif ECU_ROLE == ACTUATOR_ECU
		
		
		Status_Disp_LCD(LCD_ROW_TXT_ACTUATOR_SYSTEM,LCD_ROW_TXT_STARTING);
 95e:	6b e0       	ldi	r22, 0x0B	; 11
 960:	85 e2       	ldi	r24, 0x25	; 37
 962:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
		
		Devices_Init();
 966:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Devices_Init>
		
		Comm_Bridge_Init();
 96a:	0e 94 90 00 	call	0x120	; 0x120 <Comm_Bridge_Init>
		
		Status_Disp_LCD(LCD_ROW_TXT_ACTUATOR_SYSTEM,LCD_ROW_TXT_READY);
 96e:	6e e1       	ldi	r22, 0x1E	; 30
 970:	85 e2       	ldi	r24, 0x25	; 37
 972:	0e 94 ef 04 	call	0x9de	; 0x9de <Status_Disp_LCD>
 976:	08 95       	ret

00000978 <Smart_Home_Run>:
		
	#endif /* ECU_ROLE */
}
void Smart_Home_Run(void)
{
	if(Smart_Home_Sys_Sync_Flag == OUT_OF_SYNC)
 978:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Smart_Home_Sys_Sync_Flag>
 97c:	83 31       	cpi	r24, 0x13	; 19
 97e:	11 f4       	brne	.+4      	; 0x984 <Smart_Home_Run+0xc>
	{
		// Force sync on CMD_Bus by NUM_OF_RESYNC_HANDSHAKES consecutive successfull handshakes.
		Comm_Bridge_CMD_Bus_Re_Sync();
 980:	0e 94 3f 01 	call	0x27e	; 0x27e <Comm_Bridge_CMD_Bus_Re_Sync>
		if(Smart_Home_Sys_Sync_Flag == IN_SYNC)
		{
			Smart_Home_Process_N_Respond();
		}
	#elif ECU_ROLE == ACTUATOR_ECU
		Smart_Home_Read_N_Decode();
 984:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Smart_Home_Read_N_Decode>
		if(Smart_Home_Sys_Sync_Flag == IN_SYNC)
 988:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Smart_Home_Sys_Sync_Flag>
 98c:	84 31       	cpi	r24, 0x14	; 20
 98e:	11 f4       	brne	.+4      	; 0x994 <Smart_Home_Run+0x1c>
		{
			Smart_Home_Process_N_Respond();
 990:	0e 94 86 04 	call	0x90c	; 0x90c <Smart_Home_Process_N_Respond>
 994:	08 95       	ret

00000996 <SPI_Transiver>:
		
		Received_Data = SPI->SPDR;

		SPI_Master_TermTrans();
	#elif SPI_ROLE == SPI_SLAVE
		SPI->SPDR = data;
 996:	8f b9       	out	0x0f, r24	; 15
		
		while(GetBit(SPI->SPSR,SPIF) == 0);
 998:	77 9b       	sbis	0x0e, 7	; 14
 99a:	fe cf       	rjmp	.-4      	; 0x998 <SPI_Transiver+0x2>

		Received_Data = SPI->SPDR;
 99c:	8f b1       	in	r24, 0x0f	; 15
	#endif /* SPI_ROLE */
	return Received_Data;
}
 99e:	08 95       	ret

000009a0 <SPI_Slave_Init>:

void SPI_Slave_Init(void)
{
	//MISO
	DIO_SetPinDir(SPI_PORT,SPI_MISO_PIN,DIO_PIN_OUTPUT);
 9a0:	41 e0       	ldi	r20, 0x01	; 1
 9a2:	66 e0       	ldi	r22, 0x06	; 6
 9a4:	86 e3       	ldi	r24, 0x36	; 54
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	//MOSI
	DIO_SetPinDir(SPI_PORT,SPI_MOSI_PIN,DIO_PIN_INPUT);
 9ac:	40 e0       	ldi	r20, 0x00	; 0
 9ae:	65 e0       	ldi	r22, 0x05	; 5
 9b0:	86 e3       	ldi	r24, 0x36	; 54
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	//CLK
	DIO_SetPinDir(SPI_PORT,SPI_CLK_PIN,DIO_PIN_INPUT);
 9b8:	40 e0       	ldi	r20, 0x00	; 0
 9ba:	67 e0       	ldi	r22, 0x07	; 7
 9bc:	86 e3       	ldi	r24, 0x36	; 54
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	//SS
	DIO_SetPinDir(SPI_PORT,SPI_SS_PIN,DIO_PIN_INPUT);
 9c4:	40 e0       	ldi	r20, 0x00	; 0
 9c6:	64 e0       	ldi	r22, 0x04	; 4
 9c8:	86 e3       	ldi	r24, 0x36	; 54
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	0e 94 41 02 	call	0x482	; 0x482 <DIO_SetPinDir>
	
	// Enable SPI Peripheral & Set the polarity of the transmission to setup then sample
	SPI->SPCR |= (1<<SPE) | (1<<CPHA);
 9d0:	8d b1       	in	r24, 0x0d	; 13
 9d2:	84 64       	ori	r24, 0x44	; 68
 9d4:	8d b9       	out	0x0d, r24	; 13
 9d6:	08 95       	ret

000009d8 <Status_FollowUp_Init>:
    '\0'
};

void Status_FollowUp_Init(void)
{
    LCD_Init();
 9d8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_Init>
 9dc:	08 95       	ret

000009de <Status_Disp_LCD>:
}
void Status_Disp_LCD(uint8 R1_Text_Index, uint8 R2_Text_Index)
{
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	d8 2f       	mov	r29, r24
 9e4:	c6 2f       	mov	r28, r22
    LCD_Clear();
 9e6:	0e 94 0f 04 	call	0x81e	; 0x81e <LCD_Clear>
    LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 9ea:	20 e1       	ldi	r18, 0x10	; 16
 9ec:	d2 9f       	mul	r29, r18
 9ee:	c0 01       	movw	r24, r0
 9f0:	11 24       	eor	r1, r1
 9f2:	87 58       	subi	r24, 0x87	; 135
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteString>
    LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 9fa:	60 e0       	ldi	r22, 0x00	; 0
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_GoToLocation>
    LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 a02:	20 e1       	ldi	r18, 0x10	; 16
 a04:	c2 9f       	mul	r28, r18
 a06:	c0 01       	movw	r24, r0
 a08:	11 24       	eor	r1, r1
 a0a:	87 58       	subi	r24, 0x87	; 135
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteString>
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	94 e3       	ldi	r25, 0x34	; 52
 a16:	2c e0       	ldi	r18, 0x0C	; 12
 a18:	81 50       	subi	r24, 0x01	; 1
 a1a:	90 40       	sbci	r25, 0x00	; 0
 a1c:	20 40       	sbci	r18, 0x00	; 0
 a1e:	e1 f7       	brne	.-8      	; 0xa18 <Status_Disp_LCD+0x3a>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <Status_Disp_LCD+0x44>
 a22:	00 00       	nop
    _delay_ms(LCD_DISP_DELAY_MS);
}
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	08 95       	ret

00000a2a <Status_Disp_LCD_IncludeInteger>:
void Status_Disp_LCD_IncludeInteger(uint8 R1_Text_Index,uint8 Integer_Number, uint8 R2_Text_Index)
{
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	18 2f       	mov	r17, r24
 a32:	d6 2f       	mov	r29, r22
 a34:	c4 2f       	mov	r28, r20
    LCD_Clear();
 a36:	0e 94 0f 04 	call	0x81e	; 0x81e <LCD_Clear>
	LCD_WriteString(LCD_Row_Text_Options[R1_Text_Index]);
 a3a:	20 e1       	ldi	r18, 0x10	; 16
 a3c:	12 9f       	mul	r17, r18
 a3e:	c0 01       	movw	r24, r0
 a40:	11 24       	eor	r1, r1
 a42:	87 58       	subi	r24, 0x87	; 135
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteString>
	LCD_WriteInteger(Integer_Number);
 a4a:	6d 2f       	mov	r22, r29
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <LCD_WriteInteger>
	LCD_GoToLocation(LCD_ROW_2,0*LCD_SHIFT_CURSOR);
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_GoToLocation>
	LCD_WriteString(LCD_Row_Text_Options[R2_Text_Index]);
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	c2 9f       	mul	r28, r18
 a62:	c0 01       	movw	r24, r0
 a64:	11 24       	eor	r1, r1
 a66:	87 58       	subi	r24, 0x87	; 135
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <LCD_WriteString>
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	94 e3       	ldi	r25, 0x34	; 52
 a72:	2c e0       	ldi	r18, 0x0C	; 12
 a74:	81 50       	subi	r24, 0x01	; 1
 a76:	90 40       	sbci	r25, 0x00	; 0
 a78:	20 40       	sbci	r18, 0x00	; 0
 a7a:	e1 f7       	brne	.-8      	; 0xa74 <Status_Disp_LCD_IncludeInteger+0x4a>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <Status_Disp_LCD_IncludeInteger+0x54>
 a7e:	00 00       	nop
	_delay_ms(LCD_DISP_DELAY_MS);
}
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	08 95       	ret

00000a88 <__divmodsi4>:
 a88:	05 2e       	mov	r0, r21
 a8a:	97 fb       	bst	r25, 7
 a8c:	1e f4       	brtc	.+6      	; 0xa94 <__divmodsi4+0xc>
 a8e:	00 94       	com	r0
 a90:	0e 94 5b 05 	call	0xab6	; 0xab6 <__negsi2>
 a94:	57 fd       	sbrc	r21, 7
 a96:	07 d0       	rcall	.+14     	; 0xaa6 <__divmodsi4_neg2>
 a98:	0e 94 72 05 	call	0xae4	; 0xae4 <__udivmodsi4>
 a9c:	07 fc       	sbrc	r0, 7
 a9e:	03 d0       	rcall	.+6      	; 0xaa6 <__divmodsi4_neg2>
 aa0:	4e f4       	brtc	.+18     	; 0xab4 <__divmodsi4_exit>
 aa2:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__negsi2>

00000aa6 <__divmodsi4_neg2>:
 aa6:	50 95       	com	r21
 aa8:	40 95       	com	r20
 aaa:	30 95       	com	r19
 aac:	21 95       	neg	r18
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	4f 4f       	sbci	r20, 0xFF	; 255
 ab2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ab4 <__divmodsi4_exit>:
 ab4:	08 95       	ret

00000ab6 <__negsi2>:
 ab6:	90 95       	com	r25
 ab8:	80 95       	com	r24
 aba:	70 95       	com	r23
 abc:	61 95       	neg	r22
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	08 95       	ret

00000ac6 <__umulhisi3>:
 ac6:	a2 9f       	mul	r26, r18
 ac8:	b0 01       	movw	r22, r0
 aca:	b3 9f       	mul	r27, r19
 acc:	c0 01       	movw	r24, r0
 ace:	a3 9f       	mul	r26, r19
 ad0:	70 0d       	add	r23, r0
 ad2:	81 1d       	adc	r24, r1
 ad4:	11 24       	eor	r1, r1
 ad6:	91 1d       	adc	r25, r1
 ad8:	b2 9f       	mul	r27, r18
 ada:	70 0d       	add	r23, r0
 adc:	81 1d       	adc	r24, r1
 ade:	11 24       	eor	r1, r1
 ae0:	91 1d       	adc	r25, r1
 ae2:	08 95       	ret

00000ae4 <__udivmodsi4>:
 ae4:	a1 e2       	ldi	r26, 0x21	; 33
 ae6:	1a 2e       	mov	r1, r26
 ae8:	aa 1b       	sub	r26, r26
 aea:	bb 1b       	sub	r27, r27
 aec:	fd 01       	movw	r30, r26
 aee:	0d c0       	rjmp	.+26     	; 0xb0a <__udivmodsi4_ep>

00000af0 <__udivmodsi4_loop>:
 af0:	aa 1f       	adc	r26, r26
 af2:	bb 1f       	adc	r27, r27
 af4:	ee 1f       	adc	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	a2 17       	cp	r26, r18
 afa:	b3 07       	cpc	r27, r19
 afc:	e4 07       	cpc	r30, r20
 afe:	f5 07       	cpc	r31, r21
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__udivmodsi4_ep>
 b02:	a2 1b       	sub	r26, r18
 b04:	b3 0b       	sbc	r27, r19
 b06:	e4 0b       	sbc	r30, r20
 b08:	f5 0b       	sbc	r31, r21

00000b0a <__udivmodsi4_ep>:
 b0a:	66 1f       	adc	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	1a 94       	dec	r1
 b14:	69 f7       	brne	.-38     	; 0xaf0 <__udivmodsi4_loop>
 b16:	60 95       	com	r22
 b18:	70 95       	com	r23
 b1a:	80 95       	com	r24
 b1c:	90 95       	com	r25
 b1e:	9b 01       	movw	r18, r22
 b20:	ac 01       	movw	r20, r24
 b22:	bd 01       	movw	r22, r26
 b24:	cf 01       	movw	r24, r30
 b26:	08 95       	ret

00000b28 <_exit>:
 b28:	f8 94       	cli

00000b2a <__stop_program>:
 b2a:	ff cf       	rjmp	.-2      	; 0xb2a <__stop_program>
